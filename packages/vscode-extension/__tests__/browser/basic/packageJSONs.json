[
	{
		"name": "vscode-languagetool",
		"displayName": "LanguageTool for Visual Studio Code",
		"preview": false,
		"description": "LanguageTool grammar checking for Visual Studio Code.",
		"author": "Adam Voss",
		"license": "Apache-2.0",
		"version": "3.8.0",
		"publisher": "adamvoss",
		"repository": {
			"url": "https://github.com/adamvoss/vscode-languagetool"
		},
		"icon": "img/LanguageTool-Icon.png",
		"galleryBanner": {
			"color": "#6565f6",
			"theme": "dark"
		},
		"engines": {
			"vscode": "^1.8.0"
		},
		"keywords": [
			"spell",
			"grammar",
			"proofread",
			"checker",
			"grammar-checker"
		],
		"categories": [
			"Other"
		],
		"activationEvents": [
			"onLanguage:plaintext",
			"onLanguage:markdown"
		],
		"main": "./out/src/extension",
		"contributes": {
			"configuration": {
				"type": "object",
				"title": "LanguageTool Language Server configuration",
				"properties": {
					"languageTool.language": {
						"type": "string",
						"default": "en",
						"description": "The language LanguageTool should check against"
					},
					"languageTool.enabled": {
						"type": "boolean",
						"default": true,
						"description": "Allow to enable languageTool on specific workspaces"
					}
				}
			}
		},
		"scripts": {
			"vscode:prepublish": "tsc -p ./ && ./lib/languagetool-languageserver/gradlew --project-dir ./lib/languagetool-languageserver/ installDist",
			"compile": "tsc -p ./",
			"watch": "tsc -watch -p ./",
			"update-vscode": "node ./node_modules/vscode/bin/install",
			"postinstall": "node ./node_modules/vscode/bin/install"
		},
		"devDependencies": {
			"@types/mocha": "^2.2.33",
			"@types/node": "^6.0.52",
			"typescript": "^2.1.5",
			"vscode": "^1.0.3"
		},
		"dependencies": {
			"vscode-languageclient": "^3.1.0"
		},
		"__metadata": {
			"id": "5b45bff0-e35e-4317-8686-1625c2a9c411",
			"publisherId": "bcc84b7b-7923-41b3-80e2-0dce99cc0f2f",
			"publisherDisplayName": "Adam Voss"
		}
	},
	{
		"name": "vscode-theme-onedark",
		"displayName": "Atom One Dark Theme",
		"description": "One Dark Theme based on Atom",
		"version": "2.1.0",
		"publisher": "akamud",
		"license": "MIT",
		"galleryBanner": {
			"color": "#282C34",
			"theme": "dark"
		},
		"engines": {
			"vscode": "^1.12.0"
		},
		"categories": [
			"Themes"
		],
		"keywords": [
			"atom",
			"theme",
			"dark",
			"one dark"
		],
		"icon": "icon.png",
		"contributes": {
			"themes": [
				{
					"label": "Atom One Dark",
					"uiTheme": "vs-dark",
					"path": "./themes/OneDark.json"
				}
			]
		},
		"bugs": {
			"url": "https://github.com/akamud/vscode-theme-onedark/issues",
			"email": "muddibr@gmail.com"
		},
		"homepage": "https://github.com/akamud/vscode-theme-onedark",
		"repository": {
			"type": "git",
			"url": "https://github.com/akamud/vscode-theme-onedark"
		},
		"badges": [
			{
				"url": "https://vsmarketplacebadge.apphb.com/version/akamud.vscode-theme-onedark.svg",
				"href": "https://marketplace.visualstudio.com/items/akamud.vscode-theme-onedark",
				"description": "Extension version"
			},
			{
				"url": "https://vsmarketplacebadge.apphb.com/installs/akamud.vscode-theme-onedark.svg",
				"href": "https://marketplace.visualstudio.com/items/akamud.vscode-theme-onedark",
				"description": "Extension installs"
			},
			{
				"url": "https://vsmarketplacebadge.apphb.com/rating/akamud.vscode-theme-onedark.svg",
				"href": "https://marketplace.visualstudio.com/items/akamud.vscode-theme-onedark",
				"description": "Extension Rating"
			}
		],
		"__metadata": {
			"id": "9b2c953d-6ad4-46d1-b18e-7e5992d1d8a6",
			"publisherId": "1a680e61-b64e-4eff-bbbb-2085b0618f52",
			"publisherDisplayName": "Mahmoud Ali"
		}
	},
	{
		"name": "quick-run-panel",
		"displayName": "quick-run-panel",
		"description": "view and run vscode tasks and debug configurations",
		"version": "0.0.3",
		"publisher": "davehart",
		"icon": "resources/icon.png",
		"repository": {
			"type": "git",
			"url": "https://github.com/dave-hart/vscode-quick-run-panel"
		},
		"engines": {
			"vscode": "^1.27.0"
		},
		"categories": [
			"Other"
		],
		"activationEvents": [
			"onView:quickRunPanel"
		],
		"main": "./out/extension",
		"contributes": {
			"commands": [
				{
					"command": "quickRunPanel.runSelection",
					"title": "Run Selection"
				},
				{
					"command": "quickRunPanel.refresh",
					"title": "Refresh",
					"icon": {
						"light": "resources/light/refresh.svg",
						"dark": "resources/dark/refresh.svg"
					}
				}
			],
			"views": {
				"explorer": [
					{
						"id": "quickRunPanel",
						"name": "Quick Run"
					}
				]
			},
			"menus": {
				"view/title": [
					{
						"command": "quickRunPanel.refresh",
						"when": "view == quickRunPanel",
						"group": "navigation"
					}
				]
			},
			"configuration": {
				"title": "Quick Run Panel",
				"properties": {
					"QuickRunPanel.includeDebugConfigs": {
						"type": "boolean",
						"default": true,
						"description": "Whether or not to include debug configurations"
					},
					"QuickRunPanel.includeTasks": {
						"type": "boolean",
						"default": true,
						"description": "Whether or not to include tasks"
					},
					"QuickRunPanel.taskSources": {
						"type": "array",
						"items": "string",
						"default": [
							"Workspace"
						],
						"description": "A list of strings detailing where to get the tasks from. E.g. Workspace, npm, gulp - defaults to Workspace"
					}
				}
			}
		},
		"scripts": {
			"vscode:prepublish": "npm run compile",
			"compile": "tsc -p ./",
			"watch": "tsc -watch -p ./",
			"postinstall": "node ./node_modules/vscode/bin/install",
			"test": "npm run compile && node ./node_modules/vscode/bin/test"
		},
		"devDependencies": {
			"typescript": "^2.6.1",
			"vscode": "^1.1.21",
			"tslint": "^5.8.0",
			"@types/node": "^8.10.25",
			"@types/mocha": "^2.2.42"
		},
		"__metadata": {
			"id": "115b123b-6c66-4bb3-a475-967169e55162",
			"publisherId": "f4031b79-865a-4235-9862-f3c4670e8867",
			"publisherDisplayName": "dave hart"
		}
	},
	{
		"name": "vscode-npm-script",
		"description": "npm support for VS Code",
		"displayName": "npm",
		"version": "0.3.7",
		"publisher": "eg2",
		"icon": "npm_icon.png",
		"engines": {
			"vscode": "^1.17.0"
		},
		"homepage": "https://github.com/Microsoft/vscode-npm-scripts/blob/master/README.md",
		"repository": {
			"type": "git",
			"url": "https://github.com/Microsoft/vscode-npm-scripts.git"
		},
		"bugs": {
			"url": "https://github.com/Microsoft/vscode-npm-scripts/issues"
		},
		"categories": [
			"Other"
		],
		"keywords": [
			"multi-root ready"
		],
		"activationEvents": [
			"onLanguage:json",
			"onCommand:npm-script.install",
			"onCommand:npm-script.run",
			"onCommand:npm-script.showOutput",
			"onCommand:npm-script.rerun-last-script",
			"onCommand:npm-script.terminate-script",
			"onCommand:npm-script.test",
			"onCommand:npm-script.start",
			"onCommand:npm-script.audit",
			"onCommand:npm-script.init"
		],
		"main": "./dist/extension",
		"contributes": {
			"commands": [
				{
					"command": "npm-script.install",
					"title": "Install Dependencies",
					"category": "npm",
					"icon": "./assets/install.png"
				},
				{
					"command": "npm-script.terminate-script",
					"title": "Terminate Script",
					"category": "npm"
				},
				{
					"command": "npm-script.run",
					"title": "Run Script",
					"category": "npm"
				},
				{
					"command": "npm-script.start",
					"title": "Start",
					"category": "npm",
					"icon": "./assets/start.png"
				},
				{
					"command": "npm-script.showOutput",
					"title": "Show Output",
					"category": "npm"
				},
				{
					"command": "npm-script.rerun-last-script",
					"title": "Rerun Last Script",
					"category": "npm"
				},
				{
					"command": "npm-script.test",
					"title": "Run Test",
					"category": "npm",
					"icon": "./assets/test.png"
				},
				{
					"command": "npm-script.build",
					"title": "Run Build",
					"category": "npm",
					"icon": "./assets/build.png"
				},
				{
					"command": "npm-script.audit",
					"title": "Run Audit",
					"category": "npm"
				},
				{
					"command": "npm-script.init",
					"title": "Run Init",
					"category": "npm"
				}
			],
			"menus": {
				"explorer/context": [
					{
						"when": "resourceFilename == 'package.json'",
						"command": "npm-script.install",
						"group": "navigation@+1"
					}
				],
				"touchBar": [
					{
						"command": "npm-script.install",
						"group": "navigation@+1",
						"when": "config.npm.enableTouchbar"
					},
					{
						"command": "npm-script.build",
						"group": "navigation@+4",
						"when": "config.npm.enableTouchbar"
					},
					{
						"command": "npm-script.test",
						"group": "navigation@+3",
						"when": "config.npm.enableTouchbar"
					},
					{
						"command": "npm-script.start",
						"group": "navigation@+2",
						"when": "config.npm.enableTouchbar"
					}
				]
			},
			"keybindings": [
				{
					"command": "npm-script.showOutput",
					"key": "Ctrl+R L",
					"mac": "Cmd+R L"
				},
				{
					"command": "npm-script.run",
					"key": "Ctrl+R Shift+R",
					"mac": "Cmd+R Shift+R"
				},
				{
					"command": "npm-script.rerun-last-script",
					"key": "Ctrl+R R",
					"mac": "Cmd+R R"
				},
				{
					"command": "npm-script.terminate-script",
					"key": "Ctrl+R Shift+X",
					"mac": "Cmd+R Shift+X"
				},
				{
					"command": "npm-script.test",
					"key": "Ctrl+R T",
					"mac": "Cmd+R T"
				}
			],
			"configuration": {
				"type": "object",
				"title": "npm Script Runner",
				"properties": {
					"npm.runInTerminal": {
						"type": "boolean",
						"default": true,
						"description": "Run npm commands in a terminal, otherwise shows the output in the output panel"
					},
					"npm.includeDirectories": {
						"type": "array",
						"scope": "resource",
						"default": [],
						"description": "Look for 'package.json' files in these directories"
					},
					"npm.useRootDirectory": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"description": "Look for 'package.json' in the root directory of the workspace"
					},
					"npm.bin": {
						"type": "string",
						"default": "npm",
						"description": "npm bin name"
					},
					"npm.validate.enable": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"description": "Validate installed modules"
					},
					"npm.enableTouchbar": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"description": "Enable npm commands in the macOS touchbar."
					}
				}
			}
		},
		"scripts": {
			"vscode:prepublish": "webpack --mode production",
			"webpack": "webpack --mode development",
			"webpack-dev": "webpack --mode development --watch",
			"postinstall": "node ./node_modules/vscode/bin/install",
			"test": "npm run compile && node ./node_modules/vscode/bin/test",
			"tslint": "tslint src/*.ts"
		},
		"devDependencies": {
			"@types/mocha": "^2.2.32",
			"@types/node": "^7.0.43",
			"ts-loader": "^4.4.2",
			"tslint": "^5.11.0",
			"typescript": "3.0.3",
			"vscode": "^1.1.22",
			"webpack": "^4.19.1",
			"webpack-cli": "^3.1.0"
		},
		"dependencies": {
			"run-in-terminal": "^0.0.2",
			"tree-kill": "^1.1.0",
			"jsonc-parser": "^2.0.2"
		},
		"__metadata": {
			"id": "ae9e3eb0-3357-4cc0-90ee-598d2d384757",
			"publisherId": "0b5821dc-b7ab-4fa0-bcee-c2add1d8f9db",
			"publisherDisplayName": "egamma"
		}
	},
	{
		"name": "vscode-position",
		"displayName": "vscode-position",
		"description": "Get and Set cursor position by byte offset",
		"version": "1.0.1",
		"publisher": "jtr",
		"license": "MIT",
		"icon": "other/icon.png",
		"engines": {
			"vscode": "^1.13.0"
		},
		"categories": [
			"Other"
		],
		"galleryBanner": {
			"color": "#516084",
			"theme": "dark"
		},
		"activationEvents": [
			"*"
		],
		"main": "./out/extension",
		"contributes": {
			"commands": [
				{
					"command": "position.goto",
					"title": "Go to Position"
				}
			],
			"keybindings": [
				{
					"command": "position.goto",
					"key": "ctrl+alt+g",
					"mac": "ctrl+cmd+g",
					"when": "editorTextFocus"
				}
			]
		},
		"scripts": {
			"vscode:prepublish": "npm run compile",
			"compile": "tsc -p ./",
			"watch": "tsc -watch -p ./",
			"postinstall": "node ./node_modules/vscode/bin/install",
			"test": "npm run compile && node ./node_modules/vscode/bin/test"
		},
		"repository": {
			"type": "git",
			"url": "https://github.com/joerohde/vscode-position"
		},
		"devDependencies": {
			"typescript": "^2.6.1",
			"vscode": "^1.1.6",
			"tslint": "^5.8.0",
			"@types/node": "^7.0.43",
			"@types/mocha": "^2.2.42"
		},
		"__metadata": {
			"id": "686dfeeb-41da-432f-90da-42bb523d83f6",
			"publisherId": "1fc7fec2-2058-4135-adaa-e6325b25d94c",
			"publisherDisplayName": "jtr"
		}
	},
	{
		"name": "vscode-gn",
		"displayName": "GN",
		"description": "Edit GN files in Visual Studio Code",
		"version": "1.0.0",
		"publisher": "npclaudiu",
		"engines": {
			"vscode": "^1.17.0"
		},
		"license": "BSD",
		"categories": [
			"Languages"
		],
		"contributes": {
			"languages": [
				{
					"id": "gn",
					"aliases": [
						"GN",
						"gn"
					],
					"extensions": [
						".gn",
						".gni"
					],
					"configuration": "./language-configuration.json"
				}
			],
			"grammars": [
				{
					"language": "gn",
					"scopeName": "source.gn",
					"path": "./syntaxes/GN.tmLanguage.json"
				}
			]
		},
		"__metadata": {
			"id": "328c24ac-f68d-4d1e-bc1f-fa43fc6b366f",
			"publisherId": "87f040d5-8795-442c-a281-5fff6ee13373",
			"publisherDisplayName": "npclaudiu"
		}
	},
	{
		"name": "jshint",
		"description": "Integrates JSHint into VS Code. JSHint is a linter for JavaScript",
		"version": "0.10.20",
		"author": "Microsoft Corporation",
		"license": "MIT",
		"repository": {
			"type": "git",
			"url": "https://github.com/Microsoft/vscode-jshint.git"
		},
		"bugs": {
			"url": "https://github.com/Microsoft/vscode-jshint/issues"
		},
		"icon": "jshint_icon.png",
		"galleryBanner": {
			"color": "#5c2d91",
			"theme": "dark"
		},
		"categories": [
			"Linters"
		],
		"publisher": "dbaeumer",
		"engines": {
			"vscode": "^1.26.0"
		},
		"activationEvents": [
			"onLanguage:javascript",
			"onLanguage:javascriptreact",
			"onLanguage:html"
		],
		"main": "./jshint/out/extension",
		"contributes": {
			"configuration": {
				"type": "object",
				"title": "JSHint configuration",
				"properties": {
					"jshint.enable": {
						"type": "boolean",
						"default": true,
						"description": "Control whether or not jshint is enabled for JavaScript files."
					},
					"jshint.config": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "A path to file containing the configuration options for jshint. If the file exists it overrides jshint.options and any .jshintrc file"
					},
					"jshint.options": {
						"type": "object",
						"properties": {
							"bitwise": {
								"description": "Prohibit the use of bitwise operators (&, |, ^, etc.)",
								"type": "boolean",
								"default": false
							},
							"curly": {
								"description": "Requires you to always put curly braces around blocks in loops and conditionals",
								"type": "boolean",
								"default": false
							},
							"eqeqeq": {
								"description": "Prohibits the use of `==` and `!=` in favor of `===` and `!==`",
								"type": "boolean",
								"default": false
							},
							"esversion": {
								"description": "The ECMAScript version to which the code must adhere",
								"type": "integer",
								"default": 5,
								"enum": [
									3,
									5,
									6
								]
							},
							"forin": {
								"description": "Requires all `for in` loops to filter object's items with obj.hasOwnProperty()",
								"type": "boolean",
								"default": false
							},
							"freeze": {
								"description": "Prohibits overwriting prototypes of native objects such as Array, Date and so on",
								"type": "boolean",
								"default": false
							},
							"funcscope": {
								"description": "Suppresses warnings about declaring variables inside of control structures while accessing them later from the outside",
								"type": "boolean",
								"default": false
							},
							"futurehostile": {
								"description": "Enables warnings about the use of identifiers which are defined in future versions of JavaScript",
								"type": "boolean",
								"default": false
							},
							"globals": {
								"description": "Specify a white list of global variables that are not formally defined in the source code",
								"type": "object",
								"additionalProperties": {
									"description": "Name of the global. Set to `true` for read/write, `false` for read-only.",
									"type": "boolean"
								}
							},
							"iterator": {
								"description": "Suppresses warnings about the __iterator__ property.",
								"type": "boolean",
								"default": false
							},
							"latedef": {
								"description": "Prohibits the use of a variable before it was defined",
								"enum": [
									true,
									false,
									"nofunc"
								],
								"default": false
							},
							"maxcomplexity": {
								"description": "Max cyclomatic complexity per function",
								"type": [
									"boolean",
									"integer"
								],
								"default": false
							},
							"maxdepth": {
								"description": "Max depth of nested blocks",
								"type": [
									"boolean",
									"integer"
								],
								"default": false
							},
							"maxerr": {
								"description": "Maximum amount of warnings JSHint will produce before giving up",
								"type": "integer",
								"default": 50
							},
							"maxparams": {
								"description": "Max number of formal parameters allowed per function",
								"type": [
									"boolean",
									"integer"
								]
							},
							"maxstatements": {
								"description": "Max number statements per function",
								"type": [
									"boolean",
									"integer"
								],
								"default": false
							},
							"noarg": {
								"description": "Prohibits the use of `arguments.caller` and `arguments.callee`",
								"type": "boolean",
								"default": false
							},
							"nocomma": {
								"description": "Prohibits the use of the comma operator",
								"type": "boolean",
								"default": false
							},
							"nonbsp": {
								"description": "Warns about `non-breaking whitespace` characters",
								"type": "boolean",
								"default": false
							},
							"nonew": {
								"description": "Prohibits the use of constructors for side-effects (without assignment)",
								"type": "boolean",
								"default": false
							},
							"notypeof": {
								"description": "Suppresses warnings about invalid `typeof`operator values",
								"type": "boolean",
								"default": false
							},
							"shadow": {
								"description": "Suppresses warnings about variable shadowing. i.e. declaring a variable that had been already declared somewhere in the outer scope",
								"type": [
									"boolean",
									"string"
								],
								"default": false,
								"enum": [
									true,
									false,
									"inner",
									"outer"
								]
							},
							"singleGroups": {
								"description": "Prohibits the use of the grouping operator when it is not strictly required.",
								"type": "boolean",
								"default": false
							},
							"strict": {
								"description": "Requires all code to run in ES5 strict mode",
								"type": [
									"boolean",
									"string"
								],
								"default": false,
								"enum": [
									true,
									false,
									"implied",
									"global",
									"func"
								]
							},
							"undef": {
								"description": "Prohibits the use of explicitly undeclared variables",
								"type": "boolean",
								"default": false
							},
							"unused": {
								"description": "Warns when you define and never use your variables",
								"type": [
									"boolean",
									"string"
								],
								"default": false,
								"enum": [
									true,
									false,
									"vars",
									"strict"
								]
							},
							"varstmt": {
								"description": "Forbids the use of VariableStatements (`var`) in favor of `let` and `const`",
								"type": "boolean",
								"default": false
							},
							"asi": {
								"description": "Suppresses warnings about missing semicolons",
								"type": "boolean",
								"default": false
							},
							"boss": {
								"description": "Suppresses warnings about the use of assignments in cases where comparisons are expected",
								"type": "boolean",
								"default": false
							},
							"debug": {
								"description": "Suppresses warnings about the `debugger` statements in your code",
								"type": "boolean",
								"default": false
							},
							"elision": {
								"description": "Tells JSHint that your code uses ES3 array elision elements, or empty elements",
								"type": "boolean",
								"default": false
							},
							"eqnull": {
								"description": "Suppresses warnings about `== null` comparisons",
								"type": "boolean",
								"default": false
							},
							"evil": {
								"description": "Suppresses warnings about the use of `eval`",
								"type": "boolean",
								"default": false
							},
							"expr": {
								"description": "Suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls",
								"type": "boolean",
								"default": false
							},
							"lastsemic": {
								"description": "Suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block",
								"type": "boolean",
								"default": false
							},
							"loopfunc": {
								"description": "Suppresses warnings about functions inside of loops",
								"type": "boolean",
								"default": false
							},
							"moz": {
								"description": "Tells JSHint that your code uses Mozilla JavaScript extensions",
								"type": "boolean",
								"default": false
							},
							"noyield": {
								"description": "Suppresses warnings about generator functions with no `yield` statement in them",
								"type": "boolean",
								"default": false
							},
							"plusplus": {
								"description": "Prohibits the use of `++` and `--`",
								"type": "boolean",
								"default": false
							},
							"proto": {
								"description": "Suppresses warnings about the `__proto__` property",
								"type": "boolean",
								"default": false
							},
							"scripturl": {
								"description": "Suppresses warnings about the use of script-targeted URLs",
								"type": "boolean",
								"default": false
							},
							"supernew": {
								"description": "Suppresses warnings about constructions like `new function () { ... };` and `new Object;`",
								"type": "boolean",
								"default": false
							},
							"validthis": {
								"description": "Suppresses warnings about possible strict violations when the code is running in strict mode and you use `this` in a non-constructor function",
								"type": "boolean",
								"default": false
							},
							"withstmt": {
								"description": "Suppresses warnings about the use of the `with` statement",
								"type": "boolean",
								"default": false
							},
							"browser": {
								"description": "[Environment] Web Browser (window, document, etc)",
								"type": "boolean",
								"default": false
							},
							"browserify": {
								"description": "[Environment] Browserify",
								"type": "boolean",
								"default": false
							},
							"couch": {
								"description": "[Environment] CouchDB",
								"type": "boolean",
								"default": false
							},
							"devel": {
								"description": "[Environment] Development/debugging (alert, confirm, etc)",
								"type": "boolean",
								"default": false
							},
							"dojo": {
								"description": "[Environment] Dojo Toolkit",
								"type": "boolean",
								"default": false
							},
							"jasmine": {
								"description": "[Environment] Jasmine unit testing framework",
								"type": "boolean",
								"default": false
							},
							"jquery": {
								"description": "[Environment] jQuery",
								"type": "boolean",
								"default": false
							},
							"mocha": {
								"description": "[Environment] Mocha unit testing framework",
								"type": "boolean",
								"default": false
							},
							"module": {
								"description": "[Environment] ES6 module",
								"type": "boolean",
								"default": false
							},
							"mootools": {
								"description": "[Environment] MooTools",
								"type": "boolean",
								"default": false
							},
							"node": {
								"description": "[Environment] Node.js",
								"type": "boolean",
								"default": false
							},
							"nonstandard": {
								"description": "[Environment] Widely adopted globals (escape, unescape, etc)",
								"type": "boolean",
								"default": false
							},
							"phantom": {
								"description": "[Environment] PhantomJS runtime environment",
								"type": "boolean",
								"default": false
							},
							"prototypejs": {
								"description": "[Environment] Prototype JavaScript framework",
								"type": "boolean",
								"default": false
							},
							"rhino": {
								"description": "[Environment] Rhino",
								"type": "boolean",
								"default": false
							},
							"shelljs": {
								"description": "[Environment] Defines globals exposed by the ShellJS library",
								"type": "boolean",
								"default": false
							},
							"typed": {
								"description": "[Environment] Defines globals for typed array constructors",
								"type": "boolean",
								"default": false
							},
							"worker": {
								"description": "[Environment] Web Workers",
								"type": "boolean",
								"default": false
							},
							"wsh": {
								"description": "[Environment] Windows Scripting Host",
								"type": "boolean",
								"default": false
							},
							"yui": {
								"description": "[Environment] Yahoo User Interface",
								"type": "boolean",
								"default": false
							}
						},
						"default": {},
						"description": "The jshint options object to provide args to the jshint command."
					},
					"jshint.excludePath": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "A path to a file containing patterns describing which files and directories should be ignored by jshint. If the file exists it overrides jshint.exclude and any .jshintignore file."
					},
					"jshint.exclude": {
						"type": "object",
						"default": {},
						"description": "Matching files and directories are being ignored by jshint. Glob patterns are interpreted relative to the workspace's root folder."
					},
					"jshint.reportWarningsAsErrors": {
						"type": "boolean",
						"default": false,
						"description": "Report warnings as errors"
					},
					"jshint.lintHTML": {
						"type": "boolean",
						"default": false,
						"description": "Lint JavaScript embedded in HTML"
					},
					"jshint.nodePath": {
						"type": "string",
						"default": "",
						"description": "Configures the path to the jshint module. Can be an absolute path or relative to the current directory."
					},
					"jshint.packageManager": {
						"scope": "resource",
						"type": "string",
						"enum": [
							"npm",
							"yarn"
						],
						"default": "npm",
						"description": "The package manager you use to install node modules."
					},
					"jshint.trace.server": {
						"scope": "window",
						"type": "string",
						"enum": [
							"off",
							"messages",
							"verbose"
						],
						"default": "off",
						"description": "Traces the communication between VS Code and the jshint linter service."
					}
				}
			},
			"commands": [
				{
					"title": "Show output",
					"category": "JSHint",
					"command": "jshint.showOutputChannel"
				}
			],
			"jsonValidation": [
				{
					"fileMatch": "jshint.json",
					"url": "http://json.schemastore.org/grunt-jshint-task"
				},
				{
					"fileMatch": ".jshintrc",
					"url": "http://json.schemastore.org/jshintrc"
				}
			]
		},
		"scripts": {
			"vscode:prepublish": "cd jshint && npm run update-vscode && cd .. && npm run compile",
			"compile:client": "tsc -p jshint/tsconfig.json",
			"compile:server": "tsc -p jshint-server/tsconfig.json",
			"watch:client": "tsc -w -p jshint/tsconfig.json",
			"watch:server": "tsc -w -p jshint-server/tsconfig.json",
			"compile": "npm run compile:client && npm run compile:server",
			"postinstall": "cd jshint && npm install && cd ../jshint-server && npm install && cd .."
		},
		"devDependencies": {
			"typescript": "^2.6.2",
			"@types/node": "^9.4.0"
		},
		"__metadata": {
			"id": "82dfe17d-bb64-404e-bcc5-f9803f7ab5d5",
			"publisherId": "29859a75-d81b-4f0e-8578-2c80ecee6f99",
			"publisherDisplayName": "Dirk Baeumer"
		}
	},
	{
		"name": "githistory",
		"displayName": "Git History",
		"description": "View git log, file history, compare branches or commits",
		"version": "0.4.6",
		"publisher": "donjayamanne",
		"author": {
			"name": "Don Jayamanne",
			"email": "don.jayamanne@yahoo.com"
		},
		"license": "MIT",
		"homepage": "https://github.com/DonJayamanne/gitHistoryVSCode/blob/master/README.md",
		"repository": {
			"type": "git",
			"url": "https://github.com/DonJayamanne/gitHistoryVSCode"
		},
		"icon": "images/icon.png",
		"bugs": {
			"url": "https://github.com/DonJayamanne/gitHistoryVSCode/issues"
		},
		"galleryBanner": {
			"color": "#0000FF",
			"theme": "dark"
		},
		"engines": {
			"vscode": "^1.27.0"
		},
		"categories": [
			"Other"
		],
		"activationEvents": [
			"onCommand:git.viewFileHistory",
			"onCommand:git.viewLineHistory",
			"onCommand:git.viewHistory"
		],
		"main": "./out/src/extension",
		"contributes": {
			"views": {
				"explorer": [
					{
						"id": "commitViewProvider",
						"name": "Commits",
						"when": "!config.gitHistory.hideCommitViewExplorer && git.commit.view.show && git.commit.selected"
					},
					{
						"id": "compareCommitViewProvider",
						"name": "Compare Commits",
						"when": "!config.gitHistory.hideCompareCommitViewExplorer && git.commit.compare.view.show && git.commit.compare.compared"
					}
				]
			},
			"commands": [
				{
					"command": "git.commit.view.hide",
					"title": "Hide Commit View Explorer",
					"category": "Git",
					"icon": {
						"dark": "resources/icons/misc/close-dark.svg",
						"light": "resources/icons/misc/close.svg"
					}
				},
				{
					"command": "git.commit.view.show",
					"title": "Git: Show Commit View Explorer"
				},
				{
					"command": "git.commit.compare.view.hide",
					"title": "Hide Commit Comparison View Explorer",
					"category": "Git",
					"icon": {
						"dark": "resources/icons/misc/close-dark.svg",
						"light": "resources/icons/misc/close.svg"
					}
				},
				{
					"command": "git.commit.compare.view.show",
					"title": "Git: Show Commit Comparison View Explorer"
				},
				{
					"command": "git.viewLineHistory",
					"title": "Git: View Line History"
				},
				{
					"command": "git.viewHistory",
					"title": "Git: View History (git log)",
					"icon": {
						"dark": "./resources/icons/dark/git.svg",
						"light": "./resources/icons/light/git.svg"
					}
				},
				{
					"command": "git.viewFileHistory",
					"title": "Git: View File History",
					"icon": {
						"dark": "./resources/icons/dark/git.svg",
						"light": "./resources/icons/light/git.svg"
					}
				},
				{
					"command": "git.commit.ViewChangeLog",
					"title": "View Change log"
				},
				{
					"command": "git.commit.cherryPick",
					"title": "Cherrypick into current branch"
				},
				{
					"command": "git.commit.createBranch",
					"title": "Create a branch from this commit"
				},
				{
					"command": "git.commit.FileEntry.ViewFileContents",
					"title": "View File Contents"
				},
				{
					"command": "git.commit.FileEntry.CompareAgainstWorkspace",
					"title": "Compare against workspace version"
				},
				{
					"command": "git.commit.FileEntry.CompareAgainstPrevious",
					"title": "Compare against previous version"
				},
				{
					"command": "git.commit.FileEntry.selectForComparison",
					"title": "Select for comparison"
				},
				{
					"command": "git.commit.FileEntry.compare",
					"title": "Compare against previously selected Commit"
				},
				{
					"command": "git.commit.compare.file.compare",
					"title": "Compare   "
				},
				{
					"command": "git.commit.compare.selectForComparison",
					"title": "Select for comparison"
				},
				{
					"command": "git.commit.compare",
					"title": "Compare against previously selected Commit"
				},
				{
					"command": "git.commit.compare.view.showFilesOnly",
					"title": "Show files only"
				},
				{
					"command": "git.commit.compare.view.showFolderView",
					"title": "Show folder view"
				},
				{
					"command": "git.commit.merge",
					"title": "Merge with this commit"
				},
				{
					"command": "git.commit.rebase",
					"title": "Rebase onto this commit"
				},
				{
					"command": "git.commit.view.showFilesOnly",
					"title": "Show files only"
				},
				{
					"command": "git.commit.view.showFolderView",
					"title": "Show folder view"
				}
			],
			"menus": {
				"commandPalette": [
					{
						"command": "git.commit.view.hide",
						"when": "git.commit.view.show"
					},
					{
						"command": "git.commit.view.show",
						"when": "!git.commit.view.show"
					},
					{
						"command": "git.commit.compare.view.hide",
						"when": "git.commit.compare.view.show"
					},
					{
						"command": "git.commit.compare.view.show",
						"when": "!git.commit.compare.view.show"
					}
				],
				"editor/title": [
					{
						"command": "git.viewHistory",
						"group": "navigation",
						"when": "config.gitHistory.showEditorTitleMenuBarIcons"
					}
				],
				"editor/title/context": [
					{
						"command": "git.viewFileHistory",
						"group": "git",
						"when": "config.gitHistory.showEditorTitleMenuBarIcons"
					}
				],
				"scm/resourceState/context": [
					{
						"command": "git.viewFileHistory",
						"group": "1_git@1"
					}
				],
				"explorer/context": [
					{
						"command": "git.viewFileHistory",
						"group": "git"
					}
				],
				"editor/context": [
					{
						"command": "git.viewFileHistory",
						"group": "git"
					},
					{
						"command": "git.viewLineHistory",
						"group": "git"
					}
				],
				"view/item/context": [
					{
						"command": "git.viewFileHistory",
						"when": "view == commitViewProvider && viewItem == file"
					},
					{
						"command": "git.viewFileHistory",
						"when": "view == compareCommitViewProvider && viewItem == file"
					},
					{
						"command": "git.commit.FileEntry.ViewFileContents",
						"when": "view == commitViewProvider && viewItem == file"
					},
					{
						"command": "git.commit.FileEntry.CompareAgainstWorkspace",
						"when": "view == commitViewProvider && viewItem == file"
					},
					{
						"command": "git.commit.FileEntry.CompareAgainstPrevious",
						"when": "view == commitViewProvider && viewItem == file"
					},
					{
						"command": "git.commit.FileEntry.selectForComparison",
						"when": "view == commitViewProvider && viewItem == file && false"
					},
					{
						"command": "git.commit.FileEntry.compare",
						"when": "view == commitViewProvider && viewItem == file && git.commit.FileEntry.selectForComparison && false"
					}
				],
				"view/title": [
					{
						"command": "git.commit.compare.view.hide",
						"when": "view == compareCommitViewProvider",
						"group": "navigation@1"
					},
					{
						"command": "git.commit.compare.view.hide",
						"when": "view == compareCommitViewProvider",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.view.hide",
						"when": "view == commitViewProvider",
						"group": "navigation@1"
					},
					{
						"command": "git.commit.view.hide",
						"when": "view == commitViewProvider",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.cherryPick",
						"when": "view == commitViewProvider && git.commit.selected",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.createBranch",
						"when": "view == commitViewProvider && git.commit.selected",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.merge",
						"when": "view == commitViewProvider && git.commit.selected",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.rebase",
						"when": "view == commitViewProvider && git.commit.selected",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.view.showFilesOnly",
						"when": "view == commitViewProvider && git.commit.selected",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.view.showFolderView",
						"when": "view == commitViewProvider && git.commit.selected",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.compare.view.showFilesOnly",
						"when": "view == compareCommitViewProvider && git.commit.compare.compared",
						"group": "zMoreSubMenuItems"
					},
					{
						"command": "git.commit.compare.view.showFolderView",
						"when": "view == compareCommitViewProvider && git.commit.compare.compared",
						"group": "zMoreSubMenuItems"
					}
				]
			},
			"configuration": {
				"type": "object",
				"title": "Git History configuration",
				"properties": {
					"gitHistory.hideCommitViewExplorer": {
						"type": "boolean",
						"default": false,
						"scope": "window",
						"description": "Whether to diplay the commit explorer view"
					},
					"gitHistory.showEditorTitleMenuBarIcons": {
						"type": "boolean",
						"default": true,
						"scope": "window",
						"description": "Whether to display a button in the editor title menu bar"
					},
					"gitHistory.pageSize": {
						"type": "number",
						"default": 100,
						"scope": "window",
						"description": "Default number of items to be displayed in Git History Viewer"
					}
				}
			}
		},
		"scripts": {
			"vscode:prepublish": "npm run lint && webpack -p --progress --colors",
			"compile": "tsc --watch -p ./",
			"postinstall": "node ./node_modules/vscode/bin/install",
			"lint": "tslint ./src/**/*.ts -t verbose || tslint ./test/**/*.ts -t verbose",
			"buildReact": "webpack -p --progress --colors",
			"watchReact": "webpack --progress --colors --watch",
			"precommit": "node gulpfile.js",
			"lint-staged": "node gulpfile.js",
			"clean": "gulp clean",
			"cover:enable": "gulp cover:enable",
			"cover:upload": "gulp cover:upload"
		},
		"devDependencies": {
			"@types/body-parser": "0.0.34",
			"@types/chai": "^4.0.4",
			"@types/classnames": "^0.0.32",
			"@types/clipboard": "1.5.29",
			"@types/cors": "^2.8.1",
			"@types/express": "^4.0.36",
			"@types/fs-extra": "^5.0.0",
			"@types/glob": "^5.0.34",
			"@types/gravatar": "^1.4.28",
			"@types/he": "^0.5.29",
			"@types/iconv-lite": "0.0.1",
			"@types/istanbul": "^0.4.29",
			"@types/jquery": "^2.0.48",
			"@types/md5": "^2.1.32",
			"@types/mocha": "^2.2.32",
			"@types/node": "^6.0.49",
			"@types/os-locale": "^2.1.0",
			"@types/query-string": "^3.0.31",
			"@types/react": "^16.0.20",
			"@types/react-dom": "^16.0.2",
			"@types/react-redux": "^5.0.12",
			"@types/react-router": "^4.0.16",
			"@types/react-router-dom": "^4.2.0",
			"@types/react-router-redux": "^4.0.51",
			"@types/redux-actions": "^2.2.2",
			"@types/rx": "^2.5.33",
			"@types/tmp": "0.0.31",
			"@types/webpack": "^3.0.0",
			"@types/webpack-env": "^1.13.0",
			"awesome-typescript-loader": "^3.0.0-beta.18",
			"chai": "^4.1.2",
			"classnames": "^2.2.5",
			"copy-webpack-plugin": "^4.0.1",
			"css-loader": "^0.26.1",
			"debounce": "^1.1.0",
			"decache": "^4.3.0",
			"del": "^3.0.0",
			"extract-text-webpack-plugin": "^2.0.0-beta.5",
			"file-loader": "^0.10.0",
			"glob": "^7.1.2",
			"gulp": "^3.9.1",
			"gulp-codecov": "^3.0.1",
			"gulp-eslint": "^4.0.0",
			"gulp-filter": "^5.0.1",
			"gulp-gitmodified": "^1.1.1",
			"gulp-json-editor": "^2.2.1",
			"gulp-tslint": "^8.1.2",
			"gulp-typescript": "^3.2.3",
			"html-loader": "^0.4.4",
			"html-webpack-plugin": "^2.28.0",
			"husky": "^0.14.3",
			"ignore-loader": "^0.1.2",
			"immutable": "^3.8.1",
			"istanbul": "^0.4.5",
			"jquery": "^3.1.1",
			"mocha": "^2.3.3",
			"postcss": "^5.2.11",
			"postcss-browser-reporter": "^0.5.0",
			"postcss-cssnext": "^2.9.0",
			"postcss-import": "^9.1.0",
			"postcss-loader": "^1.2.2",
			"postcss-reporter": "^3.0.0",
			"postcss-url": "^5.1.2",
			"react": "^16.0.0",
			"react-bootstrap": "^0.31.5",
			"react-copy-to-clipboard": "^5.0.1",
			"react-dom": "^16.0.0",
			"react-hot-loader": "^3.1.1",
			"react-icons": "^2.2.7",
			"react-json-tree": "^0.11.0",
			"react-redux": "^5.0.6",
			"react-rnd": "^7.1.5",
			"react-router": "^4.2.0",
			"react-router-dom": "^4.2.2",
			"react-router-redux": "^4.0.8",
			"react-scroll": "^1.6.4",
			"react-toolbox": "^2.0.0-beta.12",
			"redux": "^3.7.2",
			"redux-actions": "^2.2.1",
			"redux-thunk": "2.2.0",
			"relative": "^3.0.2",
			"remap-istanbul": "^0.9.5",
			"semantic-ui-css": "^2.2.12",
			"semantic-ui-react": "^0.71.4",
			"source-map-support": "^0.5.0",
			"style-loader": "^0.13.1",
			"tslint": "^5.7.0",
			"tslint-eslint-rules": "^4.1.1",
			"tslint-microsoft-contrib": "^5.0.1",
			"typemoq": "^2.1.0",
			"typescript": "^2.6.1",
			"typescript-formatter": "^6.0.0",
			"url-loader": "^0.5.7",
			"webpack": "^2.2.1",
			"webpack-dev-server": "^2.2.0",
			"webpack-hot-middleware": "^2.16.1"
		},
		"dependencies": {
			"animate.css": "^3.5.2",
			"axios": "^0.16.2",
			"body-parser": "^1.17.2",
			"bootstrap": "^3.3.7",
			"cors": "^2.8.4",
			"ejs": "^2.5.6",
			"event-stream": "3.3.4",
			"express": "^4.15.3",
			"font-awesome": "^4.7.0",
			"fs-extra": "^4.0.2",
			"gravatar": "^1.6.0",
			"hint.css": "^2.4.1",
			"iconv-lite": "^0.4.19",
			"inversify": "^4.3.0",
			"md5": "^2.2.1",
			"normalize.css": "^5.0.0",
			"octicons": "^6.0.1",
			"os-locale": "^2.1.0",
			"query-string": "^4.3.2",
			"reflect-metadata": "^0.1.12",
			"tmp": "^0.0.31",
			"vscode": "^1.1.10",
			"vscode-extension-telemetry": "0.0.5"
		},
		"__metadata": {
			"id": "5960f38e-0bbe-4644-8f9c-9c8824e82511",
			"publisherId": "1ba8bd00-2ad1-4be0-a007-5b4b954c1ee7",
			"publisherDisplayName": "Don Jayamanne"
		}
	},
	{
		"name": "vscode-language-pack-zh-hans",
		"displayName": "Chinese (Simplified) Language Pack for Visual Studio Code",
		"description": "Language pack extension for Chinese (Simplified)",
		"version": "1.35.1",
		"publisher": "MS-CEINTL",
		"repository": {
			"type": "git",
			"url": "https://github.com/Microsoft/vscode-loc"
		},
		"license": "SEE MIT LICENSE IN LICENSE.md",
		"engines": {
			"vscode": "^1.35.0"
		},
		"icon": "languagepack.png",
		"categories": [
			"Language Packs"
		],
		"contributes": {
			"localizations": [
				{
					"languageId": "zh-cn",
					"languageName": "Chinese Simplified",
					"localizedLanguageName": "中文(简体)",
					"translations": [
						{
							"id": "vscode",
							"path": "./translations/main.i18n.json"
						},
						{
							"id": "vscode.bat",
							"path": "./translations/extensions/bat.i18n.json"
						},
						{
							"id": "vscode.clojure",
							"path": "./translations/extensions/clojure.i18n.json"
						},
						{
							"id": "vscode.coffeescript",
							"path": "./translations/extensions/coffeescript.i18n.json"
						},
						{
							"id": "vscode.configuration-editing",
							"path": "./translations/extensions/configuration-editing.i18n.json"
						},
						{
							"id": "vscode.cpp",
							"path": "./translations/extensions/cpp.i18n.json"
						},
						{
							"id": "vscode.csharp",
							"path": "./translations/extensions/csharp.i18n.json"
						},
						{
							"id": "vscode.css-language-features",
							"path": "./translations/extensions/css-language-features.i18n.json"
						},
						{
							"id": "vscode.css",
							"path": "./translations/extensions/css.i18n.json"
						},
						{
							"id": "vscode.debug-auto-launch",
							"path": "./translations/extensions/debug-auto-launch.i18n.json"
						},
						{
							"id": "vscode.debug-server-ready",
							"path": "./translations/extensions/debug-server-ready.i18n.json"
						},
						{
							"id": "vscode.docker",
							"path": "./translations/extensions/docker.i18n.json"
						},
						{
							"id": "vscode.emmet",
							"path": "./translations/extensions/emmet.i18n.json"
						},
						{
							"id": "vscode.extension-editing",
							"path": "./translations/extensions/extension-editing.i18n.json"
						},
						{
							"id": "vscode.fsharp",
							"path": "./translations/extensions/fsharp.i18n.json"
						},
						{
							"id": "vscode.git",
							"path": "./translations/extensions/git.i18n.json"
						},
						{
							"id": "vscode.go",
							"path": "./translations/extensions/go.i18n.json"
						},
						{
							"id": "vscode.groovy",
							"path": "./translations/extensions/groovy.i18n.json"
						},
						{
							"id": "vscode.grunt",
							"path": "./translations/extensions/grunt.i18n.json"
						},
						{
							"id": "vscode.gulp",
							"path": "./translations/extensions/gulp.i18n.json"
						},
						{
							"id": "vscode.handlebars",
							"path": "./translations/extensions/handlebars.i18n.json"
						},
						{
							"id": "vscode.hlsl",
							"path": "./translations/extensions/hlsl.i18n.json"
						},
						{
							"id": "vscode.html-language-features",
							"path": "./translations/extensions/html-language-features.i18n.json"
						},
						{
							"id": "vscode.html",
							"path": "./translations/extensions/html.i18n.json"
						},
						{
							"id": "vscode.ini",
							"path": "./translations/extensions/ini.i18n.json"
						},
						{
							"id": "vscode.jake",
							"path": "./translations/extensions/jake.i18n.json"
						},
						{
							"id": "vscode.java",
							"path": "./translations/extensions/java.i18n.json"
						},
						{
							"id": "vscode.javascript",
							"path": "./translations/extensions/javascript.i18n.json"
						},
						{
							"id": "vscode.json-language-features",
							"path": "./translations/extensions/json-language-features.i18n.json"
						},
						{
							"id": "vscode.json",
							"path": "./translations/extensions/json.i18n.json"
						},
						{
							"id": "vscode.less",
							"path": "./translations/extensions/less.i18n.json"
						},
						{
							"id": "vscode.log",
							"path": "./translations/extensions/log.i18n.json"
						},
						{
							"id": "vscode.lua",
							"path": "./translations/extensions/lua.i18n.json"
						},
						{
							"id": "vscode.make",
							"path": "./translations/extensions/make.i18n.json"
						},
						{
							"id": "vscode.markdown-basics",
							"path": "./translations/extensions/markdown-basics.i18n.json"
						},
						{
							"id": "vscode.markdown-language-features",
							"path": "./translations/extensions/markdown-language-features.i18n.json"
						},
						{
							"id": "vscode.merge-conflict",
							"path": "./translations/extensions/merge-conflict.i18n.json"
						},
						{
							"id": "vscode.npm",
							"path": "./translations/extensions/npm.i18n.json"
						},
						{
							"id": "vscode.objective-c",
							"path": "./translations/extensions/objective-c.i18n.json"
						},
						{
							"id": "vscode.perl",
							"path": "./translations/extensions/perl.i18n.json"
						},
						{
							"id": "vscode.php-language-features",
							"path": "./translations/extensions/php-language-features.i18n.json"
						},
						{
							"id": "vscode.php",
							"path": "./translations/extensions/php.i18n.json"
						},
						{
							"id": "vscode.powershell",
							"path": "./translations/extensions/powershell.i18n.json"
						},
						{
							"id": "vscode.pug",
							"path": "./translations/extensions/pug.i18n.json"
						},
						{
							"id": "vscode.python",
							"path": "./translations/extensions/python.i18n.json"
						},
						{
							"id": "vscode.r",
							"path": "./translations/extensions/r.i18n.json"
						},
						{
							"id": "vscode.razor",
							"path": "./translations/extensions/razor.i18n.json"
						},
						{
							"id": "vscode.ruby",
							"path": "./translations/extensions/ruby.i18n.json"
						},
						{
							"id": "vscode.rust",
							"path": "./translations/extensions/rust.i18n.json"
						},
						{
							"id": "vscode.scss",
							"path": "./translations/extensions/scss.i18n.json"
						},
						{
							"id": "vscode.shaderlab",
							"path": "./translations/extensions/shaderlab.i18n.json"
						},
						{
							"id": "vscode.shellscript",
							"path": "./translations/extensions/shellscript.i18n.json"
						},
						{
							"id": "vscode.sql",
							"path": "./translations/extensions/sql.i18n.json"
						},
						{
							"id": "vscode.swift",
							"path": "./translations/extensions/swift.i18n.json"
						},
						{
							"id": "vscode.theme-abyss",
							"path": "./translations/extensions/theme-abyss.i18n.json"
						},
						{
							"id": "vscode.theme-defaults",
							"path": "./translations/extensions/theme-defaults.i18n.json"
						},
						{
							"id": "vscode.theme-kimbie-dark",
							"path": "./translations/extensions/theme-kimbie-dark.i18n.json"
						},
						{
							"id": "vscode.theme-monokai-dimmed",
							"path": "./translations/extensions/theme-monokai-dimmed.i18n.json"
						},
						{
							"id": "vscode.theme-monokai",
							"path": "./translations/extensions/theme-monokai.i18n.json"
						},
						{
							"id": "vscode.theme-quietlight",
							"path": "./translations/extensions/theme-quietlight.i18n.json"
						},
						{
							"id": "vscode.theme-red",
							"path": "./translations/extensions/theme-red.i18n.json"
						},
						{
							"id": "vscode.theme-seti",
							"path": "./translations/extensions/theme-seti.i18n.json"
						},
						{
							"id": "vscode.theme-solarized-dark",
							"path": "./translations/extensions/theme-solarized-dark.i18n.json"
						},
						{
							"id": "vscode.theme-solarized-light",
							"path": "./translations/extensions/theme-solarized-light.i18n.json"
						},
						{
							"id": "vscode.theme-tomorrow-night-blue",
							"path": "./translations/extensions/theme-tomorrow-night-blue.i18n.json"
						},
						{
							"id": "vscode.typescript-basics",
							"path": "./translations/extensions/typescript-basics.i18n.json"
						},
						{
							"id": "vscode.typescript-language-features",
							"path": "./translations/extensions/typescript-language-features.i18n.json"
						},
						{
							"id": "vscode.vb",
							"path": "./translations/extensions/vb.i18n.json"
						},
						{
							"id": "vscode.vscode-chrome-debug-core",
							"path": "./translations/extensions/vscode-chrome-debug-core.i18n.json"
						},
						{
							"id": "ms-vscode.node-debug",
							"path": "./translations/extensions/vscode-node-debug.i18n.json"
						},
						{
							"id": "ms-vscode.node-debug2",
							"path": "./translations/extensions/vscode-node-debug2.i18n.json"
						},
						{
							"id": "vscode.xml",
							"path": "./translations/extensions/xml.i18n.json"
						},
						{
							"id": "vscode.yaml",
							"path": "./translations/extensions/yaml.i18n.json"
						}
					]
				}
			]
		},
		"scripts": {
			"update": "cd ../vscode && npm run update-localization-extension zh-hans"
		},
		"__metadata": {
			"id": "e4ee7751-6514-4731-9cdb-7580ffa9e70b",
			"publisherId": "0b0882c3-aee3-4d7c-b5f9-872f9be0a115",
			"publisherDisplayName": "Microsoft"
		}
	},
	{
		"name": "code-spell-checker",
		"description": "Spelling checker for source code",
		"displayName": "Code Spell Checker",
		"icon": "images/SpellCheck.png",
		"author": "Jason Dent",
		"license": "MIT",
		"version": "1.7.17",
		"publisher": "streetsidesoftware",
		"repository": {
			"type": "git",
			"url": "https://github.com/streetsidesoftware/vscode-spell-checker"
		},
		"bugs": {
			"url": "https://github.com/streetsidesoftware/vscode-spell-checker/issues"
		},
		"homepage": "https://github.com/streetsidesoftware/vscode-spell-checker/blob/master/packages/client/README.md",
		"engines": {
			"vscode": "^1.33.1"
		},
		"enableProposedApi": false,
		"categories": [
			"Linters",
			"Other"
		],
		"keywords": [
			"spell",
			"checker",
			"spellchecker",
			"multi-root ready"
		],
		"qna": "marketplace",
		"activationEvents": [
			"*"
		],
		"main": "./dist/extension",
		"contributes": {
			"menus": {
				"editor/context": [
					{
						"command": "cSpell.addWordToUserDictionary",
						"when": "editorTextFocus && config.cSpell.showCommandsInEditorContextMenu",
						"group": "A_cspell"
					},
					{
						"command": "cSpell.addWordToWorkspaceDictionary",
						"when": "editorTextFocus && config.cSpell.showCommandsInEditorContextMenu && workspaceFolderCount != 0 && workspaceFolderCount != 1",
						"group": "A_cspell"
					},
					{
						"command": "cSpell.addWordToDictionary",
						"when": "editorTextFocus && config.cSpell.showCommandsInEditorContextMenu && workspaceFolderCount != 0",
						"group": "A_cspell"
					},
					{
						"command": "cSpell.addIgnoreWord",
						"when": "editorTextFocus && config.cSpell.showCommandsInEditorContextMenu",
						"group": "A_cspell"
					}
				]
			},
			"commands": [
				{
					"command": "cSpell.addWordToWorkspaceDictionary",
					"title": "Add Word to Workspace Dictionary"
				},
				{
					"command": "cSpell.addWordToDictionary",
					"title": "Add Word to Folder Dictionary"
				},
				{
					"command": "cSpell.addWordToUserDictionary",
					"title": "Add Word to User Dictionary"
				},
				{
					"command": "cSpell.enableForWorkspace",
					"title": "Enable Spell Checking For Workspace"
				},
				{
					"command": "cSpell.disableForWorkspace",
					"title": "Disable Spell Checking For Workspace"
				},
				{
					"command": "cSpell.enableCurrentLanguage",
					"title": "Enable Spell Checking Document Language"
				},
				{
					"command": "cSpell.disableCurrentLanguage",
					"title": "Disable Spell Checking Document Language"
				},
				{
					"command": "cSpell.displayCSpellInfo",
					"title": "Show Spell Checker Configuration Info"
				},
				{
					"command": "cSpell.toggleEnableSpellChecker",
					"title": "Toggle Spell Checking For the Current Workspace"
				},
				{
					"command": "cSpell.removeWordFromFolderDictionary",
					"title": "Remove Words from the Folder Dictionary"
				},
				{
					"command": "cSpell.removeWordFromWorkspaceDictionary",
					"title": "Remove Words from the Workspace Dictionary"
				},
				{
					"command": "cSpell.removeWordFromUserDictionary",
					"title": "Remove Words from the Global Dictionary"
				},
				{
					"command": "cSpell.logPerfTimeline",
					"title": "Log cSpell performance times to console"
				},
				{
					"command": "cSpell.addIgnoreWord",
					"title": "Ignore Word"
				},
				{
					"command": "cSpell.addIgnoreWordToFolder",
					"title": "Ignore Word in Folder Settings"
				},
				{
					"command": "cSpell.addIgnoreWordToWorkspace",
					"title": "Ignore Word in Workspace Settings"
				},
				{
					"command": "cSpell.addIgnoreWordToUser",
					"title": "Ignore Word in User Settings"
				}
			],
			"languages": [
				{
					"id": "jsonc",
					"extensions": [
						"cspell-ext.json",
						"cspell-default.json",
						"cspell.json",
						"cSpell.json"
					]
				}
			],
			"configuration": {
				"type": "object",
				"title": "Code Spell Checker Configuration",
				"properties": {
					"cSpell.language": {
						"type": "string",
						"scope": "resource",
						"default": "en",
						"description": "The Language local to use when spell checking. \"en\" and \"en-GB\" are currently supported."
					},
					"cSpell.maxNumberOfProblems": {
						"type": "number",
						"scope": "resource",
						"default": 100,
						"description": "Controls the maximum number of spelling errors per document."
					},
					"cSpell.checkLimit": {
						"type": "number",
						"scope": "resource",
						"default": 500,
						"description": "The limit in K-Bytes to be checked in a file."
					},
					"cSpell.numSuggestions": {
						"type": "number",
						"scope": "resource",
						"default": 8,
						"description": "Controls the number of suggestions shown."
					},
					"cSpell.minWordLength": {
						"type": "number",
						"scope": "resource",
						"default": 4,
						"description": "The minimum length of a word before checking it against a dictionary."
					},
					"cSpell.maxDuplicateProblems": {
						"type": "number",
						"scope": "resource",
						"default": 5,
						"description": "The maximum number of times the same word can be flagged as an error in a file."
					},
					"cSpell.enabledLanguageIds": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [
							"asciidoc",
							"c",
							"cpp",
							"csharp",
							"css",
							"git-commit",
							"go",
							"handlebars",
							"html",
							"jade",
							"java",
							"javascript",
							"javascriptreact",
							"json",
							"jsonc",
							"latex",
							"less",
							"markdown",
							"php",
							"plaintext",
							"python",
							"pug",
							"restructuredtext",
							"rust",
							"scala",
							"scss",
							"text",
							"typescript",
							"typescriptreact",
							"yaml",
							"yml"
						],
						"description": "Specify file types to spell check."
					},
					"cSpell.import": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "List of paths of cspell.json files to import."
					},
					"cSpell.words": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "Words to add to dictionary for a workspace."
					},
					"cSpell.userWords": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "User words to add to dictionary.  Should only be in the user settings."
					},
					"cSpell.ignoreWords": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "A list of words to be ignored by the spell checker."
					},
					"cSpell.enabled": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"description": "Enable / Disable the spell checker."
					},
					"cSpell.diagnosticLevel": {
						"type": "string",
						"scope": "resource",
						"enum": [
							"Error",
							"Warning",
							"Information",
							"Hint"
						],
						"default": "Information",
						"description": "Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of squiggle."
					},
					"cSpell.showStatus": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"description": "Display the spell checker status on the status bar."
					},
					"cSpell.spellCheckDelayMs": {
						"type": "number",
						"default": 50,
						"description": "Delay in ms after a document has changed before checking it for spelling errors."
					},
					"cSpell.ignorePaths": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [
							"**/package-lock.json",
							"**/node_modules/**",
							"**/vscode-extension/**",
							"**/.git/objects/**",
							".vscode"
						],
						"description": "Specify paths/files to ignore. (Supports Globs)"
					},
					"cSpell.flagWords": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "Words to always be flagged as an error."
					},
					"cSpell.patterns": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "object",
							"items": [
								{
									"id": "name",
									"type": "string",
									"description": "The pattern identifier."
								},
								{
									"id": "pattern",
									"type": "string",
									"description": "Regular expression, default flags are: 'gim'"
								}
							],
							"description": "Define a pattern"
						},
						"default": [],
						"description": "Defines a list of named regular expression patterns that can be used in exclusion or inclusion lists."
					},
					"cSpell.ignoreRegExpList": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "List of regular expressions used to exclude the matching text from being checked.\n Example: \"0x[a-f0-9]+\" to skip 0x hex values.\n By default the flags are 'gim'.\n You can specify them like this:\n \"/0x[A-F0-9]/g\" to match only upper case hex numbers.\n Example to match email: \"<?[\\\\w.\\\\-+]+@\\\\w+(\\\\.\\\\w+)+>?\" "
					},
					"cSpell.includeRegExpList": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "List of regular expressions used to include text to be spell checked.\nBy default, all text is checked.  Adding regular expresses to this list will limit the text to be spell checked to only text that matches any of the expressions in the list.\nLogic: text to be checked = include - exclude\nNote: Slashes need to be double: \\\\ because it is in a json string. \nExamples:\n* \".*\" -- include everything.\n* \"'(?:[^'\\\\n]|\\\\\\\\')*'\" -- single quote strings. \n"
					},
					"cSpell.allowCompoundWords": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"description": "Enable / Disable allowing word compounds. true means 'arraylength' would be ok, false means it would not pass."
					},
					"cSpell.languageSettings": {
						"type": "array",
						"scope": "resource",
						"description": "Define settings on a per programming language basis.",
						"items": {
							"type": "object",
							"items": [
								{
									"id": "languageId",
									"type": "string",
									"description": "Language Id to apply settings, examples \"*\", \"php\", \"cpp\" "
								},
								{
									"id": "local",
									"type": "string",
									"description": "Optional: Spoken language local used to select dictionary, example: \"en\", \"en-US\" or \"en-GB\" "
								},
								{
									"id": "allowCompoundWords",
									"type": "boolean",
									"description": "Enable / Disable word compounds for a given programming language."
								},
								{
									"id": "dictionaries",
									"type": "array",
									"description": "Add dictionaries to be used in spell checking",
									"items": {
										"type": "string",
										"description": "name of dictionary to use"
									}
								}
							]
						}
					},
					"cSpell.dictionaries": {
						"type": "array",
						"scope": "resource",
						"description": "List of dictionaries to use when checking files.",
						"items": {
							"type": "string",
							"description": "Name of dictionary to use."
						}
					},
					"cSpell.dictionaryDefinitions": {
						"type": "array",
						"scope": "resource",
						"description": "A List of Dictionary Definitions.",
						"items": {
							"type": "object",
							"items": [
								{
									"id": "name",
									"type": "string",
									"description": "Name of dictionary"
								},
								{
									"id": "path",
									"type": "string",
									"description": "Path to the dictionary file. Relative paths will be relative to the workspace."
								}
							],
							"required": [
								"name",
								"path"
							]
						}
					},
					"cSpell.showCommandsInEditorContextMenu": {
						"type": "boolean",
						"scope": "application",
						"description": "Show Spell Checker actions in Editor Context Menu",
						"default": true
					},
					"cSpell.fixSpellingWithRenameProvider": {
						"type": "boolean",
						"scope": "application",
						"description": "Experimental: Use Rename when fixing spelling issues.",
						"default": false
					},
					"cSpell.logLevel": {
						"type": "string",
						"scope": "window",
						"description": "Set the Debug Level for logging messages.",
						"enum": [
							"None",
							"Error",
							"Warning",
							"Information",
							"Debug"
						],
						"default": "Error"
					},
					"cSpell.allowedSchemas": {
						"type": "array",
						"scope": "window",
						"description": "Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).",
						"items": {
							"type": "string"
						},
						"default": [
							"file",
							"untitled"
						]
					}
				}
			}
		},
		"scripts": {
			"clean": "rimraf out",
			"clean-build": "npm run clean && npm run build",
			"build": "webpack --mode none",
			"build-production": "webpack --mode production",
			"build-integration-test": "npm run build && cd ../_integrationTests && npm install && npm run build",
			"vscode:prepublish": "npm run clean && npm run build-production",
			"watch": "npm run build -- watch",
			"test": "jest",
			"test-integration": "cross-env CODE_DISABLE_EXTENSIONS=true CODE_TESTS_PATH=./../_integrationTests/out CODE_TESTS_DATA_DIR=./temp/vscode node ../_integrationTests/integrationTestRunner",
			"test-watch": "jest --watch",
			"postinstall": "vscode-install"
		},
		"devDependencies": {
			"@types/comment-json": "^1.1.1",
			"@types/fs-extra": "^5.1.0",
			"@types/jest": "^24.0.13",
			"@types/kefir": "^3.8.2",
			"@types/node": "^11.13.13",
			"@types/source-map-support": "^0.4.2",
			"cross-env": "^5.2.0",
			"jest": "^24.8.0",
			"lorem-ipsum": "^1.0.6",
			"rimraf": "^2.6.3",
			"source-map-support": "^0.5.12",
			"ts-jest": "^24.0.2",
			"ts-loader": "^6.0.2",
			"typescript": "^3.5.1",
			"vscode": "^1.1.34",
			"webpack": "^4.32.2",
			"webpack-cli": "^3.3.2"
		},
		"dependencies": {
			"comment-json": "^1.1.3",
			"fs-extra": "^7.0.1",
			"kefir": "^3.8.6",
			"node-watch": "^0.6.2",
			"vscode-languageclient": "^5.2.1"
		},
		"__metadata": {
			"id": "f6dbd813-b0a0-42c1-90ea-10dde9d925a7",
			"publisherId": "67600ca7-88fb-4104-9f7e-dd51c00facf2",
			"publisherDisplayName": "Street Side Software"
		}
	},
	{
		"name": "material-icon-theme",
		"displayName": "Material Icon Theme",
		"description": "Material Design Icons for Visual Studio Code",
		"version": "3.8.0",
		"publisher": "PKief",
		"engines": {
			"vscode": "^1.5.0"
		},
		"homepage": "https://github.com/PKief/vscode-material-icon-theme/blob/master/README.md",
		"repository": {
			"type": "git",
			"url": "https://github.com/PKief/vscode-material-icon-theme.git"
		},
		"bugs": {
			"url": "https://github.com/PKief/vscode-material-icon-theme/issues"
		},
		"icon": "logo.png",
		"galleryBanner": {
			"color": "#263238",
			"theme": "dark"
		},
		"categories": [
			"Themes"
		],
		"keywords": [
			"icons",
			"theme",
			"material",
			"icon-theme",
			"customization"
		],
		"extensionKind": "ui",
		"activationEvents": [
			"*"
		],
		"main": "./dist/extension",
		"contributes": {
			"iconThemes": [
				{
					"id": "material-icon-theme",
					"label": "Material Icon Theme",
					"path": "./dist/material-icons.json",
					"_watch": true
				}
			],
			"commands": [
				{
					"command": "material-icon-theme.activateIcons",
					"title": "%command.activateIcons%"
				},
				{
					"command": "material-icon-theme.toggleIconPacks",
					"title": "%command.toggleIconPacks%"
				},
				{
					"command": "material-icon-theme.changeFolderTheme",
					"title": "%command.changeFolderTheme%"
				},
				{
					"command": "material-icon-theme.changeFolderColor",
					"title": "%command.changeFolderColor%"
				},
				{
					"command": "material-icon-theme.restoreDefaultConfig",
					"title": "%command.restoreDefaultConfig%"
				},
				{
					"command": "material-icon-theme.toggleExplorerArrows",
					"title": "%command.toggleExplorerArrows%"
				},
				{
					"command": "material-icon-theme.changeOpacity",
					"title": "%command.changeOpacity%"
				},
				{
					"command": "material-icon-theme.toggleGrayscale",
					"title": "%command.toggleGrayscale%"
				},
				{
					"command": "material-icon-theme.changeSaturation",
					"title": "%command.changeSaturation%"
				}
			],
			"configuration": {
				"type": "object",
				"title": "%configuration.title%",
				"properties": {
					"material-icon-theme.showWelcomeMessage": {
						"type": "boolean",
						"default": true,
						"description": "%configuration.showWelcomeMessage%"
					},
					"material-icon-theme.showUpdateMessage": {
						"type": "boolean",
						"default": false,
						"description": "%configuration.showUpdateMessage%"
					},
					"material-icon-theme.showReloadMessage": {
						"type": "boolean",
						"default": true,
						"description": "%configuration.showReloadMessage%"
					},
					"material-icon-theme.activeIconPack": {
						"type": "string",
						"default": "angular",
						"description": "%configuration.activeIconPack%",
						"enumDescriptions": [
							"%configuration.activeIconPack.angular%",
							"%configuration.activeIconPack.angular_ngrx%",
							"%configuration.activeIconPack.react%",
							"%configuration.activeIconPack.react_redux%",
							"%configuration.activeIconPack.vue%",
							"%configuration.activeIconPack.vue_vuex%",
							"%configuration.activeIconPack.none%"
						],
						"enum": [
							"angular",
							"angular_ngrx",
							"react",
							"react_redux",
							"vue",
							"vue_vuex",
							"none"
						]
					},
					"material-icon-theme.files.associations": {
						"type": "object",
						"default": {},
						"description": "%configuration.files.associations%"
					},
					"material-icon-theme.folders.associations": {
						"type": "object",
						"default": {},
						"description": "%configuration.folders.associations%"
					},
					"material-icon-theme.languages.associations": {
						"type": "object",
						"default": {},
						"description": "%configuration.languages.associations%"
					},
					"material-icon-theme.folders.theme": {
						"type": "string",
						"default": "specific",
						"description": "%configuration.folders.theme%",
						"enumDescriptions": [
							"%configuration.folders.theme.specific%",
							"%configuration.folders.theme.classic%",
							"%configuration.folders.theme.none%"
						],
						"enum": [
							"specific",
							"classic",
							"none"
						]
					},
					"material-icon-theme.folders.color": {
						"type": "string",
						"default": "#90a4ae",
						"pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
						"description": "%configuration.folders.color%"
					},
					"material-icon-theme.opacity": {
						"type": "number",
						"default": 1,
						"minimum": 0,
						"maximum": 1,
						"description": "%configuration.opacity%"
					},
					"material-icon-theme.hidesExplorerArrows": {
						"type": "boolean",
						"default": false,
						"description": "%configuration.hidesExplorerArrows%"
					},
					"material-icon-theme.saturation": {
						"type": "number",
						"default": 1,
						"minimum": 0,
						"maximum": 1,
						"description": "%configuration.saturation%"
					}
				}
			}
		},
		"scripts": {
			"build": "npm run compile:dev && npm run postcompile",
			"check": "ts-node ./src/scripts/icons/checks",
			"compile": "webpack --mode production",
			"compile:dev": "webpack --mode none",
			"compile:watch": "webpack --mode none --watch",
			"generateJson": "ts-node ./src/scripts/icons/generateJson.ts",
			"lint": "tslint -c tslint.json ./src/**/*.ts",
			"postcompile": "npm run generateJson && npm run check",
			"postinstall": "node ./node_modules/vscode/bin/install",
			"pretest": "npm run build && npm run test-compile",
			"preview": "ts-node ./src/scripts/preview",
			"test": "node ./node_modules/vscode/bin/test",
			"test-compile": "tsc -p ./",
			"vscode:prepublish": "npm run lint && npm run compile"
		},
		"dependencies": {
			"lodash.merge": "4.6.1",
			"open": "6.3.0",
			"semver": "6.1.0"
		},
		"devDependencies": {
			"@types/mocha": "^5.2.6",
			"@types/node": "^12.0.2",
			"@types/puppeteer": "^1.12.4",
			"clean-webpack-plugin": "^2.0.2",
			"mocha": "^6.1.4",
			"puppeteer": "^1.17.0",
			"rimraf": "^2.6.3",
			"ts-loader": "^6.0.1",
			"ts-node": "^8.1.0",
			"tslint": "^5.16.0",
			"typescript": "^3.4.5",
			"vscode": "^1.1.34",
			"webpack": "^4.32.2",
			"webpack-cli": "^3.3.2"
		},
		"__metadata": {
			"id": "5db78037-f674-459f-a236-db622c427c5b",
			"publisherId": "f9e5bc2f-fea1-4075-917f-d83e01e69f56",
			"publisherDisplayName": "Philipp Kief"
		}
	},
	{
		"name": "debug",
		"displayName": "Native Debug",
		"description": "GDB, LLDB & Mago-MI Debugger support for VSCode",
		"keywords": [
			"gdb",
			"lldb",
			"mago-mi",
			"native",
			"debug"
		],
		"version": "0.23.1",
		"publisher": "webfreak",
		"icon": "images/icon.png",
		"engines": {
			"vscode": "^1.28.0"
		},
		"main": "./out/src/frontend/extension",
		"activationEvents": [
			"onCommand:code-debug.examineMemoryLocation",
			"onCommand:code-debug.getFileNameNoExt",
			"onCommand:code-debug.getFileBasenameNoExt"
		],
		"categories": [
			"Debuggers"
		],
		"repository": {
			"type": "git",
			"url": "https://github.com/WebFreak001/code-debug.git"
		},
		"contributes": {
			"commands": [
				{
					"command": "code-debug.examineMemoryLocation",
					"title": "Code-Debug: Examine memory location"
				}
			],
			"debuggers": [
				{
					"type": "gdb",
					"extensions": [],
					"program": "./out/src/gdb.js",
					"runtime": "node",
					"label": "GDB",
					"enableBreakpointsFor": {
						"languageIds": [
							"c",
							"cpp",
							"d",
							"objective-c",
							"fortran",
							"fortran-modern",
							"fortran90",
							"fortran_free-form",
							"fortran_fixed-form",
							"rust",
							"pascal",
							"objectpascal",
							"ada",
							"nim",
							"arm",
							"asm",
							"vala",
							"crystal",
							"kotlin"
						]
					},
					"variables": {
						"FileBasenameNoExt": "code-debug.getFileBasenameNoExt",
						"FileNameNoExt": "code-debug.getFileNameNoExt"
					},
					"configurationAttributes": {
						"launch": {
							"required": [
								"target"
							],
							"properties": {
								"target": {
									"type": "string",
									"description": "Path of executable"
								},
								"arguments": {
									"type": "string",
									"description": "Arguments to append after the executable. You can also use pipes."
								},
								"terminal": {
									"type": "string",
									"description": "Leave this field undefined to keep program output in the vscode console at the bottom. If this is set to empty string the program will spawn in a new console using x-terminal-emulator on linux, otherwise with the specified terminal. On windows setting this to an empty string spawns the program in a console, but no other console is supported."
								},
								"cwd": {
									"type": "string",
									"description": "Path of project"
								},
								"gdbpath": {
									"type": "string",
									"description": "Path to the gdb executable or the command if in PATH",
									"default": "gdb"
								},
								"env": {
									"type": "object",
									"description": "Environment overriding the gdb (and in turn also the process) environment",
									"default": null
								},
								"debugger_args": {
									"type": "array",
									"description": "Additional arguments to pass to GDB",
									"default": []
								},
								"valuesFormatting": {
									"type": "string",
									"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
									"default": "parseText",
									"enum": [
										"disabled",
										"parseText",
										"prettyPrinters"
									]
								},
								"printCalls": {
									"type": "boolean",
									"description": "Prints all GDB calls to the console",
									"default": false
								},
								"showDevDebugOutput": {
									"type": "boolean",
									"description": "Prints all GDB responses to the console",
									"default": false
								},
								"autorun": {
									"type": "array",
									"description": "GDB commands to run when starting to debug",
									"default": []
								},
								"ssh": {
									"required": [
										"host",
										"cwd",
										"user"
									],
									"type": "object",
									"description": "If this is set then the extension will connect to an ssh host and run GDB there",
									"properties": {
										"host": {
											"type": "string",
											"description": "Remote host name/ip to connect to"
										},
										"cwd": {
											"type": "string",
											"description": "Path of project on the remote"
										},
										"port": {
											"type": "number",
											"description": "Remote port number",
											"default": 22
										},
										"user": {
											"type": "string",
											"description": "Username to connect as"
										},
										"password": {
											"type": "string",
											"description": "Plain text password (unsafe; if possible use keyfile instead)"
										},
										"keyfile": {
											"type": "string",
											"description": "Absolute path to private key"
										},
										"useAgent": {
											"type": "boolean",
											"description": "Auto-detect the running SSH agent (via SSH_AUTH_SOCK environment variable) and use it to perform authentication",
											"default": false
										},
										"forwardX11": {
											"type": "boolean",
											"description": "If true, the server will redirect x11 to the local host",
											"default": true
										},
										"x11port": {
											"type": "number",
											"description": "Port to redirect X11 data to (by default port = display + 6000)",
											"default": 6000
										},
										"x11host": {
											"type": "string",
											"description": "Hostname/ip to redirect X11 data to",
											"default": "localhost"
										},
										"remotex11screen": {
											"type": "number",
											"description": "Screen to start the application on the remote side",
											"default": 0
										},
										"bootstrap": {
											"type": "string",
											"description": "Content will be executed on the SSH host before the debugger call."
										}
									}
								}
							}
						},
						"attach": {
							"required": [
								"target"
							],
							"properties": {
								"target": {
									"type": "string",
									"description": "PID of running program or program name or connection arguments (eg :2345) if remote is true"
								},
								"remote": {
									"type": "boolean",
									"description": "If true this will connect to a gdbserver instead of attaching to a PID",
									"default": false
								},
								"valuesFormatting": {
									"type": "string",
									"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
									"default": "parseText",
									"enum": [
										"disabled",
										"parseText",
										"prettyPrinters"
									]
								},
								"printCalls": {
									"type": "boolean",
									"description": "Prints all GDB calls to the console",
									"default": false
								},
								"showDevDebugOutput": {
									"type": "boolean",
									"description": "Prints all GDB responses to the console",
									"default": false
								},
								"executable": {
									"type": "string",
									"description": "Path of executable for debugging symbols"
								},
								"gdbpath": {
									"type": "string",
									"description": "Path to the gdb executable or the command if in PATH",
									"default": "gdb"
								},
								"env": {
									"type": "object",
									"description": "Environment overriding the gdb (and in turn also the process) environment",
									"default": null
								},
								"debugger_args": {
									"type": "array",
									"description": "Additional arguments to pass to GDB",
									"default": []
								},
								"cwd": {
									"type": "string",
									"description": "Path of project",
									"default": "${workspaceRoot}"
								},
								"autorun": {
									"type": "array",
									"description": "GDB commands to run when starting to debug",
									"default": []
								},
								"ssh": {
									"required": [
										"host",
										"cwd",
										"user"
									],
									"type": "object",
									"description": "If this is set then the extension will connect to an ssh host and run GDB there",
									"properties": {
										"host": {
											"type": "string",
											"description": "Remote host name/ip to connect to"
										},
										"cwd": {
											"type": "string",
											"description": "Path of project on the remote"
										},
										"port": {
											"type": "number",
											"description": "Remote port number",
											"default": 22
										},
										"user": {
											"type": "string",
											"description": "Username to connect as"
										},
										"password": {
											"type": "string",
											"description": "Plain text password (unsafe; if possible use keyfile instead)"
										},
										"keyfile": {
											"type": "string",
											"description": "Absolute path to private key"
										},
										"useAgent": {
											"type": "boolean",
											"description": "Auto-detect the running SSH agent (via SSH_AUTH_SOCK environment variable) and use it to perform authentication",
											"default": false
										},
										"forwardX11": {
											"type": "boolean",
											"description": "If true, the server will redirect x11 to the local host",
											"default": true
										},
										"x11port": {
											"type": "number",
											"description": "Port to redirect X11 data to (by default port = display + 6000)",
											"default": 6000
										},
										"x11host": {
											"type": "string",
											"description": "Hostname/ip to redirect X11 data to",
											"default": "localhost"
										},
										"remotex11screen": {
											"type": "number",
											"description": "Screen to start the application on the remote side",
											"default": 0
										},
										"bootstrap": {
											"type": "string",
											"description": "Content will be executed on the SSH host before the debugger call."
										}
									}
								}
							}
						}
					},
					"initialConfigurations": [
						{
							"name": "Debug",
							"type": "gdb",
							"request": "launch",
							"target": "./bin/executable",
							"cwd": "${workspaceRoot}",
							"valuesFormatting": "parseText"
						}
					],
					"configurationSnippets": [
						{
							"label": "GDB: Launch Program",
							"description": "Starts the program using gdb",
							"body": {
								"type": "gdb",
								"request": "launch",
								"name": "${2:Launch Program}",
								"target": "${1:./bin/executable}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "GDB: Attach to PID",
							"description": "Attaches to a running program pid using gdb",
							"body": {
								"type": "gdb",
								"request": "attach",
								"name": "${2:Attach to PID}",
								"target": "${1:[PID]}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "GDB: Connect to gdbserver",
							"description": "Connects to a gdbserver for debugging",
							"body": {
								"type": "gdb",
								"request": "attach",
								"name": "${3:Attach to gdbserver}",
								"executable": "${1:./bin/executable}",
								"target": ":${2:2345}",
								"remote": true,
								"cwd": "^\"\\${workspaceRoot}\"",
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "GDB: Launch over SSH",
							"description": "Remotely starts the program using gdb",
							"body": {
								"type": "gdb",
								"request": "launch",
								"name": "${6:Launch Program (SSH)}",
								"target": "${1:./bin/executable}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"ssh": {
									"host": "${2:127.0.0.1}",
									"cwd": "${3:/home/remote_user/project/}",
									"keyfile": "${4:/home/my_user/.ssh/id_rsa}",
									"user": "${5:remote_user}"
								},
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "GDB: Launch GUI over SSH with X11 forwarding",
							"description": "Remotely starts the program using gdb with X11 forwarding",
							"body": {
								"type": "gdb",
								"request": "launch",
								"name": "${6:Launch Program (SSH + X11)}",
								"target": "${1:./bin/executable}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"ssh": {
									"host": "${2:127.0.0.1}",
									"cwd": "${3:/home/remote_user/project/}",
									"keyfile": "${4:/home/my_user/.ssh/id_rsa}",
									"user": "${5:remote_user}",
									"forwardX11": true,
									"x11host": "localhost",
									"x11port": 6000
								},
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "GDB: Debug external embedded device",
							"description": "Debugs an embedded microcontroller supported by GDB by attaching over extended-remote",
							"body": {
								"type": "gdb",
								"request": "launch",
								"name": "${6:Debug Microcontroller}",
								"target": "extended-remote ${2:/dev/cu.usbmodem00000000}",
								"executable": "${1:./bin/executable.elf}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"autorun": [
									"monitor tpwr enable",
									"monitor swdp_scan",
									"attach 1",
									"load ${1:./bin/executable.elf}"
								]
							},
							"valuesFormatting": "parseText"
						}
					]
				},
				{
					"type": "lldb-mi",
					"extensions": [],
					"program": "./out/src/lldb.js",
					"runtime": "node",
					"label": "LLDB",
					"variables": {
						"FileBasenameNoExt": "code-debug.getFileBasenameNoExt",
						"FileNameNoExt": "code-debug.getFileNameNoExt"
					},
					"enableBreakpointsFor": {
						"languageIds": [
							"c",
							"ada",
							"cpp",
							"cobol",
							"fortran",
							"fortran-modern",
							"fortran90",
							"fortran_free-form",
							"fortran_fixed-form",
							"pascal",
							"modula",
							"java",
							"pli",
							"objective-c",
							"objective-cpp",
							"d",
							"python",
							"opencl",
							"modula3",
							"haskell",
							"ocaml",
							"swift",
							"julia",
							"dylan",
							"mips",
							"renderscript",
							"vala",
							"kotlin"
						]
					},
					"configurationAttributes": {
						"launch": {
							"required": [
								"target"
							],
							"properties": {
								"target": {
									"type": "string",
									"description": "Path of executable"
								},
								"arguments": {
									"type": "string",
									"description": "Arguments to append after the executable"
								},
								"cwd": {
									"type": "string",
									"description": "Path of project"
								},
								"lldbmipath": {
									"type": "string",
									"description": "Path to the lldb-mi executable or the command if in PATH",
									"default": "lldb-mi"
								},
								"env": {
									"type": "object",
									"description": "Environment overriding the lldb-mi (and in turn also the process) environment",
									"default": null
								},
								"debugger_args": {
									"type": "array",
									"description": "Additional arguments to pass to LLDB",
									"default": []
								},
								"valuesFormatting": {
									"type": "string",
									"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
									"default": "parseText",
									"enum": [
										"disabled",
										"parseText",
										"prettyPrinters"
									]
								},
								"printCalls": {
									"type": "boolean",
									"description": "Prints all lldb calls to the console",
									"default": false
								},
								"showDevDebugOutput": {
									"type": "boolean",
									"description": "Prints all lldb responses to the console",
									"default": false
								},
								"autorun": {
									"type": "array",
									"description": "lldb commands to run when starting to debug",
									"default": []
								},
								"ssh": {
									"required": [
										"host",
										"cwd",
										"user"
									],
									"type": "object",
									"description": "If this is set then the extension will connect to an ssh host and run lldb there",
									"properties": {
										"host": {
											"type": "string",
											"description": "Remote host name/ip to connect to"
										},
										"cwd": {
											"type": "string",
											"description": "Path of project on the remote"
										},
										"port": {
											"type": "number",
											"description": "Remote port number",
											"default": 22
										},
										"user": {
											"type": "string",
											"description": "Username to connect as"
										},
										"password": {
											"type": "string",
											"description": "Plain text password (unsafe; if possible use keyfile instead)"
										},
										"keyfile": {
											"type": "string",
											"description": "Absolute path to private key"
										},
										"useAgent": {
											"type": "boolean",
											"description": "Auto-detect the running SSH agent (via SSH_AUTH_SOCK environment variable) and use it to perform authentication",
											"default": false
										},
										"forwardX11": {
											"type": "boolean",
											"description": "If true, the server will redirect x11 to the local host",
											"default": true
										},
										"x11port": {
											"type": "number",
											"description": "Port to redirect X11 data to (by default port = display + 6000)",
											"default": 6000
										},
										"x11host": {
											"type": "string",
											"description": "Hostname/ip to redirect X11 data to",
											"default": "localhost"
										},
										"remotex11screen": {
											"type": "number",
											"description": "Screen to start the application on the remote side",
											"default": 0
										},
										"bootstrap": {
											"type": "string",
											"description": "Content will be executed on the SSH host before the debugger call."
										}
									}
								}
							}
						},
						"attach": {
							"required": [
								"target"
							],
							"properties": {
								"target": {
									"type": "string",
									"description": "PID of running program or program name"
								},
								"valuesFormatting": {
									"type": "string",
									"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
									"default": "parseText",
									"enum": [
										"disabled",
										"parseText",
										"prettyPrinters"
									]
								},
								"printCalls": {
									"type": "boolean",
									"description": "Prints all LLDB calls to the console",
									"default": false
								},
								"showDevDebugOutput": {
									"type": "boolean",
									"description": "Prints all LLDB responses to the console",
									"default": false
								},
								"executable": {
									"type": "string",
									"description": "Path of executable for debugging symbols"
								},
								"lldbmipath": {
									"type": "string",
									"description": "Path to the lldb-mi executable or the command if in PATH",
									"default": "lldb-mi"
								},
								"env": {
									"type": "object",
									"description": "Environment overriding the lldb-mi (and in turn also the process) environment",
									"default": null
								},
								"debugger_args": {
									"type": "array",
									"description": "Additional arguments to pass to LLDB",
									"default": []
								},
								"cwd": {
									"type": "string",
									"description": "Path of project",
									"default": "${workspaceRoot}"
								},
								"autorun": {
									"type": "array",
									"description": "lldb commands to run when starting to debug",
									"default": []
								}
							}
						}
					},
					"initialConfigurations": [
						{
							"name": "Debug",
							"type": "lldb-mi",
							"request": "launch",
							"target": "./bin/executable",
							"cwd": "${workspaceRoot}",
							"valuesFormatting": "parseText"
						}
					],
					"configurationSnippets": [
						{
							"label": "LLDB: Launch Program",
							"description": "Starts the program using lldb-mi",
							"body": {
								"type": "lldb-mi",
								"request": "launch",
								"name": "${2:Launch Program}",
								"target": "${1:./bin/executable}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "LLDB: Attach to PID",
							"description": "Attaches to a running program pid using lldb-mi",
							"body": {
								"type": "lldb-mi",
								"request": "attach",
								"name": "${2:Attach to PID}",
								"target": "${1:[PID]}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "LLDB: Launch over SSH",
							"description": "Remotely starts the program using lldb-mi",
							"body": {
								"type": "lldb-mi",
								"request": "launch",
								"name": "${6:Launch Program (SSH)}",
								"target": "${1:./bin/executable}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"ssh": {
									"host": "${2:127.0.0.1}",
									"cwd": "${3:/home/remote_user/project/}",
									"keyfile": "${4:/home/my_user/.ssh/id_rsa}",
									"user": "${5:remote_user}"
								},
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "LLDB: Launch GUI over SSH with X11 forwarding",
							"description": "Remotely starts the program using lldb-mi with X11 forwarding",
							"body": {
								"type": "lldb-mi",
								"request": "launch",
								"name": "${6:Launch Program (SSH + X11)}",
								"target": "${1:./bin/executable}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"ssh": {
									"host": "${2:127.0.0.1}",
									"cwd": "${3:/home/remote_user/project/}",
									"keyfile": "${4:/home/my_user/.ssh/id_rsa}",
									"user": "${5:remote_user}",
									"forwardX11": true,
									"x11host": "localhost",
									"x11port": 6000
								},
								"valuesFormatting": "parseText"
							}
						}
					]
				},
				{
					"type": "mago-mi",
					"extensions": [],
					"program": "./out/src/mago.js",
					"runtime": "node",
					"label": "Mago-MI",
					"variables": {
						"FileBasenameNoExt": "code-debug.getFileBasenameNoExt",
						"FileNameNoExt": "code-debug.getFileNameNoExt"
					},
					"enableBreakpointsFor": {
						"languageIds": [
							"d"
						]
					},
					"configurationAttributes": {
						"launch": {
							"required": [
								"target"
							],
							"properties": {
								"target": {
									"type": "string",
									"description": "Path of executable"
								},
								"arguments": {
									"type": "string",
									"description": "Arguments to append after the executable"
								},
								"cwd": {
									"type": "string",
									"description": "Path of project"
								},
								"magomipath": {
									"type": "string",
									"description": "Path to the mago-mi executable or the command if in PATH",
									"default": "mago-mi"
								},
								"env": {
									"type": "object",
									"description": "Environment overriding the mago-mi (and in turn also the process) environment",
									"default": null
								},
								"debugger_args": {
									"type": "array",
									"description": "Additional arguments to pass to mago",
									"default": []
								},
								"valuesFormatting": {
									"type": "string",
									"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
									"default": "parseText",
									"enum": [
										"disabled",
										"parseText",
										"prettyPrinters"
									]
								},
								"printCalls": {
									"type": "boolean",
									"description": "Prints all mago calls to the console",
									"default": false
								},
								"showDevDebugOutput": {
									"type": "boolean",
									"description": "Prints all mago responses to the console",
									"default": false
								},
								"autorun": {
									"type": "array",
									"description": "mago commands to run when starting to debug",
									"default": []
								}
							}
						},
						"attach": {
							"required": [
								"target"
							],
							"properties": {
								"target": {
									"type": "string",
									"description": "PID of running program or program name"
								},
								"valuesFormatting": {
									"type": "string",
									"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
									"default": "parseText",
									"enum": [
										"disabled",
										"parseText",
										"prettyPrinters"
									]
								},
								"printCalls": {
									"type": "boolean",
									"description": "Prints all mago calls to the console",
									"default": false
								},
								"showDevDebugOutput": {
									"type": "boolean",
									"description": "Prints all mago responses to the console",
									"default": false
								},
								"executable": {
									"type": "string",
									"description": "Path of executable for debugging symbols"
								},
								"magomipath": {
									"type": "string",
									"description": "Path to the mago-mi executable or the command if in PATH",
									"default": "mago-mi"
								},
								"env": {
									"type": "object",
									"description": "Environment overriding the mago-mi (and in turn also the process) environment",
									"default": null
								},
								"debugger_args": {
									"type": "array",
									"description": "Additional arguments to pass to mago",
									"default": []
								},
								"cwd": {
									"type": "string",
									"description": "Path of project",
									"default": "${workspaceRoot}"
								},
								"autorun": {
									"type": "array",
									"description": "mago commands to run when starting to debug",
									"default": []
								}
							}
						}
					},
					"initialConfigurations": [
						{
							"name": "Debug",
							"type": "mago-mi",
							"request": "launch",
							"target": "./bin/executable",
							"cwd": "${workspaceRoot}",
							"valuesFormatting": "parseText"
						}
					],
					"configurationSnippets": [
						{
							"label": "Mago: Launch Program",
							"description": "Starts the program using mago-mi",
							"body": {
								"type": "mago-mi",
								"request": "launch",
								"name": "${2:Launch Program}",
								"target": "${1:./bin/executable}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"valuesFormatting": "parseText"
							}
						},
						{
							"label": "Mago: Attach to PID",
							"description": "Attaches to a running program pid using mago-mi",
							"body": {
								"type": "mago-mi",
								"request": "attach",
								"name": "${2:Attach to PID}",
								"target": "${1:[PID]}",
								"cwd": "^\"\\${workspaceRoot}\"",
								"valuesFormatting": "parseText"
							}
						}
					]
				}
			]
		},
		"scripts": {
			"vscode:prepublish": "tsc -p ./",
			"compile": "tsc -watch -p ./",
			"postinstall": "node ./node_modules/vscode/bin/install"
		},
		"dependencies": {
			"vscode-debugadapter": "^1.16.0",
			"vscode-debugprotocol": "^1.16.0",
			"ssh2": "^0.8.2"
		},
		"devDependencies": {
			"@types/mocha": "^5.2.6",
			"@types/node": "^11.11.3",
			"mocha": "^6.0.2",
			"tslint": "^5.14.0",
			"tslint-language-service": "^0.9.9",
			"typescript": "^3.3.3333",
			"vscode": "^1.1.30"
		},
		"__metadata": {
			"id": "2fd22b8e-b3b8-4e7f-9a28-a5e2d1bdd0d4",
			"publisherId": "e054f80a-50f9-4d80-85c8-6ff87eef6c35",
			"publisherDisplayName": "WebFreak"
		}
	},
	{
		"name": "markdown-all-in-one",
		"displayName": "%ext.displayName%",
		"description": "%ext.description%",
		"icon": "images/Markdown-mark.png",
		"version": "2.4.0",
		"publisher": "yzhang",
		"engines": {
			"vscode": "^1.30.2"
		},
		"categories": [
			"Other"
		],
		"keywords": [
			"markdown"
		],
		"bugs": {
			"url": "https://github.com/yzhang-gh/vscode-markdown/issues"
		},
		"repository": {
			"type": "git",
			"url": "https://github.com/yzhang-gh/vscode-markdown"
		},
		"license": "MIT",
		"activationEvents": [
			"onLanguage:markdown",
			"workspaceContains:README.md"
		],
		"main": "./dist/extension",
		"contributes": {
			"commands": [
				{
					"command": "markdown.extension.toc.create",
					"title": "%command.toc.create.title%"
				},
				{
					"command": "markdown.extension.toc.update",
					"title": "%command.toc.update.title%"
				},
				{
					"command": "markdown.extension.printToHtml",
					"title": "%command.printToHtml.title%"
				},
				{
					"command": "markdown.extension.editing.toggleCodeSpan",
					"title": "%command.editing.toggleCodeSpan.title%"
				},
				{
					"command": "markdown.extension.editing.toggleMath",
					"title": "%command.editing.toggleMath.title%"
				},
				{
					"command": "markdown.extension.editing.toggleMathReverse",
					"title": "%command.editing.toggleMathReverse.title%"
				},
				{
					"command": "markdown.extension.editing.toggleList",
					"title": "%command.editing.toggleList.title%"
				}
			],
			"keybindings": [
				{
					"command": "markdown.extension.editing.toggleBold",
					"key": "ctrl+b",
					"mac": "cmd+b",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown"
				},
				{
					"command": "markdown.extension.editing.toggleItalic",
					"key": "ctrl+i",
					"mac": "cmd+i",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown"
				},
				{
					"command": "markdown.extension.editing.toggleStrikethrough",
					"key": "alt+s",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !isMac"
				},
				{
					"command": "markdown.extension.editing.toggleHeadingUp",
					"key": "ctrl+shift+]",
					"mac": "ctrl+shift+]",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown"
				},
				{
					"command": "markdown.extension.editing.toggleHeadingDown",
					"key": "ctrl+shift+[",
					"mac": "ctrl+shift+[",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown"
				},
				{
					"command": "markdown.extension.editing.toggleMath",
					"key": "ctrl+m",
					"mac": "cmd+m",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown"
				},
				{
					"command": "markdown.extension.onEnterKey",
					"key": "enter",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible && vim.mode != 'Normal' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && vim.mode != 'SearchInProgressMode' && vim.mode != 'CommandlineInProgress' && vim.mode != 'Replace' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'SurroundInputMode'"
				},
				{
					"command": "markdown.extension.onCtrlEnterKey",
					"key": "ctrl+enter",
					"mac": "cmd+enter",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
				},
				{
					"command": "markdown.extension.onShiftEnterKey",
					"key": "shift+enter",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
				},
				{
					"command": "markdown.extension.onTabKey",
					"key": "tab",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible && !editorTabMovesFocus && !inSnippetMode && !hasSnippetCompletions && !hasOtherSuggestions"
				},
				{
					"command": "markdown.extension.onShiftTabKey",
					"key": "shift+tab",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible && !editorTabMovesFocus && !inSnippetMode && !hasSnippetCompletions && !hasOtherSuggestions"
				},
				{
					"command": "markdown.extension.onBackspaceKey",
					"key": "backspace",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible && vim.mode != 'Normal' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && vim.mode != 'SearchInProgressMode' && vim.mode != 'CommandlineInProgress' && vim.mode != 'Replace' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'SurroundInputMode'"
				},
				{
					"command": "markdown.extension.onMoveLineUp",
					"key": "alt+up",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
				},
				{
					"command": "markdown.extension.onMoveLineDown",
					"key": "alt+down",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
				},
				{
					"command": "markdown.extension.onCopyLineUp",
					"key": "shift+alt+up",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
				},
				{
					"command": "markdown.extension.onCopyLineDown",
					"key": "shift+alt+down",
					"when": "editorTextFocus && !editorReadonly && editorLangId == markdown && !suggestWidgetVisible"
				},
				{
					"command": "markdown.extension.onIndentLines",
					"key": "ctrl+]",
					"mac": "cmd+]",
					"when": "editorTextFocus && editorLangId == markdown && !suggestWidgetVisible"
				},
				{
					"command": "markdown.extension.onOutdentLines",
					"key": "ctrl+[",
					"mac": "cmd+[",
					"when": "editorTextFocus && editorLangId == markdown && !suggestWidgetVisible"
				},
				{
					"command": "markdown.extension.checkTaskList",
					"key": "alt+c",
					"when": "editorTextFocus && editorLangId == markdown"
				},
				{
					"command": "markdown.extension.togglePreview",
					"key": "ctrl+shift+v",
					"mac": "cmd+shift+v",
					"when": "!terminalFocus"
				},
				{
					"command": "markdown.extension.togglePreviewToSide",
					"key": "ctrl+k v",
					"mac": "cmd+k v",
					"when": "!terminalFocus"
				},
				{
					"command": "markdown.extension.editing.paste",
					"key": "ctrl+v",
					"mac": "cmd+v",
					"when": "editorTextFocus && editorLangId == markdown && editorHasSelection"
				}
			],
			"configuration": {
				"type": "object",
				"title": "%config.title%",
				"properties": {
					"markdown.extension.toc.levels": {
						"type": "string",
						"default": "1..6",
						"description": "%config.toc.levels.description%"
					},
					"markdown.extension.toc.orderedList": {
						"type": "boolean",
						"default": false,
						"description": "%config.toc.orderedList.description%"
					},
					"markdown.extension.toc.unorderedList.marker": {
						"type": "string",
						"default": "-",
						"description": "%config.toc.unorderedList.marker.description%",
						"enum": [
							"-",
							"*",
							"+"
						]
					},
					"markdown.extension.toc.plaintext": {
						"type": "boolean",
						"default": false,
						"description": "%config.toc.plaintext.description%"
					},
					"markdown.extension.toc.updateOnSave": {
						"type": "boolean",
						"default": true,
						"description": "%config.toc.updateOnSave.description%"
					},
					"markdown.extension.toc.githubCompatibility": {
						"type": "boolean",
						"default": false,
						"description": "%config.toc.githubCompatibility.description%"
					},
					"markdown.extension.list.indentationSize": {
						"type": "string",
						"enum": [
							"adaptive",
							"inherit"
						],
						"enumDescriptions": [
							"%config.list.indentationSize.enumDescriptions.adaptive%",
							"%config.list.indentationSize.enumDescriptions.inherit%"
						],
						"default": "adaptive",
						"description": "%config.list.indentationSize.description%",
						"scope": "resource"
					},
					"markdown.extension.preview.autoShowPreviewToSide": {
						"type": "boolean",
						"default": false,
						"description": "%config.preview.autoShowPreviewToSide.description%"
					},
					"markdown.extension.orderedList.marker": {
						"type": "string",
						"default": "ordered",
						"description": "%config.orderedList.marker.description%",
						"enum": [
							"one",
							"ordered"
						],
						"enumDescriptions": [
							"%config.orderedList.marker.enumDescriptions.one%",
							"%config.orderedList.marker.enumDescriptions.ordered%"
						]
					},
					"markdown.extension.orderedList.autoRenumber": {
						"type": "boolean",
						"default": true,
						"description": "%config.orderedList.autoRenumber.description%"
					},
					"markdown.extension.italic.indicator": {
						"type": "string",
						"default": "*",
						"description": "%config.italic.indicator.description%",
						"enum": [
							"*",
							"_"
						]
					},
					"markdown.extension.showExplorer": {
						"type": "boolean",
						"default": false,
						"description": "%config.showExplorer.description%"
					},
					"markdown.extension.tableFormatter.enabled": {
						"type": "boolean",
						"default": true,
						"description": "%config.tableFormatter.enabled.description%"
					},
					"markdown.extension.tableFormatter.normalizeIndentation": {
						"type": "boolean",
						"default": false,
						"description": "%config.tableFormatter.normalizeIndentation.description%"
					},
					"markdown.extension.print.absoluteImgPath": {
						"type": "boolean",
						"default": true,
						"description": "%config.print.absoluteImgPath.description%",
						"scope": "resource"
					},
					"markdown.extension.print.imgToBase64": {
						"type": "boolean",
						"default": false,
						"description": "%config.print.imgToBase64.description%",
						"scope": "resource"
					},
					"markdown.extension.print.onFileSave": {
						"type": "boolean",
						"default": false,
						"description": "%config.print.onFileSave.description%",
						"scope": "resource"
					},
					"markdown.extension.syntax.decorations": {
						"type": "boolean",
						"default": true,
						"description": "%config.syntax.decorations.description%"
					},
					"markdown.extension.syntax.plainTheme": {
						"type": "boolean",
						"default": false,
						"description": "%config.syntax.plainTheme.description%"
					},
					"markdown.extension.katex.macros": {
						"type": "object",
						"default": {},
						"description": "%config.katex.macros.description%"
					}
				}
			},
			"markdown.markdownItPlugins": true,
			"markdown.previewStyles": [
				"./media/checkbox.css",
				"./node_modules/katex/dist/katex.min.css"
			],
			"grammars": [
				{
					"scopeName": "markdown.math_display",
					"path": "./syntaxes/math_display.markdown.tmLanguage.json",
					"injectTo": [
						"text.html.markdown"
					]
				},
				{
					"scopeName": "markdown.math_inline",
					"path": "./syntaxes/math_inline.markdown.tmLanguage.json",
					"injectTo": [
						"text.html.markdown"
					]
				},
				{
					"scopeName": "text.katex",
					"path": "./syntaxes/katex.tmLanguage.json"
				}
			]
		},
		"scripts": {
			"vscode:prepublish": "webpack --mode production",
			"compile": "webpack --mode none",
			"watch": "webpack --mode none --watch",
			"postinstall": "node ./node_modules/vscode/bin/install",
			"test": "tsc -p ./ && node ./node_modules/vscode/bin/test",
			"test-compile": "tsc -p ./"
		},
		"dependencies": {
			"@neilsustc/markdown-it-katex": "^0.4.0",
			"highlight.js": "^9.15.6",
			"image-size": "^0.7.4",
			"markdown-it": "^8.4.2",
			"markdown-it-task-lists": "^2.1.1",
			"string-similarity": "^3.0.0"
		},
		"devDependencies": {
			"@types/highlight.js": "^9.12.3",
			"@types/image-size": "^0.7.0",
			"@types/markdown-it": "^0.0.7",
			"@types/mocha": "^5.2.6",
			"@types/node": "^11.11.3",
			"mocha": "^6.1.4",
			"ts-loader": "^5.3.3",
			"typescript": "^3.3.3333",
			"vscode": "^1.1.33",
			"webpack": "^4.29.6",
			"webpack-cli": "^3.2.3"
		},
		"__metadata": {
			"id": "98790d67-10fa-497c-9113-f6c7489207b2",
			"publisherId": "36c8b41c-6ef6-4bf5-a5b7-65bef29b606f",
			"publisherDisplayName": "Yu Zhang"
		}
	},
	{
		"name": "cpptools",
		"displayName": "C/C++",
		"description": "C/C++ IntelliSense, debugging, and code browsing.",
		"version": "0.23.1",
		"publisher": "ms-vscode",
		"preview": true,
		"icon": "LanguageCCPP_color_128x.png",
		"readme": "README.md",
		"author": {
			"name": "Microsoft Corporation"
		},
		"license": "SEE LICENSE IN LICENSE.txt",
		"engines": {
			"vscode": "^1.30.0"
		},
		"bugs": {
			"url": "https://github.com/Microsoft/vscode-cpptools/issues",
			"email": "c_cpp_support@microsoft.com"
		},
		"repository": {
			"type": "git",
			"url": "https://github.com/Microsoft/vscode-cpptools.git"
		},
		"homepage": "https://github.com/Microsoft/vscode-cpptools",
		"qna": "https://github.com/Microsoft/vscode-cpptools/issues",
		"keywords": [
			"C",
			"C++",
			"IntelliSense",
			"Microsoft",
			"multi-root ready"
		],
		"categories": [
			"Programming Languages",
			"Debuggers",
			"Formatters",
			"Linters",
			"Snippets"
		],
		"activationEvents": [
			"onLanguage:cpp",
			"onLanguage:c",
			"onCommand:extension.pickNativeProcess",
			"onCommand:extension.pickRemoteNativeProcess",
			"onCommand:C_Cpp.BuildAndDebugActiveFile",
			"onCommand:C_Cpp.ConfigurationEditJSON",
			"onCommand:C_Cpp.ConfigurationEditUI",
			"onCommand:C_Cpp.ConfigurationSelect",
			"onCommand:C_Cpp.ConfigurationProviderSelect",
			"onCommand:C_Cpp.SwitchHeaderSource",
			"onCommand:C_Cpp.Navigate",
			"onCommand:C_Cpp.GoToDeclaration",
			"onCommand:C_Cpp.PeekDeclaration",
			"onCommand:C_Cpp.EnableErrorSquiggles",
			"onCommand:C_Cpp.DisableErrorSquiggles",
			"onCommand:C_Cpp.ToggleIncludeFallback",
			"onCommand:C_Cpp.ToggleDimInactiveRegions",
			"onCommand:C_Cpp.ShowReleaseNotes",
			"onCommand:C_Cpp.ResetDatabase",
			"onCommand:C_Cpp.PauseParsing",
			"onCommand:C_Cpp.ResumeParsing",
			"onCommand:C_Cpp.ShowParsingCommands",
			"onCommand:C_Cpp.TakeSurvey",
			"onCommand:C_Cpp.LogDiagnostics",
			"onDebug",
			"workspaceContains:/.vscode/c_cpp_properties.json"
		],
		"main": "./dist/main",
		"contributes": {
			"problemMatchers": [
				{
					"name": "gcc",
					"owner": "cpptools",
					"fileLocation": [
						"relative",
						"${workspaceFolder}"
					],
					"pattern": {
						"regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
						"file": 1,
						"line": 2,
						"column": 3,
						"severity": 4,
						"message": 5
					}
				}
			],
			"configuration": {
				"type": "object",
				"title": "C/C++",
				"properties": {
					"C_Cpp.clang_format_path": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "The full path of the clang-format executable.",
						"scope": "resource"
					},
					"C_Cpp.clang_format_style": {
						"type": "string",
						"default": "file",
						"description": "Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use \"file\" to load the style from a .clang-format file in the current or parent directory. Use {key: value, ...} to set specific parameters. For example, the \"Visual Studio\" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }",
						"scope": "resource"
					},
					"C_Cpp.clang_format_fallbackStyle": {
						"type": "string",
						"default": "Visual Studio",
						"description": "Name of the predefined style used as a fallback in case clang-format is invoked with style \"file\" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use {key: value, ...} to set specific parameters. For example, the \"Visual Studio\" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }",
						"scope": "resource"
					},
					"C_Cpp.clang_format_sortIncludes": {
						"type": [
							"boolean",
							"null"
						],
						"enum": [
							true,
							false,
							null
						],
						"default": null,
						"description": "If set, overrides the include sorting behavior determined by the SortIncludes parameter.",
						"scope": "resource"
					},
					"C_Cpp.intelliSenseEngine": {
						"type": "string",
						"enum": [
							"Default",
							"Tag Parser",
							"Disabled"
						],
						"default": "Default",
						"description": "Controls the IntelliSense provider. \"Tag Parser\" provides \"fuzzy\" results that are not context-aware. \"Default\" provides context-aware results. \"Disabled\" turns off C/C++ language service features.",
						"scope": "resource"
					},
					"C_Cpp.intelliSenseEngineFallback": {
						"type": "string",
						"enum": [
							"Enabled",
							"Disabled"
						],
						"default": "Disabled",
						"description": "Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.",
						"scope": "resource"
					},
					"C_Cpp.autocomplete": {
						"type": "string",
						"enum": [
							"Default",
							"Disabled"
						],
						"default": "Default",
						"description": "Controls the auto-completion provider. \"Default\" uses the active IntelliSense engine. \"Disabled\" uses the word-based completion provided by Visual Studio Code.",
						"scope": "resource"
					},
					"C_Cpp.errorSquiggles": {
						"type": "string",
						"enum": [
							"Enabled",
							"Disabled",
							"EnabledIfIncludesResolve"
						],
						"default": "EnabledIfIncludesResolve",
						"description": "Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. This setting is ignored by the Tag Parser engine.",
						"scope": "resource"
					},
					"C_Cpp.dimInactiveRegions": {
						"type": "boolean",
						"default": true,
						"description": "Controls whether inactive preprocessor blocks are colored differently than active code. This setting is ignored by the Tag Parser engine.",
						"scope": "resource"
					},
					"C_Cpp.inactiveRegionOpacity": {
						"type:": "number",
						"default": 0.55,
						"Description": "Controls the opacity of inactive preprocessor blocks. Scales between 0.1 and 1.0. This setting only applies when inactive region dimming is enabled.",
						"scope": "resource",
						"minimum": 0.1,
						"maximum": 1
					},
					"C_Cpp.inactiveRegionForegroundColor": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.",
						"scope": "resource"
					},
					"C_Cpp.inactiveRegionBackgroundColor": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.",
						"scope": "resource"
					},
					"C_Cpp.formatting": {
						"type": "string",
						"enum": [
							"Default",
							"Disabled"
						],
						"default": "Default",
						"description": "\"Default\" enables code formatting. \"Disabled\" disables code formatting.",
						"scope": "resource"
					},
					"C_Cpp.navigation.length": {
						"type": "number",
						"default": 60,
						"description": "Maximum character length of the scope/navigation UI in the status bar. The UI may not appear if this value is too large.",
						"scope": "resource"
					},
					"C_Cpp.loggingLevel": {
						"type": "string",
						"enum": [
							"None",
							"Error",
							"Warning",
							"Information",
							"Debug"
						],
						"default": "Error",
						"description": "The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information < Debug.",
						"scope": "resource"
					},
					"C_Cpp.autoAddFileAssociations": {
						"type": "boolean",
						"default": true,
						"description": "Controls whether files are automatically added to files.associations when they are the target of a navigation operation from a C/C++ file.",
						"scope": "resource"
					},
					"C_Cpp.workspaceParsingPriority": {
						"type": "string",
						"enum": [
							"highest",
							"high",
							"medium",
							"low"
						],
						"default": "highest",
						"description": "Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.",
						"scope": "resource"
					},
					"C_Cpp.workspaceSymbols": {
						"type": "string",
						"enum": [
							"All",
							"Just My Code"
						],
						"default": "Just My Code",
						"description": "The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked",
						"scope": "resource"
					},
					"C_Cpp.exclusionPolicy": {
						"type": "string",
						"enum": [
							"checkFolders",
							"checkFilesAndFolders"
						],
						"default": "checkFolders",
						"description": "Instructs the extension when to use the \"files.exclude\" setting when determining which files should be added to the code navigation database while traversing through the paths in the \"browse.path\" array. \"checkFolders\" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). \"checkFilesAndFolders\" means that the exclusion filters will be evaluated against every file and folder encountered. If your \"files.exclude\" setting only contains folders, then \"checkFolders\" is the best choice and will increase the speed at which the extension can initialize the code navigation database.",
						"scope": "resource"
					},
					"C_Cpp.preferredPathSeparator": {
						"type": "string",
						"enum": [
							"Forward Slash",
							"Backslash"
						],
						"default": "Forward Slash",
						"description": "The character used as a path separator for #include auto-completion results.",
						"scope": "resource"
					},
					"C_Cpp.commentContinuationPatterns": {
						"type": "array",
						"default": [
							"/**"
						],
						"items": {
							"anyOf": [
								{
									"type": "string",
									"description": "The pattern that begins a multiline or single line comment block. The continuation pattern defaults to ' * ' for multiline comment blocks or this string for single line comment blocks."
								},
								{
									"type": "object",
									"properties": {
										"begin": {
											"type": "string",
											"description": "The pattern that begins a multiline or single line comment block."
										},
										"continue": {
											"type": "string",
											"description": "The text that will be inserted on the next line when Enter is pressed inside a multiline or single line comment block."
										}
									}
								}
							]
						},
						"description": "Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.",
						"scope": "resource"
					},
					"C_Cpp.configurationWarnings": {
						"type": "string",
						"enum": [
							"Enabled",
							"Disabled"
						],
						"default": "Enabled",
						"description": "Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.",
						"scope": "resource"
					},
					"C_Cpp.intelliSenseCachePath": {
						"type": "string",
						"default": "${workspaceFolder}/.vscode",
						"description": "Defines the folder path for cached precompiled headers used by IntelliSense. The default path \"${workspaceFolder}/.vscode\" will be used if a specified path is invalid.",
						"scope": "resource"
					},
					"C_Cpp.intelliSenseCacheSize": {
						"type": "number",
						"default": 5120,
						"description": "Maximum size of the per-workspace hard drive space in megabytes for cached precompiled headers; the actual usage may fluctuate around this value. The default size is 5120 MB. Precompiled header caching is disabled when the size is 0.",
						"scope": "resource",
						"minimum": 0
					},
					"C_Cpp.default.includePath": {
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "string"
						},
						"default": null,
						"description": "The value to use in a configuration if \"includePath\" is not specified, or the values to insert if \"${default}\" is present in \"includePath\".",
						"scope": "resource"
					},
					"C_Cpp.default.defines": {
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "string"
						},
						"default": null,
						"description": "The value to use in a configuration if \"defines\" is not specified, or the values to insert if \"${default}\" is present in \"defines\".",
						"scope": "resource"
					},
					"C_Cpp.default.macFrameworkPath": {
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "string"
						},
						"default": null,
						"description": "The value to use in a configuration if \"macFrameworkPath\" is not specified, or the values to insert if \"${default}\" is present in \"macFrameworkPath\".",
						"scope": "resource"
					},
					"C_Cpp.default.windowsSdkVersion": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "Version of the Windows SDK include path to use on Windows, e.g. '10.0.17134.0'.",
						"pattern": "^\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1$",
						"scope": "resource"
					},
					"C_Cpp.default.compileCommands": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "The value to use in a configuration if \"compileCommands\" is either not specified, or set to \"${default}\".",
						"scope": "resource"
					},
					"C_Cpp.default.forcedInclude": {
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "string"
						},
						"default": null,
						"description": "The value to use in a configuration if \"forcedInclude\" is not specified, or the values to insert if \"${default}\" is present in \"forcedInclude\".",
						"scope": "resource"
					},
					"C_Cpp.default.intelliSenseMode": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"msvc-x64",
							"gcc-x64",
							"clang-x64"
						],
						"default": null,
						"description": "The value to use in a configuration if \"intelliSenseMode\" is either not specified or set to \"${default}\".",
						"scope": "resource"
					},
					"C_Cpp.default.compilerPath": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "The value to use in a configuration if \"compilerPath\" is either not specified or set to \"${default}\".",
						"scope": "resource"
					},
					"C_Cpp.default.cStandard": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"c89",
							"c99",
							"c11"
						],
						"default": null,
						"description": "The value to use in a configuration if \"cStandard\" is either not specified or set to \"${default}\".",
						"scope": "resource"
					},
					"C_Cpp.default.cppStandard": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"c++98",
							"c++03",
							"c++11",
							"c++14",
							"c++17"
						],
						"default": null,
						"description": "The value to use in a configuration if \"cppStandard\" is either not specified or set to \"${default}\".",
						"scope": "resource"
					},
					"C_Cpp.default.configurationProvider": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "The value to use in a configuration if \"configurationProvider\" is either not specified or set to \"${default}\".",
						"scope": "resource"
					},
					"C_Cpp.default.browse.path": {
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "string"
						},
						"default": null,
						"description": "The value to use in a configuration if \"browse.path\" is not specified, or the values to insert if \"${default}\" is present in \"browse.path\".",
						"scope": "resource"
					},
					"C_Cpp.default.browse.databaseFilename": {
						"type": [
							"string",
							"null"
						],
						"default": null,
						"description": "The value to use in a configuration if \"browse.databaseFilename\" is either not specified or set to \"${default}\".",
						"scope": "resource"
					},
					"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": {
						"type": "boolean",
						"default": true,
						"description": "The value to use in a configuration if \"browse.limitSymbolsToIncludedHeaders\" is either not specified or set to \"${default}\".",
						"scope": "resource"
					},
					"C_Cpp.default.systemIncludePath": {
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "string"
						},
						"default": null,
						"description": "The value to use for the system include path. If set, it overrides the system include path acquired via \"compilerPath\" and \"compileCommands\" settings.",
						"scope": "resource"
					},
					"C_Cpp.default.enableConfigurationSquiggles": {
						"type": [
							"boolean",
							"null"
						],
						"default": null,
						"description": "Controls whether the extension will report errors detected in c_cpp_properties.json.",
						"scope": "resource"
					},
					"C_Cpp.updateChannel": {
						"type": "string",
						"enum": [
							"Default",
							"Insiders"
						],
						"default": "Default",
						"description": "Set to \"Insiders\" to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.",
						"scope": "resource"
					},
					"C_Cpp.suggestSnippets": {
						"type": "boolean",
						"default": true,
						"description": "If true, snippets are provided by the language server.",
						"scope": "resource"
					}
				}
			},
			"commands": [
				{
					"command": "C_Cpp.ConfigurationSelect",
					"title": "%c_cpp.command.configurationSelect.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ConfigurationProviderSelect",
					"title": "%c_cpp.command.configurationProviderSelect.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ConfigurationEditJSON",
					"title": "%c_cpp.command.configurationEditJSON.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ConfigurationEditUI",
					"title": "%c_cpp.command.configurationEditUI.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.GoToDeclaration",
					"title": "%c_cpp.command.goToDeclaration.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.PeekDeclaration",
					"title": "%c_cpp.command.peekDeclaration.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.SwitchHeaderSource",
					"title": "%c_cpp.command.switchHeaderSource.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.Navigate",
					"title": "%c_cpp.command.navigate.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.EnableErrorSquiggles",
					"title": "%c_cpp.command.enableErrorSquiggles.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.DisableErrorSquiggles",
					"title": "%c_cpp.command.disableErrorSquiggles.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ToggleIncludeFallback",
					"title": "%c_cpp.command.toggleIncludeFallback.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ToggleDimInactiveRegions",
					"title": "%c_cpp.command.toggleDimInactiveRegions.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ShowReleaseNotes",
					"title": "%c_cpp.command.showReleaseNotes.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ResetDatabase",
					"title": "%c_cpp.command.resetDatabase.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.PauseParsing",
					"title": "%c_cpp.command.pauseParsing.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ResumeParsing",
					"title": "%c_cpp.command.resumeParsing.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.ShowParsingCommands",
					"title": "%c_cpp.command.showParsingCommands.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.TakeSurvey",
					"title": "%c_cpp.command.takeSurvey.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.BuildAndDebugActiveFile",
					"title": "%c_cpp.command.buildAndDebugActiveFile.title%",
					"category": "C/C++"
				},
				{
					"command": "C_Cpp.LogDiagnostics",
					"title": "%c_cpp.command.logDiagnostics.title%",
					"category": "C/C++"
				}
			],
			"keybindings": [
				{
					"command": "C_Cpp.GoToDeclaration",
					"key": "Ctrl+F12",
					"when": "editorTextFocus && editorLangId == 'cpp'"
				},
				{
					"command": "C_Cpp.GoToDeclaration",
					"key": "Ctrl+F12",
					"when": "editorTextFocus && editorLangId == 'c'"
				},
				{
					"command": "C_Cpp.PeekDeclaration",
					"key": "Ctrl+Alt+F12",
					"when": "editorTextFocus && editorLangId == 'cpp'"
				},
				{
					"command": "C_Cpp.PeekDeclaration",
					"key": "Ctrl+Alt+F12",
					"when": "editorTextFocus && editorLangId == 'c'"
				},
				{
					"command": "C_Cpp.SwitchHeaderSource",
					"key": "Alt+O",
					"when": "editorTextFocus && editorLangId == 'cpp'"
				},
				{
					"command": "C_Cpp.SwitchHeaderSource",
					"key": "Alt+O",
					"when": "editorTextFocus && editorLangId == 'c'"
				},
				{
					"command": "C_Cpp.Navigate",
					"key": "Alt+N",
					"when": "editorTextFocus && editorLangId == 'cpp'"
				},
				{
					"command": "C_Cpp.Navigate",
					"key": "Alt+N",
					"when": "editorTextFocus && editorLangId == 'c'"
				}
			],
			"debuggers": [
				{
					"type": "cppdbg",
					"label": "C++ (GDB/LLDB)",
					"enableBreakpointsFor": {
						"languageIds": [
							"c",
							"cpp"
						]
					},
					"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
					"variables": {
						"pickProcess": "extension.pickNativeProcess",
						"pickRemoteProcess": "extension.pickRemoteNativeProcess"
					},
					"configurationAttributes": {
						"launch": {
							"type": "object",
							"default": {},
							"required": [
								"program"
							],
							"properties": {
								"program": {
									"type": "string",
									"description": "Full path to program executable.",
									"default": "${workspaceRoot}/a.out"
								},
								"args": {
									"type": "array",
									"description": "Command line arguments passed to the program.",
									"items": {
										"type": "string"
									},
									"default": []
								},
								"type": {
									"type": "string",
									"description": "The type of the engine. Must be \"cppdbg\".",
									"default": "cppdbg"
								},
								"targetArchitecture": {
									"type": "string",
									"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
									"default": "x64"
								},
								"cwd": {
									"type": "string",
									"description": "The working directory of the target",
									"default": "."
								},
								"setupCommands": {
									"type": "array",
									"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
									"items": {
										"type": "object",
										"default": {},
										"properties": {
											"text": {
												"type": "string",
												"description": "The debugger command to execute.",
												"default": ""
											},
											"description": {
												"type": "string",
												"description": "Optional description for the command.",
												"default": ""
											},
											"ignoreFailures": {
												"type": "boolean",
												"description": "If true, failures from the command should be ignored. Default value is false.",
												"default": false
											}
										}
									},
									"default": []
								},
								"customLaunchSetupCommands": {
									"type": "array",
									"description": "If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
									"items": {
										"type": "object",
										"default": {},
										"properties": {
											"text": {
												"type": "string",
												"description": "The debugger command to execute.",
												"default": ""
											},
											"description": {
												"type": "string",
												"description": "Optional description for the command.",
												"default": ""
											},
											"ignoreFailures": {
												"type": "boolean",
												"description": "If true, failures from the command should be ignored. Default value is false.",
												"default": false
											}
										}
									},
									"default": []
								},
								"launchCompleteCommand": {
									"enum": [
										"exec-run",
										"exec-continue",
										"None"
									],
									"description": "The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".",
									"default": "exec-run"
								},
								"visualizerFile": {
									"type": "string",
									"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
									"default": ""
								},
								"showDisplayString": {
									"type": "boolean",
									"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
									"default": true
								},
								"environment": {
									"type": "array",
									"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
									"items": {
										"type": "object",
										"default": {},
										"properties": {
											"name": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									},
									"default": []
								},
								"additionalSOLibSearchPath": {
									"type": "string",
									"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
									"default": ""
								},
								"MIMode": {
									"type": "string",
									"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
									"default": "gdb"
								},
								"miDebuggerPath": {
									"type": "string",
									"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
									"default": "/usr/bin/gdb"
								},
								"miDebuggerArgs": {
									"type": "string",
									"description": "Arguments for the mi debugger (such as gdb) to use. When unspecified.",
									"default": ""
								},
								"miDebuggerServerAddress": {
									"type": "string",
									"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
									"default": "serveraddress:port"
								},
								"stopAtEntry": {
									"type": "boolean",
									"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
									"default": false
								},
								"debugServerPath": {
									"type": "string",
									"description": "Optional full path to debug server to launch. Defaults to null.",
									"default": ""
								},
								"debugServerArgs": {
									"type": "string",
									"description": "Optional debug server args. Defaults to null.",
									"default": ""
								},
								"serverStarted": {
									"type": "string",
									"description": "Optional server-started pattern to look for in the debug server output. Defaults to null.",
									"default": ""
								},
								"filterStdout": {
									"type": "boolean",
									"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
									"default": true
								},
								"filterStderr": {
									"type": "boolean",
									"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
									"default": false
								},
								"serverLaunchTimeout": {
									"type": "integer",
									"description": "Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.",
									"default": "10000"
								},
								"coreDumpPath": {
									"type": "string",
									"description": "Optional full path to a core dump file for the specified program. Defaults to null.",
									"default": ""
								},
								"externalConsole": {
									"type": "boolean",
									"description": "If true, a console is launched for the debuggee. If false, on Linux and Windows, it will appear in the Integrated Console.",
									"default": false
								},
								"avoidWindowsConsoleRedirection": {
									"type": "boolean",
									"description": "If true, disables debuggee console redirection that is required for Integrated Terminal support.",
									"default": false
								},
								"sourceFileMap": {
									"type": "object",
									"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
									"default": {
										"<source-path>": "<target-path>"
									}
								},
								"logging": {
									"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
									"type": "object",
									"default": {},
									"properties": {
										"exceptions": {
											"type": "boolean",
											"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"moduleLoad": {
											"type": "boolean",
											"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"programOutput": {
											"type": "boolean",
											"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"engineLogging": {
											"type": "boolean",
											"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
											"default": false
										},
										"trace": {
											"type": "boolean",
											"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
											"default": false
										},
										"traceResponse": {
											"type": "boolean",
											"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
											"default": false
										}
									}
								},
								"pipeTransport": {
									"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
									"type": "object",
									"default": {
										"pipeCwd": "/usr/bin",
										"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
										"pipeArgs": [],
										"debuggerPath": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
									},
									"properties": {
										"pipeCwd": {
											"type": "string",
											"description": "The fully qualified path to the working directory for the pipe program.",
											"default": "/usr/bin"
										},
										"pipeProgram": {
											"type": "string",
											"description": "The fully qualified pipe command to execute.",
											"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
										},
										"pipeArgs": {
											"type": "array",
											"description": "Command line arguments passed to the pipe program to configure the connection.",
											"items": {
												"type": "string"
											},
											"default": []
										},
										"debuggerPath": {
											"type": "string",
											"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
											"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
										},
										"pipeEnv": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "Environment variables passed to the pipe program.",
											"default": {}
										}
									}
								}
							}
						},
						"attach": {
							"type": "object",
							"default": {},
							"required": [
								"program",
								"processId"
							],
							"properties": {
								"program": {
									"type": "string",
									"description": "Full path to program executable.",
									"default": "${workspaceRoot}/a.out"
								},
								"type": {
									"type": "string",
									"description": "The type of the engine. Must be \"cppdbg\".",
									"default": "cppdbg"
								},
								"targetArchitecture": {
									"type": "string",
									"description": "The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.",
									"default": "x64"
								},
								"visualizerFile": {
									"type": "string",
									"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
									"default": ""
								},
								"showDisplayString": {
									"type": "boolean",
									"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
									"default": true
								},
								"additionalSOLibSearchPath": {
									"type": "string",
									"description": "Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".",
									"default": ""
								},
								"MIMode": {
									"type": "string",
									"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".",
									"default": "gdb"
								},
								"miDebuggerPath": {
									"type": "string",
									"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
									"default": "/usr/bin/gdb"
								},
								"miDebuggerServerAddress": {
									"type": "string",
									"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
									"default": "serveraddress:port"
								},
								"processId": {
									"anyOf": [
										{
											"type": "string",
											"description": "Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
											"default": "${command:pickProcess}"
										},
										{
											"type": "integer",
											"description": "Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
											"default": 0
										}
									]
								},
								"filterStdout": {
									"type": "boolean",
									"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
									"default": true
								},
								"filterStderr": {
									"type": "boolean",
									"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
									"default": false
								},
								"sourceFileMap": {
									"type": "object",
									"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
									"default": {
										"<source-path>": "<target-path>"
									}
								},
								"logging": {
									"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
									"type": "object",
									"default": {},
									"properties": {
										"exceptions": {
											"type": "boolean",
											"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"moduleLoad": {
											"type": "boolean",
											"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"programOutput": {
											"type": "boolean",
											"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"engineLogging": {
											"type": "boolean",
											"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
											"default": false
										},
										"trace": {
											"type": "boolean",
											"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
											"default": false
										},
										"traceResponse": {
											"type": "boolean",
											"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
											"default": false
										}
									}
								},
								"pipeTransport": {
									"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
									"type": "object",
									"default": {
										"pipeCwd": "/usr/bin",
										"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
										"pipeArgs": [],
										"debuggerPath": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
									},
									"properties": {
										"pipeCwd": {
											"type": "string",
											"description": "The fully qualified path to the working directory for the pipe program.",
											"default": "/usr/bin"
										},
										"pipeProgram": {
											"type": "string",
											"description": "The fully qualified pipe command to execute.",
											"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
										},
										"pipeArgs": {
											"type": "array",
											"description": "Command line arguments passed to the pipe program to configure the connection.",
											"items": {
												"type": "string"
											},
											"default": []
										},
										"debuggerPath": {
											"type": "string",
											"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
											"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
										},
										"pipeEnv": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "Environment variables passed to the pipe program.",
											"default": {}
										}
									}
								},
								"setupCommands": {
									"type": "array",
									"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
									"items": {
										"type": "object",
										"default": {},
										"properties": {
											"text": {
												"type": "string",
												"description": "The debugger command to execute.",
												"default": ""
											},
											"description": {
												"type": "string",
												"description": "Optional description for the command.",
												"default": ""
											},
											"ignoreFailures": {
												"type": "boolean",
												"description": "If true, failures from the command should be ignored. Default value is false.",
												"default": false
											}
										}
									},
									"default": []
								}
							}
						}
					}
				},
				{
					"type": "cppvsdbg",
					"label": "C++ (Windows)",
					"enableBreakpointsFor": {
						"languageIds": [
							"c",
							"cpp"
						]
					},
					"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
					"variables": {
						"pickProcess": "extension.pickNativeProcess"
					},
					"configurationAttributes": {
						"launch": {
							"type": "object",
							"default": {},
							"required": [
								"program",
								"cwd"
							],
							"properties": {
								"program": {
									"type": "string",
									"description": "Full path to program executable.",
									"default": "${workspaceRoot}/program.exe"
								},
								"args": {
									"type": "array",
									"description": "Command line arguments passed to the program.",
									"items": {
										"type": "string"
									},
									"default": []
								},
								"type": {
									"type": "string",
									"description": "The type of the engine. Must be \"cppvsdbg\".",
									"default": "cppvsdbg"
								},
								"cwd": {
									"type": "string",
									"description": "The working directory of the target.",
									"default": "${workspaceRoot}"
								},
								"environment": {
									"type": "array",
									"description": "Environment variables to add to the environment for the program. Example: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
									"items": {
										"type": "object",
										"default": {},
										"properties": {
											"name": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									},
									"default": []
								},
								"envFile": {
									"type": "string",
									"description": "Absolute path to a file containing environment variable definitions. These file has key value pairs sepearted by an equals sign per line. E.g. KEY=VALUE",
									"default": "${workspaceFolder}/.env"
								},
								"symbolSearchPath": {
									"type": "string",
									"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
									"default": ""
								},
								"stopAtEntry": {
									"type": "boolean",
									"description": "Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.",
									"default": false
								},
								"dumpPath": {
									"type": "string",
									"description": "Optional full path to a dump file for the specified program. Example: \"c:\\temp\\app.dmp\". Defaults to null.",
									"default": ""
								},
								"visualizerFile": {
									"type": "string",
									"description": ".natvis file to be used when debugging this process.",
									"default": ""
								},
								"externalConsole": {
									"type": "boolean",
									"description": "If true, a console is launched for the debuggee. If false, no console is launched.",
									"default": false
								},
								"sourceFileMap": {
									"type": "object",
									"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
									"default": {
										"<source-path>": "<target-path>"
									}
								},
								"enableDebugHeap": {
									"type": "boolean",
									"description": "If false, the process will be launched with debug heap disabled. This sets the environment variable '_NO_DEBUG_HEAP' to '1'.",
									"default": false
								},
								"logging": {
									"type": "object",
									"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
									"default": {},
									"properties": {
										"exceptions": {
											"type": "boolean",
											"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"moduleLoad": {
											"type": "boolean",
											"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"programOutput": {
											"type": "boolean",
											"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"engineLogging": {
											"type": "boolean",
											"description": "Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.",
											"default": false
										}
									}
								}
							}
						},
						"attach": {
							"type": "object",
							"default": {},
							"required": [
								"processId"
							],
							"properties": {
								"type": {
									"type": "string",
									"description": "The type of the engine. Must be \"cppvsdbg\".",
									"default": "cppvsdbg"
								},
								"symbolSearchPath": {
									"type": "string",
									"description": "Semicolon separated list of directories to use to search for symbol (that is, pdb) files. Example: \"c:\\dir1;c:\\dir2\".",
									"default": ""
								},
								"processId": {
									"anyOf": [
										{
											"type": "string",
											"description": "Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
											"default": "${command:pickProcess}"
										},
										{
											"type": "integer",
											"description": "Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.",
											"default": 0
										}
									]
								},
								"visualizerFile": {
									"type": "string",
									"description": ".natvis file to be used when debugging this process.",
									"default": ""
								},
								"sourceFileMap": {
									"type": "object",
									"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
									"default": {
										"<source-path>": "<target-path>"
									}
								},
								"logging": {
									"type": "object",
									"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
									"default": {},
									"properties": {
										"exceptions": {
											"type": "boolean",
											"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"moduleLoad": {
											"type": "boolean",
											"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"programOutput": {
											"type": "boolean",
											"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
											"default": true
										},
										"trace": {
											"type": "boolean",
											"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
											"default": false
										}
									}
								}
							}
						}
					}
				}
			],
			"jsonValidation": [
				{
					"fileMatch": "c_cpp_properties.json",
					"url": "./c_cpp_properties.schema.json"
				}
			],
			"menus": {
				"editor/context": [
					{
						"when": "editorLangId == c",
						"command": "C_Cpp.GoToDeclaration",
						"group": "navigation@2"
					},
					{
						"when": "editorLangId == cpp",
						"command": "C_Cpp.GoToDeclaration",
						"group": "navigation@2"
					},
					{
						"when": "editorLangId == c",
						"command": "C_Cpp.PeekDeclaration",
						"group": "navigation@3"
					},
					{
						"when": "editorLangId == cpp",
						"command": "C_Cpp.PeekDeclaration",
						"group": "navigation@3"
					},
					{
						"when": "editorLangId == c",
						"command": "C_Cpp.SwitchHeaderSource",
						"group": "other1_navigation@1"
					},
					{
						"when": "editorLangId == cpp",
						"command": "C_Cpp.SwitchHeaderSource",
						"group": "other1_navigation@1"
					},
					{
						"when": "editorLangId == c",
						"command": "C_Cpp.Navigate",
						"group": "other1_navigation@2"
					},
					{
						"when": "editorLangId == cpp",
						"command": "C_Cpp.Navigate",
						"group": "other1_navigation@2"
					},
					{
						"when": "editorLangId == c",
						"command": "workbench.action.gotoSymbol",
						"group": "other1_navigation@3"
					},
					{
						"when": "editorLangId == cpp",
						"command": "workbench.action.gotoSymbol",
						"group": "other1_navigation@3"
					},
					{
						"when": "editorLangId == c",
						"command": "workbench.action.showAllSymbols",
						"group": "other1_navigation@4"
					},
					{
						"when": "editorLangId == cpp",
						"command": "workbench.action.showAllSymbols",
						"group": "other1_navigation@4"
					},
					{
						"when": "editorLangId == cpp",
						"command": "C_Cpp.BuildAndDebugActiveFile",
						"group": "other2_debug@1"
					},
					{
						"when": "editorLangId == c",
						"command": "C_Cpp.BuildAndDebugActiveFile",
						"group": "other2_debug@1"
					}
				]
			},
			"configurationDefaults": {
				"[cpp]": {
					"editor.wordBasedSuggestions": false
				},
				"[c]": {
					"editor.wordBasedSuggestions": false
				}
			}
		},
		"scripts": {
			"compile": "npm run vscode:prepublish",
			"compileDev": "webpack --mode development",
			"generateOptionsSchema": "gulp generateOptionsSchema",
			"postinstall": "node ./node_modules/vscode/bin/install",
			"pretest": "tsc -p test.tsconfig.json",
			"pr-check": "gulp pr-check",
			"tslint": "gulp tslint",
			"unitTests": "gulp unitTests",
			"vscode:prepublish": "node ./tools/prepublish.js && webpack --mode production",
			"watch": "webpack --watch --mode development"
		},
		"devDependencies": {
			"@types/mocha": "^5.2.6",
			"@types/node": "^12.0.0",
			"async-child-process": "^1.1.1",
			"await-notify": "^1.0.1",
			"gulp": "^4.0.2",
			"gulp-env": "^0.4.0",
			"gulp-mocha": "^6.0.0",
			"gulp-tslint": "^8.1.4",
			"tslint": "^5.16.0",
			"tslint-microsoft-contrib": "^6.1.1",
			"tslint-no-unused-expression-chai": "^0.1.4",
			"ts-loader": "^6.0.0",
			"typescript": "^3.4.5",
			"vrsource-tslint-rules": "^6.0.0",
			"vscode": "^1.1.34",
			"webpack": "^4.30.0",
			"webpack-cli": "^3.3.2"
		},
		"dependencies": {
			"@types/minimatch": "^3.0.3",
			"escape-string-regexp": "^2.0.0",
			"http-proxy-agent": "^2.1.0",
			"https-proxy-agent": "^2.2.1",
			"jsonc-parser": "^2.1.0",
			"minimatch": "^3.0.4",
			"mkdirp": "^0.5.1",
			"tmp": "^0.1.0",
			"vscode-cpptools": "^2.1.2",
			"vscode-debugadapter": "^1.34.0",
			"vscode-debugprotocol": "^1.34.0",
			"vscode-extension-telemetry": "^0.1.1",
			"vscode-languageclient": "^5.2.1",
			"yauzl": "^2.10.0"
		},
		"runtimeDependencies": [
			{
				"description": "C/C++ language components (Linux / x86_64)",
				"url": "https://go.microsoft.com/fwlink/?linkid=2092043",
				"platforms": [
					"linux"
				],
				"architectures": [
					"x86_64"
				],
				"binaries": [
					"./bin/Microsoft.VSCode.CPP.Extension.linux",
					"./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"
				]
			},
			{
				"description": "C/C++ language components (Linux / x86)",
				"url": "https://go.microsoft.com/fwlink/?linkid=2092112",
				"platforms": [
					"linux"
				],
				"architectures": [
					"x86",
					"i686",
					"i386"
				],
				"binaries": [
					"./bin/Microsoft.VSCode.CPP.Extension.linux",
					"./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.linux"
				]
			},
			{
				"description": "C/C++ language components (OS X)",
				"url": "https://go.microsoft.com/fwlink/?linkid=2092042",
				"platforms": [
					"darwin"
				],
				"binaries": [
					"./bin/Microsoft.VSCode.CPP.Extension.darwin",
					"./bin/Microsoft.VSCode.CPP.IntelliSense.Msvc.darwin"
				]
			},
			{
				"description": "C/C++ language components (Windows)",
				"url": "https://go.microsoft.com/fwlink/?linkid=2092111",
				"platforms": [
					"win32"
				],
				"binaries": []
			},
			{
				"description": "ClangFormat (Linux / x86_64)",
				"url": "https://go.microsoft.com/fwlink/?LinkID=872607",
				"platforms": [
					"linux"
				],
				"architectures": [
					"x86_64"
				],
				"binaries": [
					"./LLVM/bin/clang-format"
				]
			},
			{
				"description": "ClangFormat (Linux / x86)",
				"url": "https://go.microsoft.com/fwlink/?LinkID=872608",
				"platforms": [
					"linux"
				],
				"architectures": [
					"x86",
					"i686",
					"i386"
				],
				"binaries": [
					"./LLVM/bin/clang-format"
				]
			},
			{
				"description": "ClangFormat (OS X)",
				"url": "https://go.microsoft.com/fwlink/?LinkID=872609",
				"platforms": [
					"darwin"
				],
				"binaries": [
					"./LLVM/bin/clang-format.darwin"
				]
			},
			{
				"description": "ClangFormat (Windows)",
				"url": "https://go.microsoft.com/fwlink/?LinkID=872610",
				"platforms": [
					"win32"
				],
				"binaries": []
			},
			{
				"description": "Mono Framework Assemblies",
				"url": "https://go.microsoft.com/fwlink/?LinkId=2027135",
				"platforms": [
					"linux",
					"darwin"
				],
				"binaries": []
			},
			{
				"description": "Mono Runtime (Linux / x86)",
				"url": "https://go.microsoft.com/fwlink/?LinkId=2027410",
				"platforms": [
					"linux"
				],
				"architectures": [
					"x86",
					"i686",
					"i386"
				],
				"binaries": [
					"./debugAdapters/mono.linux-x86"
				]
			},
			{
				"description": "Mono Runtime (Linux / x86_64)",
				"url": "https://go.microsoft.com/fwlink/?LinkId=2027416",
				"platforms": [
					"linux"
				],
				"architectures": [
					"x86_64"
				],
				"binaries": [
					"./debugAdapters/mono.linux-x86_64"
				]
			},
			{
				"description": "Mono Runtime (OS X)",
				"url": "https://go.microsoft.com/fwlink/?LinkId=2027403",
				"platforms": [
					"darwin"
				],
				"binaries": [
					"./debugAdapters/mono.osx"
				]
			},
			{
				"description": "LLDB 3.8.0 (OS X)",
				"url": "https://go.microsoft.com/fwlink/?LinkID=817244",
				"platforms": [
					"darwin"
				],
				"binaries": [
					"./debugAdapters/lldb/bin/debugserver",
					"./debugAdapters/lldb/bin/lldb-mi",
					"./debugAdapters/lldb/bin/lldb-argdumper",
					"./debugAdapters/lldb/bin/lldb-launcher"
				]
			},
			{
				"description": "Visual Studio Windows Debugger",
				"url": "https://go.microsoft.com/fwlink/?linkid=2082216",
				"platforms": [
					"win32"
				],
				"binaries": []
			}
		],
		"__metadata": {
			"id": "690b692e-e8a9-493f-b802-8089d50ac1b2",
			"publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",
			"publisherDisplayName": "Microsoft"
		}
	},
	{
		"name": "gitlens",
		"displayName": "GitLens — Git supercharged",
		"description": "Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more",
		"version": "9.8.2",
		"author": {
			"name": "Eric Amodio",
			"email": "eamodio@gmail.com"
		},
		"publisher": "eamodio",
		"license": "SEE LICENSE IN LICENSE",
		"homepage": "https://github.com/eamodio/vscode-gitlens/blob/master/README.md",
		"bugs": {
			"url": "https://github.com/eamodio/vscode-gitlens/issues"
		},
		"repository": {
			"type": "git",
			"url": "https://github.com/eamodio/vscode-gitlens.git"
		},
		"engines": {
			"vscode": "^1.31.0"
		},
		"main": "./dist/extension",
		"icon": "images/gitlens-icon.png",
		"preview": false,
		"badges": [
			{
				"url": "https://img.shields.io/badge/vscode--dev--community-gitlens-blue.svg?logo=slack",
				"href": "https://vscode-slack.amod.io",
				"description": "Join us in the #gitlens channel"
			}
		],
		"categories": [
			"Other"
		],
		"galleryBanner": {
			"color": "#8647ae",
			"theme": "dark"
		},
		"keywords": [
			"gitlens",
			"git",
			"blame",
			"log",
			"annotation",
			"multi-root ready"
		],
		"activationEvents": [
			"*"
		],
		"contributes": {
			"configuration": {
				"type": "object",
				"title": "GitLens",
				"properties": {
					"gitlens.blame.avatars": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show avatar images in the gutter blame annotations",
						"scope": "window"
					},
					"gitlens.blame.compact": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations",
						"scope": "window"
					},
					"gitlens.blame.dateFormat": {
						"type": "string",
						"default": null,
						"markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
						"scope": "window"
					},
					"gitlens.blame.format": {
						"type": "string",
						"default": "${message|40?} ${agoOrDate|14-}",
						"markdownDescription": "Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.blame.dateFormat#` setting",
						"scope": "window"
					},
					"gitlens.blame.heatmap.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide a heatmap indicator in the gutter blame annotations",
						"scope": "window"
					},
					"gitlens.blame.heatmap.location": {
						"type": "string",
						"default": "right",
						"enum": [
							"left",
							"right"
						],
						"enumDescriptions": [
							"Adds a heatmap indicator on the left edge of the gutter blame annotations",
							"Adds a heatmap indicator on the right edge of the gutter blame annotations"
						],
						"markdownDescription": "Specifies where the heatmap indicators will be shown in the gutter blame annotations",
						"scope": "window"
					},
					"gitlens.blame.highlight.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to highlight lines associated with the current line",
						"scope": "window"
					},
					"gitlens.blame.highlight.locations": {
						"type": "array",
						"default": [
							"gutter",
							"line",
							"overview"
						],
						"items": {
							"type": "string",
							"enum": [
								"gutter",
								"line",
								"overview"
							],
							"enumDescriptions": [
								"Adds a gutter glyph",
								"Adds a full-line highlight background color",
								"Adds a decoration to the overview ruler (scroll bar)"
							]
						},
						"minItems": 1,
						"maxItems": 3,
						"uniqueItems": true,
						"markdownDescription": "Specifies where the associated line highlights will be shown",
						"scope": "window"
					},
					"gitlens.blame.ignoreWhitespace": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Specifies whether to ignore whitespace when comparing revisions during blame operations",
						"scope": "resource"
					},
					"gitlens.blame.separateLines": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether gutter blame annotations will be separated by a small gap",
						"scope": "window"
					},
					"gitlens.blame.toggleMode": {
						"type": "string",
						"default": "file",
						"enum": [
							"file",
							"window"
						],
						"enumDescriptions": [
							"Toggles each file individually",
							"Toggles the window, i.e. all files at once"
						],
						"markdownDescription": "Specifies how the gutter blame annotations will be toggled",
						"scope": "window"
					},
					"gitlens.codeLens.authors.command": {
						"type": "string",
						"default": "gitlens.toggleFileBlame",
						"enum": [
							"gitlens.toggleFileBlame",
							"gitlens.diffWithPrevious",
							"gitlens.showQuickCommitDetails",
							"gitlens.showQuickCommitFileDetails",
							"gitlens.showQuickFileHistory",
							"gitlens.showQuickRepoHistory"
						],
						"enumDescriptions": [
							"Toggles file blame annotations",
							"Compares the current committed file with the previous commit",
							"Shows a commit details quick pick",
							"Shows a commit file details quick pick",
							"Shows a file history quick pick",
							"Shows a branch history quick pick"
						],
						"markdownDescription": "Specifies the command to be executed when an _authors_ code lens is clicked",
						"scope": "window"
					},
					"gitlens.codeLens.authors.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)",
						"scope": "window"
					},
					"gitlens.codeLens.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window",
						"scope": "window"
					},
					"gitlens.codeLens.includeSingleLineSymbols": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Specifies whether to provide any Git code lens on symbols that span only a single line",
						"scope": "window"
					},
					"gitlens.codeLens.recentChange.command": {
						"type": "string",
						"default": "gitlens.showQuickCommitFileDetails",
						"enum": [
							"gitlens.toggleFileBlame",
							"gitlens.diffWithPrevious",
							"gitlens.showQuickCommitDetails",
							"gitlens.showQuickCommitFileDetails",
							"gitlens.showQuickFileHistory",
							"gitlens.showQuickRepoHistory"
						],
						"enumDescriptions": [
							"Toggles file blame annotations",
							"Compares the current committed file with the previous commit",
							"Shows a commit details quick pick",
							"Shows a commit file details quick pick",
							"Shows a file history quick pick",
							"Shows a branch history quick pick"
						],
						"markdownDescription": "Specifies the command to be executed when a _recent change_ code lens is clicked",
						"scope": "window"
					},
					"gitlens.codeLens.recentChange.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block",
						"scope": "window"
					},
					"gitlens.codeLens.scopes": {
						"type": "array",
						"default": [
							"document",
							"containers"
						],
						"items": {
							"type": "string",
							"enum": [
								"document",
								"containers",
								"blocks"
							],
							"enumDescriptions": [
								"Adds code lens at the top of the document",
								"Adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)",
								"Adds code lens at the start of block-like symbols (functions, methods, etc) lines"
							]
						},
						"minItems": 1,
						"maxItems": 4,
						"uniqueItems": true,
						"markdownDescription": "Specifies where Git code lens will be shown in the document",
						"scope": "resource"
					},
					"gitlens.codeLens.scopesByLanguage": {
						"type": "array",
						"default": [
							{
								"language": "azure-pipelines",
								"scopes": [
									"document"
								]
							},
							{
								"language": "css",
								"scopes": [
									"document"
								]
							},
							{
								"language": "html",
								"scopes": [
									"document"
								]
							},
							{
								"language": "json",
								"scopes": [
									"document"
								]
							},
							{
								"language": "jsonc",
								"scopes": [
									"document"
								]
							},
							{
								"language": "less",
								"scopes": [
									"document"
								]
							},
							{
								"language": "postcss",
								"scopes": [
									"document"
								]
							},
							{
								"language": "python",
								"symbolScopes": [
									"!Module"
								]
							},
							{
								"language": "scss",
								"scopes": [
									"document"
								]
							},
							{
								"language": "stylus",
								"scopes": [
									"document"
								]
							},
							{
								"language": "vue",
								"scopes": [
									"document"
								]
							},
							{
								"language": "yaml",
								"scopes": [
									"document"
								]
							}
						],
						"items": {
							"type": "object",
							"required": [
								"language"
							],
							"properties": {
								"language": {
									"type": "string",
									"description": "Specifies the language to which this code lens override applies"
								},
								"scopes": {
									"type": "array",
									"default": [
										"document",
										"containers"
									],
									"items": {
										"type": "string",
										"enum": [
											"document",
											"containers",
											"blocks",
											"custom"
										],
										"enumDescriptions": [
											"Adds code lens at the top of the document",
											"Adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)",
											"Adds code lens at the start of block-like symbols (functions, methods, properties, etc) lines",
											"Adds code lens at the start of symbols contained in `symbolScopes`"
										]
									},
									"minItems": 1,
									"maxItems": 4,
									"uniqueItems": true,
									"description": "Specifies where Git code lens will be shown in the document for the specified language"
								},
								"symbolScopes": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"uniqueItems": true,
									"description": "Specifies the set of document symbols where Git code lens will be shown in the document for the specified language. Must be a member of `SymbolKind`"
								}
							}
						},
						"uniqueItems": true,
						"markdownDescription": "Specifies where Git code lens will be shown in the document for the specified languages",
						"scope": "resource"
					},
					"gitlens.codeLens.symbolScopes": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"uniqueItems": true,
						"markdownDescription": "Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`",
						"scope": "resource"
					},
					"gitlens.currentLine.dateFormat": {
						"type": "string",
						"default": null,
						"markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
						"scope": "window"
					},
					"gitlens.currentLine.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window",
						"scope": "window"
					},
					"gitlens.currentLine.format": {
						"type": "string",
						"default": "${author}, ${agoOrDate} • ${message}",
						"markdownDescription": "Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.currentLine.dateFormat#` setting",
						"scope": "window"
					},
					"gitlens.currentLine.scrollable": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport",
						"scope": "window"
					},
					"gitlens.debug": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Specifies debug mode",
						"scope": "window"
					},
					"gitlens.defaultDateFormat": {
						"type": "string",
						"default": null,
						"markdownDescription": "Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
						"scope": "window"
					},
					"gitlens.defaultDateShortFormat": {
						"type": "string",
						"default": null,
						"markdownDescription": "Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
						"scope": "window"
					},
					"gitlens.defaultDateSource": {
						"type": "string",
						"default": "authored",
						"enum": [
							"authored",
							"committed"
						],
						"enumDescriptions": [
							"Uses the date when the changes were authored (i.e. originally written)",
							"Uses the date when the changes were committed"
						],
						"markdownDescription": "Specifies whether commit dates should use the authored or committed date",
						"scope": "window"
					},
					"gitlens.defaultDateStyle": {
						"type": "string",
						"default": "relative",
						"enum": [
							"relative",
							"absolute"
						],
						"enumDescriptions": [
							"e.g. 1 day ago",
							"e.g. July 25th, 2018 7:18pm"
						],
						"markdownDescription": "Specifies how dates will be displayed by default",
						"scope": "window"
					},
					"gitlens.defaultGravatarsStyle": {
						"type": "string",
						"default": "robohash",
						"enum": [
							"identicon",
							"mp",
							"monsterid",
							"retro",
							"robohash",
							"wavatar"
						],
						"enumDescriptions": [
							"A geometric pattern",
							"A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)",
							"A monster with different colors, faces, etc",
							"8-bit arcade-style pixelated faces",
							"A robot with different colors, faces, etc",
							"A face with differing features and backgrounds"
						],
						"markdownDescription": "Specifies the style of the gravatar default (fallback) images",
						"scope": "window"
					},
					"gitlens.heatmap.ageThreshold": {
						"type": "string",
						"default": "90",
						"markdownDescription": "Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `#gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor#`)",
						"scope": "window"
					},
					"gitlens.heatmap.coldColor": {
						"type": "string",
						"default": "#0a60f6",
						"markdownDescription": "Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `#gitlens.heatmap.ageThreshold#` value",
						"scope": "window"
					},
					"gitlens.heatmap.hotColor": {
						"type": "string",
						"default": "#f66a0a",
						"markdownDescription": "Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `#gitlens.heatmap.ageThreshold#` value",
						"scope": "window"
					},
					"gitlens.heatmap.toggleMode": {
						"type": "string",
						"default": "file",
						"enum": [
							"file",
							"window"
						],
						"enumDescriptions": [
							"Toggles each file individually",
							"Toggles the window, i.e. all files at once"
						],
						"markdownDescription": "Specifies how the gutter heatmap annotations will be toggled",
						"scope": "window"
					},
					"gitlens.hovers.annotations.changes": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations",
						"scope": "window"
					},
					"gitlens.hovers.annotations.details": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations",
						"scope": "window"
					},
					"gitlens.hovers.annotations.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide any hovers when showing blame annotations",
						"scope": "window"
					},
					"gitlens.hovers.annotations.over": {
						"type": "string",
						"default": "line",
						"enum": [
							"annotation",
							"line"
						],
						"enumDescriptions": [
							"Only shown when hovering over the line annotation",
							"Shown when hovering anywhere over the line"
						],
						"markdownDescription": "Specifies when to trigger hovers when showing blame annotations",
						"scope": "window"
					},
					"gitlens.hovers.currentLine.changes": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide a _changes (diff)_ hover for the current line",
						"scope": "window"
					},
					"gitlens.hovers.currentLine.details": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide a _commit details_ hover for the current line",
						"scope": "window"
					},
					"gitlens.hovers.currentLine.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide any hovers for the current line",
						"scope": "window"
					},
					"gitlens.hovers.currentLine.over": {
						"type": "string",
						"default": "annotation",
						"enum": [
							"annotation",
							"line"
						],
						"enumDescriptions": [
							"Only shown when hovering over the line annotation",
							"Shown when hovering anywhere over the line"
						],
						"markdownDescription": "Specifies when to trigger hovers for the current line",
						"scope": "window"
					},
					"gitlens.hovers.avatars": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show avatar images in hovers",
						"scope": "window"
					},
					"gitlens.hovers.changesDiff": {
						"type": "string",
						"default": "line",
						"enum": [
							"line",
							"hunk"
						],
						"enumDescriptions": [
							"Shows only the changes to the line",
							"Shows the set of related changes"
						],
						"markdownDescription": "Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover",
						"scope": "window"
					},
					"gitlens.hovers.detailsMarkdownFormat": {
						"type": "string",
						"default": "${avatar} &nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}\n\n${commands}",
						"markdownDescription": "Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.hovers.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide any hovers",
						"scope": "window"
					},
					"gitlens.insiders": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Specifies whether to enable experimental features",
						"scope": "window"
					},
					"gitlens.keymap": {
						"type": "string",
						"default": "chorded",
						"enum": [
							"alternate",
							"chorded",
							"none"
						],
						"enumDescriptions": [
							"Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)",
							"Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)",
							"No shortcut keys will be added"
						],
						"markdownDescription": "Specifies the keymap to use for GitLens shortcut keys",
						"scope": "window"
					},
					"gitlens.liveshare.allowGuestAccess": {
						"type": "boolean",
						"default": true,
						"description": "Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share",
						"scope": "window"
					},
					"gitlens.menus": {
						"anyOf": [
							{
								"enum": [
									false
								]
							},
							{
								"type": "object",
								"properties": {
									"editor": {
										"anyOf": [
											{
												"enum": [
													false
												]
											},
											{
												"type": "object",
												"properties": {
													"blame": {
														"type": "boolean"
													},
													"clipboard": {
														"type": "boolean"
													},
													"compare": {
														"type": "boolean"
													},
													"details": {
														"type": "boolean"
													},
													"history": {
														"type": "boolean"
													},
													"remote": {
														"type": "boolean"
													}
												}
											}
										]
									},
									"editorGroup": {
										"anyOf": [
											{
												"enum": [
													false
												]
											},
											{
												"type": "object",
												"properties": {
													"blame": {
														"type": "boolean"
													},
													"compare": {
														"type": "boolean"
													}
												}
											}
										]
									},
									"editorTab": {
										"anyOf": [
											{
												"enum": [
													false
												]
											},
											{
												"type": "object",
												"properties": {
													"clipboard": {
														"type": "boolean"
													},
													"compare": {
														"type": "boolean"
													},
													"history": {
														"type": "boolean"
													},
													"remote": {
														"type": "boolean"
													}
												}
											}
										]
									},
									"explorer": {
										"anyOf": [
											{
												"enum": [
													false
												]
											},
											{
												"type": "object",
												"properties": {
													"clipboard": {
														"type": "boolean"
													},
													"compare": {
														"type": "boolean"
													},
													"history": {
														"type": "boolean"
													},
													"remote": {
														"type": "boolean"
													}
												}
											}
										]
									},
									"scmGroup": {
										"anyOf": [
											{
												"enum": [
													false
												]
											},
											{
												"type": "object",
												"properties": {
													"compare": {
														"type": "boolean"
													},
													"openClose": {
														"type": "boolean"
													},
													"stash": {
														"type": "boolean"
													},
													"stashInline": {
														"type": "boolean"
													}
												}
											}
										]
									},
									"scmItem": {
										"anyOf": [
											{
												"enum": [
													false
												]
											},
											{
												"type": "object",
												"properties": {
													"clipboard": {
														"type": "boolean"
													},
													"compare": {
														"type": "boolean"
													},
													"history": {
														"type": "boolean"
													},
													"remote": {
														"type": "boolean"
													},
													"stash": {
														"type": "boolean"
													}
												}
											}
										]
									}
								}
							}
						],
						"default": {
							"editor": {
								"blame": false,
								"clipboard": true,
								"compare": true,
								"details": false,
								"history": false,
								"remote": false
							},
							"editorGroup": {
								"blame": true,
								"compare": true
							},
							"editorTab": {
								"clipboard": true,
								"compare": true,
								"history": true,
								"remote": true
							},
							"explorer": {
								"clipboard": true,
								"compare": true,
								"history": true,
								"remote": true
							},
							"scmGroup": {
								"compare": true,
								"openClose": true,
								"stash": true,
								"stashInline": true
							},
							"scmItem": {
								"clipboard": true,
								"compare": true,
								"history": true,
								"remote": true,
								"stash": true
							}
						},
						"markdownDescription": "Specifies which commands will be added to which menus",
						"scope": "window"
					},
					"gitlens.mode.active": {
						"type": "string",
						"markdownDescription": "Specifies the active GitLens mode, if any",
						"scope": "window"
					},
					"gitlens.mode.statusBar.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide the active GitLens mode in the status bar",
						"scope": "window"
					},
					"gitlens.mode.statusBar.alignment": {
						"type": "string",
						"default": "right",
						"enum": [
							"left",
							"right"
						],
						"enumDescriptions": [
							"Aligns to the left",
							"Aligns to the right"
						],
						"markdownDescription": "Specifies the active GitLens mode alignment in the status bar",
						"scope": "window"
					},
					"gitlens.modes": {
						"type": "object",
						"properties": {
							"zen": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"description": "Specifies the friendly name of this user-defined mode"
									},
									"statusBarItemName": {
										"type": "string",
										"description": "Specifies the name shown in the status bar when this user-defined mode is active"
									},
									"description": {
										"type": "string",
										"description": "Specifies the description of this user-defined mode"
									},
									"codeLens": {
										"type": "boolean",
										"description": "Specifies whether to show any Git code lens when this user-defined mode is active"
									},
									"currentLine": {
										"type": "boolean",
										"description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active"
									},
									"hovers": {
										"type": "boolean",
										"description": "Specifies whether to show any hovers when this user-defined mode is active"
									},
									"statusBar": {
										"type": "boolean",
										"description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
									},
									"views": {
										"type": "boolean",
										"description": "Specifies whether to show any GitLens views when this user-defined mode is active"
									}
								}
							},
							"review": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"description": "Specifies the friendly name of this user-defined mode"
									},
									"statusBarItemName": {
										"type": "string",
										"description": "Specifies the name shown in the status bar when this user-defined mode is active"
									},
									"description": {
										"type": "string",
										"description": "Specifies the description of this user-defined mode"
									},
									"codeLens": {
										"type": "boolean",
										"description": "Specifies whether to show any Git code lens when this user-defined mode is active"
									},
									"currentLine": {
										"type": "boolean",
										"description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active"
									},
									"hovers": {
										"type": "boolean",
										"description": "Specifies whether to show any hovers when this user-defined mode is active"
									},
									"statusBar": {
										"type": "boolean",
										"description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
									},
									"views": {
										"type": "boolean",
										"description": "Specifies whether to show any GitLens views when this user-defined mode is active"
									}
								}
							}
						},
						"additionalProperties": {
							"type": "object",
							"required": [
								"name"
							],
							"properties": {
								"name": {
									"type": "string",
									"description": "Specifies the friendly name of this user-defined mode"
								},
								"statusBarItemName": {
									"type": "string",
									"description": "Specifies the name shown in the status bar when this user-defined mode is active"
								},
								"description": {
									"type": "string",
									"description": "Specifies the description of this user-defined mode"
								},
								"annotations": {
									"type": "string",
									"enum": [
										"blame",
										"heatmap",
										"recentChanges"
									],
									"enumDescriptions": [
										"Shows the gutter blame annotations",
										"Shows the gutter heatmap annotations",
										"Shows the recently changed lines annotations"
									],
									"description": "Specifies which (if any) file annotations will be shown when this user-defined mode is active"
								},
								"codeLens": {
									"type": "boolean",
									"description": "Specifies whether to show any Git code lens when this user-defined mode is active"
								},
								"currentLine": {
									"type": "boolean",
									"description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active"
								},
								"hovers": {
									"type": "boolean",
									"description": "Specifies whether to show any hovers when this user-defined mode is active"
								},
								"statusBar": {
									"type": "boolean",
									"description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
								},
								"views": {
									"type": "boolean",
									"description": "Specifies whether to show any GitLens views when this user-defined mode is active"
								}
							}
						},
						"default": {
							"zen": {
								"name": "Zen",
								"statusBarItemName": "Zen",
								"description": "for a zen-like experience, disables many visual features",
								"codeLens": false,
								"currentLine": false,
								"hovers": false,
								"statusBar": false
							},
							"review": {
								"name": "Review",
								"statusBarItemName": "Reviewing",
								"description": "for reviewing code, enables many visual features",
								"codeLens": true,
								"currentLine": true,
								"hovers": true
							}
						},
						"markdownDescription": "Specifies the user-defined GitLens modes",
						"scope": "window"
					},
					"gitlens.outputLevel": {
						"type": "string",
						"default": "errors",
						"enum": [
							"silent",
							"errors",
							"verbose",
							"debug"
						],
						"enumDescriptions": [
							"Logs nothing",
							"Logs only errors",
							"Logs all errors, warnings, and messages",
							"Logs all errors, warnings, and messages with extra context useful for debugging"
						],
						"markdownDescription": "Specifies how much (if any) output will be sent to the GitLens output channel",
						"scope": "window"
					},
					"gitlens.recentChanges.highlight.locations": {
						"type": "array",
						"default": [
							"gutter",
							"line",
							"overview"
						],
						"items": {
							"type": "string",
							"enum": [
								"gutter",
								"line",
								"overview"
							],
							"enumDescriptions": [
								"Adds a gutter glyph",
								"Adds a full-line highlight background color",
								"Adds a decoration to the overview ruler (scroll bar)"
							]
						},
						"minItems": 1,
						"maxItems": 3,
						"uniqueItems": true,
						"markdownDescription": "Specifies where the highlights of the recently changed lines will be shown",
						"scope": "window"
					},
					"gitlens.recentChanges.toggleMode": {
						"type": "string",
						"default": "file",
						"enum": [
							"file",
							"window"
						],
						"enumDescriptions": [
							"Toggles each file individually",
							"Toggles the window, i.e. all files at once"
						],
						"markdownDescription": "Specifies how the recently changed lines annotations will be toggled",
						"scope": "window"
					},
					"gitlens.remotes": {
						"type": "array",
						"default": null,
						"items": {
							"type": "object",
							"required": [
								"type",
								"domain"
							],
							"properties": {
								"type": {
									"type": "string",
									"enum": [
										"Bitbucket",
										"BitbucketServer",
										"Custom",
										"GitHub",
										"GitLab"
									],
									"description": "Specifies the type of the custom remote service"
								},
								"domain": {
									"type": "string",
									"description": "Specifies the domain name of the custom remote service"
								},
								"name": {
									"type": "string",
									"description": "Specifies an optional friendly name for the custom remote service"
								},
								"protocol": {
									"type": "string",
									"default": "https",
									"description": "Specifies an optional url protocol for the custom remote service"
								},
								"urls": {
									"type": "object",
									"required": [
										"repository",
										"branches",
										"branch",
										"commit",
										"file",
										"fileInCommit",
										"fileInBranch",
										"fileLine",
										"fileRange"
									],
									"properties": {
										"repository": {
											"type": "string",
											"description": "Specifies the format of a respository url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path"
										},
										"branches": {
											"type": "string",
											"description": "Specifies the format of a branches url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${branch}` &mdash; branch"
										},
										"branch": {
											"type": "string",
											"description": "Specifies the format of a branch url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${branch}` &mdash; branch"
										},
										"commit": {
											"type": "string",
											"description": "Specifies the format of a commit url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${id}` &mdash; commit id"
										},
										"file": {
											"type": "string",
											"description": "Specifies the format of a file url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${file}` &mdash; file name\n ${line}` &mdash; formatted line information"
										},
										"fileInBranch": {
											"type": "string",
											"description": "Specifies the format of a branch file url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${file}` &mdash; file name\n ${branch}` &mdash; branch\n ${line}` &mdash; formatted line information"
										},
										"fileInCommit": {
											"type": "string",
											"description": "Specifies the format of a commit file url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${file}` &mdash; file name\n ${id}` &mdash; commit id\n ${line}` &mdash; formatted line information"
										},
										"fileLine": {
											"type": "string",
											"description": "Specifies the format of a line in a file url for the custom remote service\nAvailable tokens\n ${line}` &mdash; line"
										},
										"fileRange": {
											"type": "string",
											"description": "Specifies the format of a range in a file url for the custom remote service\nAvailable tokens\n ${start}` &mdash; starting line\n ${end}` &mdash; ending line"
										}
									}
								},
								"description": "Specifies the url formats of the custom remote service"
							}
						},
						"uniqueItems": true,
						"markdownDescription": "Specifies user-defined remote (code-hosting) services or custom domains for built-in remote services",
						"scope": "resource"
					},
					"gitlens.settings.mode": {
						"type": "string",
						"default": "simple",
						"enum": [
							"simple",
							"advanced"
						],
						"enumDescriptions": [
							"Only displays common settings",
							"Displays all settings"
						],
						"markdownDescription": "Specifies the display mode of the interactive settings editor",
						"scope": "window"
					},
					"gitlens.showWhatsNewAfterUpgrades": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show What's New after upgrading to new feature releases",
						"scope": "window"
					},
					"gitlens.statusBar.alignment": {
						"type": "string",
						"default": "right",
						"enum": [
							"left",
							"right"
						],
						"enumDescriptions": [
							"Aligns to the left",
							"Aligns to the right"
						],
						"markdownDescription": "Specifies the blame alignment in the status bar",
						"scope": "window"
					},
					"gitlens.statusBar.command": {
						"type": "string",
						"default": "gitlens.showQuickCommitDetails",
						"enum": [
							"gitlens.toggleFileBlame",
							"gitlens.diffWithPrevious",
							"gitlens.diffWithWorking",
							"gitlens.toggleCodeLens",
							"gitlens.showQuickCommitDetails",
							"gitlens.showQuickCommitFileDetails",
							"gitlens.showQuickFileHistory",
							"gitlens.showQuickRepoHistory"
						],
						"enumDescriptions": [
							"Toggles file blame annotations",
							"Compares the current line commit with the previous",
							"Compares the current line commit with the working tree",
							"Toggles Git code lens",
							"Shows a commit details quick pick",
							"Shows a commit file details quick pick",
							"Shows a file history quick pick",
							"Shows a branch history quick pick"
						],
						"markdownDescription": "Specifies the command to be executed when the blame status bar item is clicked",
						"scope": "window"
					},
					"gitlens.statusBar.dateFormat": {
						"type": "string",
						"default": null,
						"markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
						"scope": "window"
					},
					"gitlens.statusBar.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to provide blame information in the status bar",
						"scope": "window"
					},
					"gitlens.statusBar.format": {
						"type": "string",
						"default": "${author}, ${agoOrDate}",
						"markdownDescription": "Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.statusBar.dateFormat#` setting",
						"scope": "window"
					},
					"gitlens.statusBar.reduceFlicker": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar \"flashing\"",
						"scope": "window"
					},
					"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": {
						"type": "string",
						"default": "Unsaved changes (cannot determine recent change or authors)",
						"markdownDescription": "Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes",
						"scope": "window"
					},
					"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": {
						"type": "string",
						"default": "Unsaved changes (cannot determine recent change)",
						"markdownDescription": "Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes",
						"scope": "window"
					},
					"gitlens.strings.codeLens.unsavedChanges.authorsOnly": {
						"type": "string",
						"default": "Unsaved changes (cannot determine authors)",
						"markdownDescription": "Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes",
						"scope": "window"
					},
					"gitlens.views.commitFileFormat": {
						"type": "string",
						"default": "${file}",
						"markdownDescription": "Specifies the format of a committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.commitFileDescriptionFormat": {
						"type": "string",
						"default": "${directory}${  ←  originalPath}",
						"markdownDescription": "Specifies the description format of a committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.commitFormat": {
						"type": "string",
						"default": "${message}",
						"markdownDescription": "Specifies the format of committed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.commitDescriptionFormat": {
						"type": "string",
						"default": "${changes  •  }${author}, ${agoOrDate}",
						"markdownDescription": "Specifies the description format of committed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.compare.avatars": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Compare_ view",
						"scope": "window"
					},
					"gitlens.views.compare.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show the _Compare_ view",
						"scope": "window"
					},
					"gitlens.views.compare.files.compact": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Compare_ view. Only applies when `#gitlens.views.compare.files.layout#` is set to `tree` or `auto`",
						"scope": "window"
					},
					"gitlens.views.compare.files.layout": {
						"type": "string",
						"default": "auto",
						"enum": [
							"auto",
							"list",
							"tree"
						],
						"enumDescriptions": [
							"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.compare.files.threshold#` value and the number of files at each nesting level",
							"Displays files as a list",
							"Displays files as a tree"
						],
						"markdownDescription": "Specifies how the _Compare_ view will display files",
						"scope": "window"
					},
					"gitlens.views.compare.files.threshold": {
						"type": "number",
						"default": 5,
						"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Compare_ view. Only applies when `#gitlens.views.compare.files.layout#` is set to `auto`",
						"scope": "window"
					},
					"gitlens.views.compare.location": {
						"type": "string",
						"default": "gitlens",
						"enum": [
							"gitlens",
							"explorer",
							"scm"
						],
						"enumDescriptions": [
							"Adds to the GitLens side bar",
							"Adds to the Explorer side bar",
							"Adds to the Source Control side bar"
						],
						"markdownDescription": "Specifies where to show the _Compare_ view",
						"scope": "window"
					},
					"gitlens.views.defaultItemLimit": {
						"type": "number",
						"default": 10,
						"markdownDescription": "Specifies the default number of items to show in a view list. Use 0 to specify no limit",
						"scope": "window"
					},
					"gitlens.views.pageItemLimit": {
						"type": "number",
						"default": 20,
						"markdownDescription": "Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit",
						"scope": "window"
					},
					"gitlens.views.fileHistory.avatars": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show avatar images instead of status icons in the _File History_ view",
						"scope": "window"
					},
					"gitlens.views.fileHistory.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show the _File History_ view",
						"scope": "window"
					},
					"gitlens.views.fileHistory.location": {
						"type": "string",
						"default": "gitlens",
						"enum": [
							"gitlens",
							"explorer",
							"scm"
						],
						"enumDescriptions": [
							"Adds to the GitLens side bar",
							"Adds to the Explorer side bar",
							"Adds to the Source Control side bar"
						],
						"markdownDescription": "Specifies where to show the _File History_ view",
						"scope": "window"
					},
					"gitlens.views.lineHistory.avatars": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show avatar images instead of status icons in the _Line History_ view",
						"scope": "window"
					},
					"gitlens.views.lineHistory.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show the _Line History_ view",
						"scope": "window"
					},
					"gitlens.views.lineHistory.location": {
						"type": "string",
						"default": "gitlens",
						"enum": [
							"gitlens",
							"explorer",
							"scm"
						],
						"enumDescriptions": [
							"Adds to the GitLens side bar",
							"Adds to the Explorer side bar",
							"Adds to the Source Control side bar"
						],
						"markdownDescription": "Specifies where to show the _Line History_ view",
						"scope": "window"
					},
					"gitlens.views.repositories.autoRefresh": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes",
						"scope": "window"
					},
					"gitlens.views.repositories.autoReveal": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files",
						"scope": "window"
					},
					"gitlens.views.repositories.avatars": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view",
						"scope": "window"
					},
					"gitlens.views.repositories.branches.layout": {
						"type": "string",
						"default": "tree",
						"enum": [
							"list",
							"tree"
						],
						"enumDescriptions": [
							"Displays branches as a list",
							"Displays branches as a tree when branch names contain slashes `/`"
						],
						"markdownDescription": "Specifies how the _Repositories_ view will display branches",
						"scope": "window"
					},
					"gitlens.views.repositories.compact": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Specifies whether to show the _Repositories_ view in a compact display density",
						"scope": "window"
					},
					"gitlens.views.repositories.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show the _Repositories_ view",
						"scope": "window"
					},
					"gitlens.views.repositories.files.compact": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `#gitlens.views.repositories.files.layout#` is set to `tree` or `auto`",
						"scope": "window"
					},
					"gitlens.views.repositories.files.layout": {
						"type": "string",
						"default": "auto",
						"enum": [
							"auto",
							"list",
							"tree"
						],
						"enumDescriptions": [
							"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.repositories.files.threshold#` value and the number of files at each nesting level",
							"Displays files as a list",
							"Displays files as a tree"
						],
						"markdownDescription": "Specifies how the _Repositories_ view will display files",
						"scope": "window"
					},
					"gitlens.views.repositories.files.threshold": {
						"type": "number",
						"default": 5,
						"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `#gitlens.views.repositories.files.layout#` is set to `auto`",
						"scope": "window"
					},
					"gitlens.views.repositories.includeWorkingTree": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to include working tree file status for each repository in the _Repositories_ view",
						"scope": "window"
					},
					"gitlens.views.repositories.location": {
						"type": "string",
						"default": "gitlens",
						"enum": [
							"gitlens",
							"explorer",
							"scm"
						],
						"enumDescriptions": [
							"Adds to the GitLens side bar",
							"Adds to the Explorer side bar",
							"Adds to the Source Control side bar"
						],
						"markdownDescription": "Specifies where to show the _Repositories_ view",
						"scope": "window"
					},
					"gitlens.views.repositories.showBranchComparison": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show a comparison of the current branch to a user-selected reference in the _Repositories_ view",
						"scope": "window"
					},
					"gitlens.views.repositories.showTrackingBranch": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show the tracking branch when displaying local branches in the _Repositories_ view",
						"scope": "window"
					},
					"gitlens.views.search.avatars": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Search Commits_ view",
						"scope": "window"
					},
					"gitlens.views.search.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show the _Search Commits_ view",
						"scope": "window"
					},
					"gitlens.views.search.files.compact": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Search Commits_ view. Only applies when `#gitlens.views.search.files.layout#` is set to `tree` or `auto`",
						"scope": "window"
					},
					"gitlens.views.search.files.layout": {
						"type": "string",
						"default": "auto",
						"enum": [
							"auto",
							"list",
							"tree"
						],
						"enumDescriptions": [
							"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.search.files.threshold#` value and the number of files at each nesting level",
							"Displays files as a list",
							"Displays files as a tree"
						],
						"markdownDescription": "Specifies how the _Search Commits_ view will display files",
						"scope": "window"
					},
					"gitlens.views.search.files.threshold": {
						"type": "number",
						"default": 5,
						"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search Commits_ view. Only applies when `#gitlens.views.search.files.layout#` is set to `auto`",
						"scope": "window"
					},
					"gitlens.views.search.location": {
						"type": "string",
						"default": "gitlens",
						"enum": [
							"gitlens",
							"explorer",
							"scm"
						],
						"enumDescriptions": [
							"Adds to the GitLens side bar",
							"Adds to the Explorer side bar",
							"Adds to the Source Control side bar"
						],
						"markdownDescription": "Specifies where to show the _Search Commits_ view",
						"scope": "window"
					},
					"gitlens.views.showRelativeDateMarkers": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views",
						"scope": "window"
					},
					"gitlens.views.stashFileFormat": {
						"type": "string",
						"default": "${file}",
						"markdownDescription": "Specifies the format of a stashed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.stashFileDescriptionFormat": {
						"type": "string",
						"default": "${directory}${  ←  originalPath}",
						"markdownDescription": "Specifies the description format of a stashed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.stashFormat": {
						"type": "string",
						"default": "${message}",
						"markdownDescription": "Specifies the format of stashed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.stashDescriptionFormat": {
						"type": "string",
						"default": "${changes  •  }${agoOrDate}",
						"markdownDescription": "Specifies the description format of stashed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.statusFileFormat": {
						"type": "string",
						"default": "${working  }${file}",
						"markdownDescription": "Specifies the format of the status of a working or committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.views.statusFileDescriptionFormat": {
						"type": "string",
						"default": "${directory}${  ←  originalPath}",
						"markdownDescription": "Specifies the description format of the status of a working or committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
						"scope": "window"
					},
					"gitlens.advanced.abbreviatedShaLength": {
						"type": "number",
						"default": "7",
						"markdownDescription": "Specifies the length of abbreviated commit ids (shas)",
						"scope": "window"
					},
					"gitlens.advanced.blame.customArguments": {
						"type": "array",
						"default": null,
						"items": {
							"type": "string"
						},
						"markdownDescription": "Specifies additional arguments to pass to the `git blame` command",
						"scope": "resource"
					},
					"gitlens.advanced.blame.delayAfterEdit": {
						"type": "number",
						"default": 5000,
						"markdownDescription": "Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait",
						"scope": "window"
					},
					"gitlens.advanced.blame.sizeThresholdAfterEdit": {
						"type": "number",
						"default": 5000,
						"markdownDescription": "Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum",
						"scope": "window"
					},
					"gitlens.advanced.caching.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether git output will be cached — changing the default is not recommended",
						"scope": "window"
					},
					"gitlens.advanced.fileHistoryFollowsRenames": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether file histories will follow renames — will affect how merge commits are shown in histories",
						"scope": "window"
					},
					"gitlens.advanced.maxListItems": {
						"type": "number",
						"default": 200,
						"markdownDescription": "Specifies the maximum number of items to show in a list. Use 0 to specify no maximum",
						"scope": "window"
					},
					"gitlens.advanced.maxSearchItems": {
						"type": "number",
						"default": 200,
						"markdownDescription": "Specifies the maximum number of items to show in a search. Use 0 to specify no maximum",
						"scope": "window"
					},
					"gitlens.advanced.messages": {
						"type": "object",
						"default": {
							"suppressCommitHasNoPreviousCommitWarning": false,
							"suppressCommitNotFoundWarning": false,
							"suppressFileNotUnderSourceControlWarning": false,
							"suppressGitDisabledWarning": false,
							"suppressGitVersionWarning": false,
							"suppressLineUncommittedWarning": false,
							"suppressNoRepositoryWarning": false,
							"suppressSupportGitLensNotification": false
						},
						"properties": {
							"suppressCommitHasNoPreviousCommitWarning": {
								"type": "boolean",
								"default": false
							},
							"suppressCommitNotFoundWarning": {
								"type": "boolean",
								"default": false
							},
							"suppressFileNotUnderSourceControlWarning": {
								"type": "boolean",
								"default": false
							},
							"suppressGitDisabledWarning": {
								"type": "boolean",
								"default": false
							},
							"suppressGitVersionWarning": {
								"type": "boolean",
								"default": false
							},
							"suppressLineUncommittedWarning": {
								"type": "boolean",
								"default": false
							},
							"suppressNoRepositoryWarning": {
								"type": "boolean",
								"default": false
							},
							"suppressSupportGitLensNotification": {
								"type": "boolean",
								"default": false
							}
						},
						"markdownDescription": "Specifies which messages should be suppressed",
						"scope": "window"
					},
					"gitlens.advanced.quickPick.closeOnFocusOut": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to close QuickPick menus when focus is lost",
						"scope": "window"
					},
					"gitlens.advanced.repositorySearchDepth": {
						"type": "number",
						"default": 1,
						"markdownDescription": "Specifies how many folders deep to search for repositories",
						"scope": "resource"
					},
					"gitlens.advanced.similarityThreshold": {
						"type": "number",
						"default": null,
						"markdownDescription": "Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename",
						"scope": "window"
					},
					"gitlens.advanced.telemetry.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to enable GitLens telemetry (even if enabled still abides by the overall `#telemetry.enableTelemetry#` setting",
						"scope": "window"
					},
					"gitlens.advanced.useSymmetricDifferenceNotation": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "Specifies whether to use the symmetric difference (three-dot) notation or the range (two-dot) notation for comparisions. See the [Git docs](https://git-scm.com/docs/gitrevisions#_dotted_range_notations)",
						"scope": "window"
					}
				}
			},
			"colors": [
				{
					"id": "gitlens.gutterBackgroundColor",
					"description": "Specifies the background color of the gutter blame annotations",
					"defaults": {
						"dark": "#FFFFFF13",
						"light": "#0000000C",
						"highContrast": "#FFFFFF13"
					}
				},
				{
					"id": "gitlens.gutterForegroundColor",
					"description": "Specifies the foreground color of the gutter blame annotations",
					"defaults": {
						"dark": "#BEBEBE",
						"light": "#747474",
						"highContrast": "#BEBEBE"
					}
				},
				{
					"id": "gitlens.gutterUncommittedForegroundColor",
					"description": "Specifies the foreground color of an uncommitted line in the gutter blame annotations",
					"defaults": {
						"dark": "#00BCF299",
						"light": "#00BCF299",
						"highContrast": "#00BCF2FF"
					}
				},
				{
					"id": "gitlens.trailingLineBackgroundColor",
					"description": "Specifies the background color of the blame annotation for the current line",
					"defaults": {
						"dark": "#00000000",
						"light": "#00000000",
						"highContrast": "#00000000"
					}
				},
				{
					"id": "gitlens.trailingLineForegroundColor",
					"description": "Specifies the foreground color of the blame annotation for the current line",
					"defaults": {
						"dark": "#99999959",
						"light": "#99999959",
						"highContrast": "#99999999"
					}
				},
				{
					"id": "gitlens.lineHighlightBackgroundColor",
					"description": "Specifies the background color of the associated line highlights in blame annotations",
					"defaults": {
						"dark": "#00BCF233",
						"light": "#00BCF233",
						"highContrast": "#00BCF233"
					}
				},
				{
					"id": "gitlens.lineHighlightOverviewRulerColor",
					"description": "Specifies the overview ruler color of the associated line highlights in blame annotations",
					"defaults": {
						"dark": "#00BCF299",
						"light": "#00BCF299",
						"highContrast": "#00BCF299"
					}
				}
			],
			"commands": [
				{
					"command": "gitlens.supportGitLens",
					"title": "Support GitLens ❤",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-heart.svg",
						"light": "images/light/icon-heart.svg"
					}
				},
				{
					"command": "gitlens.showSettingsPage",
					"title": "Open Settings",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-gear.svg",
						"light": "images/light/icon-gear.svg"
					}
				},
				{
					"command": "gitlens.showSettingsPage#repositories-view",
					"title": "Open Settings",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-gear.svg",
						"light": "images/light/icon-gear.svg"
					}
				},
				{
					"command": "gitlens.showSettingsPage#file-history-view",
					"title": "Open Settings",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-gear.svg",
						"light": "images/light/icon-gear.svg"
					}
				},
				{
					"command": "gitlens.showSettingsPage#line-history-view",
					"title": "Open Settings",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-gear.svg",
						"light": "images/light/icon-gear.svg"
					}
				},
				{
					"command": "gitlens.showSettingsPage#search-commits-view",
					"title": "Open Settings",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-gear.svg",
						"light": "images/light/icon-gear.svg"
					}
				},
				{
					"command": "gitlens.showSettingsPage#compare-view",
					"title": "Open Settings",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-gear.svg",
						"light": "images/light/icon-gear.svg"
					}
				},
				{
					"command": "gitlens.showWelcomePage",
					"title": "Welcome",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showCompareView",
					"title": "Show Compare View",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showFileHistoryView",
					"title": "Show File History View",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showLineHistoryView",
					"title": "Show Line History View",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showRepositoriesView",
					"title": "Show Repositories View",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showSearchView",
					"title": "Show Search Commits View",
					"category": "GitLens"
				},
				{
					"command": "gitlens.diffDirectory",
					"title": "Directory Compare Working Tree with...",
					"category": "GitLens"
				},
				{
					"command": "gitlens.diffDirectoryWithHead",
					"title": "Directory Compare All Changes",
					"category": "GitLens"
				},
				{
					"command": "gitlens.diffHeadWith",
					"title": "Compare HEAD with...",
					"category": "GitLens"
				},
				{
					"command": "gitlens.diffWorkingWith",
					"title": "Compare Working Tree with...",
					"category": "GitLens"
				},
				{
					"command": "gitlens.diffWithRef",
					"title": "Open Changes with...",
					"category": "GitLens"
				},
				{
					"command": "gitlens.diffWithNext",
					"title": "Open Changes with Next Revision",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-next-commit.svg",
						"light": "images/light/icon-next-commit.svg"
					}
				},
				{
					"command": "gitlens.diffWithNextInDiff",
					"title": "Open Changes with Next Revision",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-next-commit.svg",
						"light": "images/light/icon-next-commit.svg"
					}
				},
				{
					"command": "gitlens.diffWithPrevious",
					"title": "Open Changes with Previous Revision",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-prev-commit.svg",
						"light": "images/light/icon-prev-commit.svg"
					}
				},
				{
					"command": "gitlens.diffWithPreviousInDiff",
					"title": "Open Changes with Previous Revision",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-prev-commit.svg",
						"light": "images/light/icon-prev-commit.svg"
					}
				},
				{
					"command": "gitlens.diffLineWithPrevious",
					"title": "Open Line Changes with Previous Revision",
					"category": "GitLens"
				},
				{
					"command": "gitlens.diffWithRevision",
					"title": "Open Changes with Revision...",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-prev-commit-menu.svg",
						"light": "images/light/icon-prev-commit-menu.svg"
					}
				},
				{
					"command": "gitlens.diffWithWorking",
					"title": "Open Changes with Working File",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-compare-ref-working.svg",
						"light": "images/light/icon-compare-ref-working.svg"
					}
				},
				{
					"command": "gitlens.diffWithWorkingInDiff",
					"title": "Open Changes with Working File",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-compare-ref-working.svg",
						"light": "images/light/icon-compare-ref-working.svg"
					}
				},
				{
					"command": "gitlens.diffLineWithWorking",
					"title": "Open Line Changes with Working File",
					"category": "GitLens"
				},
				{
					"command": "gitlens.toggleFileBlame",
					"title": "Toggle File Blame Annotations",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-git.svg",
						"light": "images/light/icon-git.svg"
					}
				},
				{
					"command": "gitlens.clearFileAnnotations",
					"title": "Clear File Annotations",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-git-orange.svg",
						"light": "images/light/icon-git-orange.svg"
					}
				},
				{
					"command": "gitlens.computingFileAnnotations",
					"title": "Computing File Annotations...",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-git-progress.svg",
						"light": "images/light/icon-git-progress.svg"
					}
				},
				{
					"command": "gitlens.toggleFileHeatmap",
					"title": "Toggle File Heatmap Annotations",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-git.svg",
						"light": "images/light/icon-git.svg"
					}
				},
				{
					"command": "gitlens.toggleFileRecentChanges",
					"title": "Toggle Recent File Changes Annotations",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-git.svg",
						"light": "images/light/icon-git.svg"
					}
				},
				{
					"command": "gitlens.toggleLineBlame",
					"title": "Toggle Line Blame Annotations",
					"category": "GitLens"
				},
				{
					"command": "gitlens.toggleCodeLens",
					"title": "Toggle Git Code Lens",
					"category": "GitLens"
				},
				{
					"command": "gitlens.switchMode",
					"title": "Switch Mode",
					"category": "GitLens"
				},
				{
					"command": "gitlens.toggleReviewMode",
					"title": "Toggle Review Mode",
					"category": "GitLens"
				},
				{
					"command": "gitlens.toggleZenMode",
					"title": "Toggle Zen Mode",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showCommitSearch",
					"title": "Search Commits",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-search.svg",
						"light": "images/light/icon-search.svg"
					}
				},
				{
					"command": "gitlens.showLastQuickPick",
					"title": "Show Last Opened Quick Pick",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showCommitInView",
					"title": "Show Commit in View",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showFileHistoryInView",
					"title": "Show File History in View",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showQuickCommitDetails",
					"title": "Show Commit Details",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showQuickCommitFileDetails",
					"title": "Show Commit Details",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showQuickRevisionDetails",
					"title": "Show Revision Details",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-commit.svg",
						"light": "images/light/icon-commit.svg"
					}
				},
				{
					"command": "gitlens.showQuickFileHistory",
					"title": "Show File History",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showQuickBranchHistory",
					"title": "Show Branch History",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showQuickRepoHistory",
					"title": "Show Current Branch History",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showQuickRepoStatus",
					"title": "Show Repository Status",
					"category": "GitLens"
				},
				{
					"command": "gitlens.showQuickStashList",
					"title": "Show Stashed Changes",
					"category": "GitLens"
				},
				{
					"command": "gitlens.copyMessageToClipboard",
					"title": "Copy Commit Message to Clipboard",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-clipboard.svg",
						"light": "images/light/icon-clipboard.svg"
					}
				},
				{
					"command": "gitlens.copyRemoteFileUrlToClipboard",
					"title": "Copy Remote Url to Clipboard",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-copy-remote.svg",
						"light": "images/light/icon-copy-remote.svg"
					}
				},
				{
					"command": "gitlens.copyShaToClipboard",
					"title": "Copy Commit ID to Clipboard",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-copy-commit.svg",
						"light": "images/light/icon-copy-commit.svg"
					}
				},
				{
					"command": "gitlens.closeUnchangedFiles",
					"title": "Close Unchanged Files",
					"category": "GitLens"
				},
				{
					"command": "gitlens.openChangedFiles",
					"title": "Open Changed Files",
					"category": "GitLens"
				},
				{
					"command": "gitlens.openBranchesInRemote",
					"title": "Open Branches on Remote",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-link.svg",
						"light": "images/light/icon-link.svg"
					}
				},
				{
					"command": "gitlens.openBranchInRemote",
					"title": "Open Branch on Remote",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-link.svg",
						"light": "images/light/icon-link.svg"
					}
				},
				{
					"command": "gitlens.openCommitInRemote",
					"title": "Open Commit on Remote",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-link.svg",
						"light": "images/light/icon-link.svg"
					}
				},
				{
					"command": "gitlens.openFileInRemote",
					"title": "Open File on Remote",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-link.svg",
						"light": "images/light/icon-link.svg"
					}
				},
				{
					"command": "gitlens.openFileRevision",
					"title": "Open Revision...",
					"category": "GitLens"
				},
				{
					"command": "gitlens.openFileRevisionFrom",
					"title": "Open Revision from...",
					"category": "GitLens"
				},
				{
					"command": "gitlens.openRepoInRemote",
					"title": "Open Repository on Remote",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-link.svg",
						"light": "images/light/icon-link.svg"
					}
				},
				{
					"command": "gitlens.openWorkingFile",
					"title": "Open Working File",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-open-working-file.svg",
						"light": "images/light/icon-open-working-file.svg"
					}
				},
				{
					"command": "gitlens.stashApply",
					"title": "Apply Stashed Changes",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-stash-pop.svg",
						"light": "images/light/icon-stash-pop.svg"
					}
				},
				{
					"command": "gitlens.stashDelete",
					"title": "Delete Stashed Changes",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-delete.svg",
						"light": "images/light/icon-delete.svg"
					}
				},
				{
					"command": "gitlens.stashSave",
					"title": "Stash All Changes",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-stash-save.svg",
						"light": "images/light/icon-stash-save.svg"
					}
				},
				{
					"command": "gitlens.stashSaveFiles",
					"title": "Stash Changes",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-stash-save.svg",
						"light": "images/light/icon-stash-save.svg"
					}
				},
				{
					"command": "gitlens.externalDiff",
					"title": "Open Changes (with difftool)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.externalDiffAll",
					"title": "Open All Changes (with difftool)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.resetSuppressedWarnings",
					"title": "Reset Suppressed Warnings",
					"category": "GitLens"
				},
				{
					"command": "gitlens.inviteToLiveShare",
					"title": "Invite to Live Share",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-vsls.svg",
						"light": "images/light/icon-vsls.svg"
					}
				},
				{
					"command": "gitlens.views.exploreRepoRevision",
					"title": "Explore Repository from Here",
					"category": "GitLens"
				},
				{
					"command": "gitlens.fetchRepositories",
					"title": "Fetch Repositories",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-sync.svg",
						"light": "images/light/icon-sync.svg"
					}
				},
				{
					"command": "gitlens.pullRepositories",
					"title": "Pull Repositories",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-pull.svg",
						"light": "images/light/icon-pull.svg"
					}
				},
				{
					"command": "gitlens.pushRepositories",
					"title": "Push Repositories",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-push.svg",
						"light": "images/light/icon-push.svg"
					}
				},
				{
					"command": "gitlens.views.checkout",
					"title": "Checkout",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-checkout.svg",
						"light": "images/light/icon-checkout.svg"
					}
				},
				{
					"command": "gitlens.views.fetch",
					"title": "Fetch",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-sync.svg",
						"light": "images/light/icon-sync.svg"
					}
				},
				{
					"command": "gitlens.views.pull",
					"title": "Pull",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-pull.svg",
						"light": "images/light/icon-pull.svg"
					}
				},
				{
					"command": "gitlens.views.push",
					"title": "Push",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-push.svg",
						"light": "images/light/icon-push.svg"
					}
				},
				{
					"command": "gitlens.views.pushWithForce",
					"title": "Push (force)",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-push-force.svg",
						"light": "images/light/icon-push-force.svg"
					}
				},
				{
					"command": "gitlens.views.openInTerminal",
					"title": "Open in Terminal",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.setAsDefault",
					"title": "Set as Default",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.unsetAsDefault",
					"title": "Unset as Default",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.stageDirectory",
					"title": "Stage All Changes",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-add.svg",
						"light": "images/light/icon-add.svg"
					}
				},
				{
					"command": "gitlens.views.stageFile",
					"title": "Stage Changes",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-add.svg",
						"light": "images/light/icon-add.svg"
					}
				},
				{
					"command": "gitlens.views.unstageDirectory",
					"title": "Unstage All Changes",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-minus.svg",
						"light": "images/light/icon-minus.svg"
					}
				},
				{
					"command": "gitlens.views.unstageFile",
					"title": "Unstage Changes",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-minus.svg",
						"light": "images/light/icon-minus.svg"
					}
				},
				{
					"command": "gitlens.views.star",
					"title": "Add to Favorites",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-star.svg",
						"light": "images/light/icon-star.svg"
					}
				},
				{
					"command": "gitlens.views.unstar",
					"title": "Remove from Favorites",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-star-filled.svg",
						"light": "images/light/icon-star-filled.svg"
					}
				},
				{
					"command": "gitlens.views.openDirectoryDiff",
					"title": "Open Directory Compare",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.openDirectoryDiffWithWorking",
					"title": "Open Directory Compare with Working Tree",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.openChanges",
					"title": "Open Changes",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.openChangesWithWorking",
					"title": "Open Changes with Working File",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.openFile",
					"title": "Open File",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-open-file.svg",
						"light": "images/light/icon-open-file.svg"
					}
				},
				{
					"command": "gitlens.views.openFileRevision",
					"title": "Open Revision",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.openFileRevisionInRemote",
					"title": "Open Revision on Remote",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-link.svg",
						"light": "images/light/icon-link.svg"
					}
				},
				{
					"command": "gitlens.views.openChangedFiles",
					"title": "Open Files",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.openChangedFileChanges",
					"title": "Open All Changes",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.openChangedFileChangesWithWorking",
					"title": "Open All Changes with Working Tree",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.openChangedFileRevisions",
					"title": "Open Revisions",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.applyChanges",
					"title": "Apply Changes",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.closeRepository",
					"title": "Close Repository",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.compareAncestryWithWorking",
					"title": "Compare Ancestry with Working Tree",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.compareWithHead",
					"title": "Compare with HEAD",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-compare-refs.svg",
						"light": "images/light/icon-compare-refs.svg"
					}
				},
				{
					"command": "gitlens.views.compareWithRemote",
					"title": "Compare with Remote",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-compare-ref-remote.svg",
						"light": "images/light/icon-compare-ref-remote.svg"
					}
				},
				{
					"command": "gitlens.views.compareWithSelected",
					"title": "Compare with Selected",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.selectForCompare",
					"title": "Select for Compare",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.compareFileWithSelected",
					"title": "Compare with Selected",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.selectFileForCompare",
					"title": "Select for Compare",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.compareWithWorking",
					"title": "Compare with Working Tree",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-compare-ref-working.svg",
						"light": "images/light/icon-compare-ref-working.svg"
					}
				},
				{
					"command": "gitlens.views.contributor.addCoauthoredBy",
					"title": "Add as Co-author",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.contributor.copyToClipboard",
					"title": "Copy to Clipboard",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-clipboard.svg",
						"light": "images/light/icon-clipboard.svg"
					}
				},
				{
					"command": "gitlens.views.terminalCheckoutBranch",
					"title": "Checkout Branch (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalCreateBranch",
					"title": "Create Branch (via Terminal)...",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalDeleteBranch",
					"title": "Delete Branch (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalMergeBranch",
					"title": "Merge Branch (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalRebaseBranch",
					"title": "Rebase (Interactive) Branch (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalRebaseBranchToRemote",
					"title": "Rebase (Interactive) Branch to Remote (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalSquashBranchIntoCommit",
					"title": "Squash Branch into Commit (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalCheckoutCommit",
					"title": "Checkout Commit (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalCherryPickCommit",
					"title": "Cherry Pick Commit (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalPushCommit",
					"title": "Push to Commit (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalRebaseCommit",
					"title": "Rebase to Commit (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalResetCommit",
					"title": "Reset to Commit (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalRevertCommit",
					"title": "Revert Commit (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalRemoveRemote",
					"title": "Remove Remote (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalCreateTag",
					"title": "Create Tag (via Terminal)...",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.terminalDeleteTag",
					"title": "Delete Tag (via Terminal)",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.repositories.refresh",
					"title": "Refresh",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-refresh.svg",
						"light": "images/light/icon-refresh.svg"
					}
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToAuto",
					"title": "Automatic Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToList",
					"title": "List Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToTree",
					"title": "Tree Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.repositories.setAutoRefreshToOn",
					"title": "Enable Automatic Refresh",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.repositories.setAutoRefreshToOff",
					"title": "Disable Automatic Refresh",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.fileHistory.refresh",
					"title": "Refresh",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-refresh.svg",
						"light": "images/light/icon-refresh.svg"
					}
				},
				{
					"command": "gitlens.views.fileHistory.changeBase",
					"title": "Change Base...",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-history.svg",
						"light": "images/light/icon-history.svg"
					}
				},
				{
					"command": "gitlens.views.fileHistory.setEditorFollowingOn",
					"title": "Resume File Tracking",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-location.svg",
						"light": "images/light/icon-location.svg"
					}
				},
				{
					"command": "gitlens.views.fileHistory.setEditorFollowingOff",
					"title": "Pause File Tracking",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-location-filled.svg",
						"light": "images/light/icon-location-filled.svg"
					}
				},
				{
					"command": "gitlens.views.fileHistory.setRenameFollowingOn",
					"title": "Follow Renames",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.fileHistory.setRenameFollowingOff",
					"title": "Don't Follow Renames",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.lineHistory.refresh",
					"title": "Refresh",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-refresh.svg",
						"light": "images/light/icon-refresh.svg"
					}
				},
				{
					"command": "gitlens.views.lineHistory.changeBase",
					"title": "Change Base...",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-history.svg",
						"light": "images/light/icon-history.svg"
					}
				},
				{
					"command": "gitlens.views.lineHistory.setEditorFollowingOn",
					"title": "Resume Line Tracking",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-location.svg",
						"light": "images/light/icon-location.svg"
					}
				},
				{
					"command": "gitlens.views.lineHistory.setEditorFollowingOff",
					"title": "Pause Line Tracking",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-location-filled.svg",
						"light": "images/light/icon-location-filled.svg"
					}
				},
				{
					"command": "gitlens.views.lineHistory.setRenameFollowingOn",
					"title": "Follow Renames",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.lineHistory.setRenameFollowingOff",
					"title": "Don't Follow Renames",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.compare.selectForCompare",
					"title": "Compare References...",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-compare-refs.svg",
						"light": "images/light/icon-compare-refs.svg"
					}
				},
				{
					"command": "gitlens.views.compare.clear",
					"title": "Clear Results",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-clear.svg",
						"light": "images/light/icon-clear.svg"
					}
				},
				{
					"command": "gitlens.views.compare.refresh",
					"title": "Refresh",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-refresh.svg",
						"light": "images/light/icon-refresh.svg"
					}
				},
				{
					"command": "gitlens.views.compare.setFilesLayoutToAuto",
					"title": "Automatic Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.compare.setFilesLayoutToList",
					"title": "List Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.compare.setFilesLayoutToTree",
					"title": "Tree Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.compare.setKeepResultsToOn",
					"title": "Keep Results",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-lock.svg",
						"light": "images/light/icon-lock.svg"
					}
				},
				{
					"command": "gitlens.views.compare.setKeepResultsToOff",
					"title": "Keep Results",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-locked.svg",
						"light": "images/light/icon-locked.svg"
					}
				},
				{
					"command": "gitlens.views.compare.pinComparison",
					"title": "Pin Comparison",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-pin-tilted.svg",
						"light": "images/light/icon-pin-tilted.svg"
					}
				},
				{
					"command": "gitlens.views.compare.unpinComparison",
					"title": "Unpin Comparison",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-pin-filled.svg",
						"light": "images/light/icon-pin-filled.svg"
					}
				},
				{
					"command": "gitlens.views.compare.swapComparison",
					"title": "Swap Comparison",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-swap.svg",
						"light": "images/light/icon-swap.svg"
					}
				},
				{
					"command": "gitlens.views.search.searchCommits",
					"title": "Search Commits",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-search.svg",
						"light": "images/light/icon-search.svg"
					}
				},
				{
					"command": "gitlens.views.search.clear",
					"title": "Clear Results",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-clear.svg",
						"light": "images/light/icon-clear.svg"
					}
				},
				{
					"command": "gitlens.views.search.refresh",
					"title": "Refresh",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-refresh.svg",
						"light": "images/light/icon-refresh.svg"
					}
				},
				{
					"command": "gitlens.views.search.setFilesLayoutToAuto",
					"title": "Automatic Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.search.setFilesLayoutToList",
					"title": "List Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.search.setFilesLayoutToTree",
					"title": "Tree Layout",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.search.setKeepResultsToOn",
					"title": "Keep Results",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-lock.svg",
						"light": "images/light/icon-lock.svg"
					}
				},
				{
					"command": "gitlens.views.search.setKeepResultsToOff",
					"title": "Keep Results",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-locked.svg",
						"light": "images/light/icon-locked.svg"
					}
				},
				{
					"command": "gitlens.views.dismissNode",
					"title": "Dismiss",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-close-small.svg",
						"light": "images/light/icon-close-small.svg"
					}
				},
				{
					"command": "gitlens.views.expandNode",
					"title": "Expand",
					"category": "GitLens"
				},
				{
					"command": "gitlens.views.refreshNode",
					"title": "Refresh",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-refresh.svg",
						"light": "images/light/icon-refresh.svg"
					}
				},
				{
					"command": "gitlens.views.showMoreChildren",
					"title": "Show More",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-unfold.svg",
						"light": "images/light/icon-unfold.svg"
					}
				},
				{
					"command": "gitlens.views.showAllChildren",
					"title": "Show All",
					"category": "GitLens",
					"icon": {
						"dark": "images/dark/icon-unfold.svg",
						"light": "images/light/icon-unfold.svg"
					}
				}
			],
			"menus": {
				"commandPalette": [
					{
						"command": "gitlens.showSettingsPage#repositories-view",
						"when": "false"
					},
					{
						"command": "gitlens.showSettingsPage#file-history-view",
						"when": "false"
					},
					{
						"command": "gitlens.showSettingsPage#line-history-view",
						"when": "false"
					},
					{
						"command": "gitlens.showSettingsPage#search-commits-view",
						"when": "false"
					},
					{
						"command": "gitlens.showSettingsPage#compare-view",
						"when": "false"
					},
					{
						"command": "gitlens.showCompareView",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showFileHistoryView",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showLineHistoryView",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showRepositoriesView",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showSearchView",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.diffDirectory",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.diffDirectoryWithHead",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.diffHeadWith",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.diffWorkingWith",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.diffWithRef",
						"when": "gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.diffWithNext",
						"when": "!isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
					},
					{
						"command": "gitlens.diffWithNextInDiff",
						"when": "isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
					},
					{
						"command": "gitlens.diffWithPrevious",
						"when": "!isInDiffEditor && gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.diffWithPreviousInDiff",
						"when": "isInDiffEditor && gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.diffLineWithPrevious",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.diffWithRevision",
						"when": "gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.diffWithWorking",
						"when": "!isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
					},
					{
						"command": "gitlens.diffWithWorkingInDiff",
						"when": "isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
					},
					{
						"command": "gitlens.diffLineWithWorking",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.externalDiff",
						"when": "gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.externalDiffAll",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.toggleFileBlame",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.clearFileAnnotations",
						"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:annotationStatus == computed"
					},
					{
						"command": "gitlens.computingFileAnnotations",
						"when": "false"
					},
					{
						"command": "gitlens.toggleFileHeatmap",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.toggleFileRecentChanges",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.toggleLineBlame",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.toggleCodeLens",
						"when": "gitlens:enabled && gitlens:canToggleCodeLens"
					},
					{
						"command": "gitlens.switchMode",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.toggleReviewMode",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.toggleZenMode",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showCommitSearch",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showLastQuickPick",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showCommitInView",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.showFileHistoryInView",
						"when": "gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.showQuickCommitDetails",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.showQuickCommitFileDetails",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.showQuickRevisionDetails",
						"when": "gitlens:activeFileStatus =~ /revision/"
					},
					{
						"command": "gitlens.showQuickFileHistory",
						"when": "gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.showQuickBranchHistory",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showQuickRepoHistory",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showQuickRepoStatus",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.showQuickStashList",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.copyMessageToClipboard",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.copyRemoteFileUrlToClipboard",
						"when": "gitlens:activeFileStatus =~ /tracked/ && gitlens:activeFileStatus =~ /remotes/"
					},
					{
						"command": "gitlens.copyShaToClipboard",
						"when": "gitlens:activeFileStatus =~ /blameable/"
					},
					{
						"command": "gitlens.closeUnchangedFiles",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.openChangedFiles",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.openBranchesInRemote",
						"when": "gitlens:hasRemotes"
					},
					{
						"command": "gitlens.openBranchInRemote",
						"when": "gitlens:hasRemotes"
					},
					{
						"command": "gitlens.openCommitInRemote",
						"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:activeFileStatus =~ /remotes/"
					},
					{
						"command": "gitlens.openFileInRemote",
						"when": "gitlens:activeFileStatus =~ /tracked/ && gitlens:activeFileStatus =~ /remotes/"
					},
					{
						"command": "gitlens.openFileRevision",
						"when": "gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.openFileRevisionFrom",
						"when": "gitlens:activeFileStatus =~ /tracked/"
					},
					{
						"command": "gitlens.openRepoInRemote",
						"when": "gitlens:hasRemotes"
					},
					{
						"command": "gitlens.openWorkingFile",
						"when": "gitlens:activeFileStatus =~ /revision/"
					},
					{
						"command": "gitlens.stashApply",
						"when": "gitlens:enabled && !gitlens:readonly"
					},
					{
						"command": "gitlens.stashDelete",
						"when": "false"
					},
					{
						"command": "gitlens.stashSave",
						"when": "gitlens:enabled && !gitlens:readonly"
					},
					{
						"command": "gitlens.stashSaveFiles",
						"when": "false"
					},
					{
						"command": "gitlens.resetSuppressedWarnings",
						"when": "gitlens:enabled"
					},
					{
						"command": "gitlens.inviteToLiveShare",
						"when": "false"
					},
					{
						"command": "gitlens.views.exploreRepoRevision",
						"when": "false"
					},
					{
						"command": "gitlens.fetchRepositories",
						"when": "gitlens:hasRemotes && !gitlens:readonly"
					},
					{
						"command": "gitlens.pullRepositories",
						"when": "gitlens:hasRemotes && !gitlens:readonly"
					},
					{
						"command": "gitlens.pushRepositories",
						"when": "gitlens:hasRemotes && !gitlens:readonly"
					},
					{
						"command": "gitlens.views.checkout",
						"when": "false"
					},
					{
						"command": "gitlens.views.fetch",
						"when": "false"
					},
					{
						"command": "gitlens.views.pull",
						"when": "false"
					},
					{
						"command": "gitlens.views.push",
						"when": "false"
					},
					{
						"command": "gitlens.views.pushWithForce",
						"when": "false"
					},
					{
						"command": "gitlens.views.openInTerminal",
						"when": "false"
					},
					{
						"command": "gitlens.views.setAsDefault",
						"when": "false"
					},
					{
						"command": "gitlens.views.unsetAsDefault",
						"when": "false"
					},
					{
						"command": "gitlens.views.stageDirectory",
						"when": "false"
					},
					{
						"command": "gitlens.views.stageFile",
						"when": "false"
					},
					{
						"command": "gitlens.views.unstageDirectory",
						"when": "false"
					},
					{
						"command": "gitlens.views.unstageFile",
						"when": "false"
					},
					{
						"command": "gitlens.views.star",
						"when": "false"
					},
					{
						"command": "gitlens.views.unstar",
						"when": "false"
					},
					{
						"command": "gitlens.views.openChanges",
						"when": "false"
					},
					{
						"command": "gitlens.views.openDirectoryDiff",
						"when": "false"
					},
					{
						"command": "gitlens.views.openDirectoryDiffWithWorking",
						"when": "false"
					},
					{
						"command": "gitlens.views.openChangesWithWorking",
						"when": "false"
					},
					{
						"command": "gitlens.views.openFile",
						"when": "false"
					},
					{
						"command": "gitlens.views.openFileRevision",
						"when": "false"
					},
					{
						"command": "gitlens.views.openFileRevisionInRemote",
						"when": "false"
					},
					{
						"command": "gitlens.views.openChangedFiles",
						"when": "false"
					},
					{
						"command": "gitlens.views.openChangedFileChanges",
						"when": "false"
					},
					{
						"command": "gitlens.views.openChangedFileChangesWithWorking",
						"when": "false"
					},
					{
						"command": "gitlens.views.openChangedFileRevisions",
						"when": "false"
					},
					{
						"command": "gitlens.views.applyChanges",
						"when": "false"
					},
					{
						"command": "gitlens.views.closeRepository",
						"when": "false"
					},
					{
						"command": "gitlens.views.compareAncestryWithWorking",
						"when": "false"
					},
					{
						"command": "gitlens.views.compareWithHead",
						"when": "false"
					},
					{
						"command": "gitlens.views.compareWithRemote",
						"when": "false"
					},
					{
						"command": "gitlens.views.compareWithSelected",
						"when": "false"
					},
					{
						"command": "gitlens.views.selectForCompare",
						"when": "false"
					},
					{
						"command": "gitlens.views.compareFileWithSelected",
						"when": "false"
					},
					{
						"command": "gitlens.views.selectFileForCompare",
						"when": "false"
					},
					{
						"command": "gitlens.views.compareWithWorking",
						"when": "false"
					},
					{
						"command": "gitlens.views.contributor.addCoauthoredBy",
						"when": "false"
					},
					{
						"command": "gitlens.views.contributor.copyToClipboard",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalCheckoutBranch",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalCreateBranch",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalDeleteBranch",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalMergeBranch",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalRebaseBranch",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalRebaseBranchToRemote",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalSquashBranchIntoCommit",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalCheckoutCommit",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalCherryPickCommit",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalPushCommit",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalRebaseCommit",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalResetCommit",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalRevertCommit",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalRemoveRemote",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalCreateTag",
						"when": "false"
					},
					{
						"command": "gitlens.views.terminalDeleteTag",
						"when": "false"
					},
					{
						"command": "gitlens.views.repositories.refresh",
						"when": "false"
					},
					{
						"command": "gitlens.views.repositories.setFilesLayoutToAuto",
						"when": "false"
					},
					{
						"command": "gitlens.views.repositories.setFilesLayoutToList",
						"when": "false"
					},
					{
						"command": "gitlens.views.repositories.setFilesLayoutToTree",
						"when": "false"
					},
					{
						"command": "gitlens.views.repositories.setAutoRefreshToOn",
						"when": "false"
					},
					{
						"command": "gitlens.views.repositories.setAutoRefreshToOff",
						"when": "false"
					},
					{
						"command": "gitlens.views.fileHistory.refresh",
						"when": "false"
					},
					{
						"command": "gitlens.views.fileHistory.changeBase",
						"when": "false"
					},
					{
						"command": "gitlens.views.fileHistory.setEditorFollowingOn",
						"when": "false"
					},
					{
						"command": "gitlens.views.fileHistory.setEditorFollowingOff",
						"when": "false"
					},
					{
						"command": "gitlens.views.fileHistory.setRenameFollowingOn",
						"when": "false"
					},
					{
						"command": "gitlens.views.fileHistory.setRenameFollowingOff",
						"when": "false"
					},
					{
						"command": "gitlens.views.lineHistory.refresh",
						"when": "false"
					},
					{
						"command": "gitlens.views.lineHistory.changeBase",
						"when": "false"
					},
					{
						"command": "gitlens.views.lineHistory.setEditorFollowingOn",
						"when": "false"
					},
					{
						"command": "gitlens.views.lineHistory.setEditorFollowingOff",
						"when": "false"
					},
					{
						"command": "gitlens.views.lineHistory.setRenameFollowingOn",
						"when": "false"
					},
					{
						"command": "gitlens.views.lineHistory.setRenameFollowingOff",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.selectForCompare",
						"when": "gitlens:enabled && config.gitlens.views.compare.enabled"
					},
					{
						"command": "gitlens.views.compare.clear",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.refresh",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.setFilesLayoutToAuto",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.setFilesLayoutToList",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.setFilesLayoutToTree",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.setKeepResultsToOn",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.setKeepResultsToOff",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.pinComparison",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.unpinComparison",
						"when": "false"
					},
					{
						"command": "gitlens.views.compare.swapComparison",
						"when": "false"
					},
					{
						"command": "gitlens.views.search.searchCommits",
						"when": "false"
					},
					{
						"command": "gitlens.views.search.clear",
						"when": "false"
					},
					{
						"command": "gitlens.views.search.refresh",
						"when": "false"
					},
					{
						"command": "gitlens.views.search.setFilesLayoutToAuto",
						"when": "false"
					},
					{
						"command": "gitlens.views.search.setFilesLayoutToList",
						"when": "false"
					},
					{
						"command": "gitlens.views.search.setFilesLayoutToTree",
						"when": "false"
					},
					{
						"command": "gitlens.views.search.setKeepResultsToOn",
						"when": "false"
					},
					{
						"command": "gitlens.views.search.setKeepResultsToOff",
						"when": "false"
					},
					{
						"command": "gitlens.views.dismissNode",
						"when": "false"
					},
					{
						"command": "gitlens.views.expandNode",
						"when": "false"
					},
					{
						"command": "gitlens.views.refreshNode",
						"when": "false"
					},
					{
						"command": "gitlens.views.showMoreChildren",
						"when": "false"
					},
					{
						"command": "gitlens.views.showAllChildren",
						"when": "false"
					}
				],
				"editor/context": [
					{
						"command": "gitlens.diffLineWithPrevious",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/ && config.gitlens.menus.editor.compare",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.diffLineWithWorking",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/ && config.gitlens.menus.editor.compare",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.openFileInRemote",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /remotes/ && config.gitlens.menus.editor.remote",
						"group": "1_gitlens_1@1"
					},
					{
						"command": "gitlens.openCommitInRemote",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /remotes/ && config.gitlens.menus.editor.remote",
						"group": "1_gitlens_1@2"
					},
					{
						"command": "gitlens.showQuickCommitFileDetails",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/ && config.gitlens.menus.editor.details",
						"group": "1_gitlens_1@3"
					},
					{
						"command": "gitlens.showQuickFileHistory",
						"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editor.history",
						"group": "3_gitlens@1"
					},
					{
						"command": "gitlens.showFileHistoryInView",
						"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editor.history",
						"group": "3_gitlens@2"
					},
					{
						"command": "gitlens.toggleFileBlame",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/ && config.gitlens.menus.editor.blame",
						"group": "3_gitlens@3"
					},
					{
						"command": "gitlens.copyShaToClipboard",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/ && config.gitlens.menus.editor.clipboard",
						"group": "9_b_gitlens@1"
					},
					{
						"command": "gitlens.copyMessageToClipboard",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/ && config.gitlens.menus.editor.clipboard",
						"group": "9_b_gitlens@2"
					},
					{
						"command": "gitlens.copyRemoteFileUrlToClipboard",
						"when": "editorTextFocus && gitlens:activeFileStatus =~ /remotes/ && config.gitlens.menus.editor.clipboard",
						"group": "9_b_gitlens@3"
					}
				],
				"editor/title": [
					{
						"command": "gitlens.diffWithWorking",
						"when": "!isInDiffEditor && gitlens:activeFileStatus =~ /revision/ && resourceScheme != file && resourceScheme != git",
						"group": "navigation@0"
					},
					{
						"command": "gitlens.diffWithWorkingInDiff",
						"when": "isInDiffEditor && gitlens:activeFileStatus =~ /revision/ && resourceScheme != file && resourceScheme != git",
						"group": "navigation@0"
					},
					{
						"command": "gitlens.openWorkingFile",
						"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != file && resourceScheme != git",
						"group": "navigation@0"
					},
					{
						"command": "gitlens.openWorkingFile",
						"when": "!gitlens:activeFileStatus =~ /revision/ && resourceScheme != file && resourceScheme != git && isInDiffEditor",
						"group": "navigation@0"
					},
					{
						"command": "gitlens.openWorkingFile",
						"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme == git && !isInDiffEditor",
						"group": "navigation@0"
					},
					{
						"command": "gitlens.diffWithPrevious",
						"alt": "gitlens.diffWithRevision",
						"when": "!isInDiffEditor && gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare",
						"group": "navigation@97"
					},
					{
						"command": "gitlens.diffWithPreviousInDiff",
						"alt": "gitlens.diffWithRevision",
						"when": "isInDiffEditor && gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare",
						"group": "navigation@97"
					},
					{
						"command": "gitlens.showQuickRevisionDetails",
						"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git && config.gitlens.menus.editorGroup.compare",
						"group": "navigation@98"
					},
					{
						"command": "gitlens.diffWithNext",
						"when": "!isInDiffEditor && gitlens:activeFileStatus =~ /revision/ && config.gitlens.menus.editorGroup.compare",
						"group": "navigation@99"
					},
					{
						"command": "gitlens.diffWithNextInDiff",
						"when": "isInDiffEditor && gitlens:activeFileStatus =~ /revision/ && config.gitlens.menus.editorGroup.compare",
						"group": "navigation@99"
					},
					{
						"command": "gitlens.toggleFileBlame",
						"alt": "gitlens.toggleFileHeatmap",
						"when": "gitlens:activeFileStatus =~ /blameable/ && !gitlens:annotationStatus && config.gitlens.menus.editorGroup.blame",
						"group": "navigation@100"
					},
					{
						"command": "gitlens.computingFileAnnotations",
						"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:annotationStatus == computing && config.gitlens.menus.editorGroup.blame",
						"group": "navigation@100"
					},
					{
						"command": "gitlens.clearFileAnnotations",
						"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:annotationStatus == computed && config.gitlens.menus.editorGroup.blame",
						"group": "navigation@100"
					}
				],
				"editor/title/context": [
					{
						"command": "gitlens.openWorkingFile",
						"when": "resourceScheme == gitlens",
						"group": "1_co_gitlens@1"
					},
					{
						"command": "gitlens.openFileInRemote",
						"when": "gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.editorTab.remote",
						"group": "1_co_gitlens@2"
					},
					{
						"command": "gitlens.diffWithPrevious",
						"when": "gitlens:enabled && config.gitlens.menus.editorTab.compare",
						"group": "1_co_gitlens_1@1"
					},
					{
						"command": "gitlens.diffWithRevision",
						"when": "gitlens:enabled && config.gitlens.menus.editorTab.compare",
						"group": "1_co_gitlens_1@2"
					},
					{
						"command": "gitlens.diffWithWorking",
						"when": "resourceScheme == gitlens && config.gitlens.menus.editorTab.compare",
						"group": "1_co_gitlens_1@3"
					},
					{
						"command": "gitlens.showQuickFileHistory",
						"when": "gitlens:enabled && config.gitlens.menus.editorTab.history",
						"group": "1_co_gitlens_2@1"
					},
					{
						"command": "gitlens.showFileHistoryInView",
						"when": "gitlens:enabled && config.gitlens.menus.editorTab.history",
						"group": "1_co_gitlens_2@2"
					},
					{
						"command": "gitlens.copyRemoteFileUrlToClipboard",
						"when": "gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.editorTab.clipboard",
						"group": "1_cutcopypaste@100"
					}
				],
				"explorer/context": [
					{
						"command": "gitlens.openFileInRemote",
						"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.explorer.remote",
						"group": "navigation@100"
					},
					{
						"command": "gitlens.diffWithPrevious",
						"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && config.gitlens.menus.explorer.compare",
						"group": "3_compare@1"
					},
					{
						"command": "gitlens.diffWithRevision",
						"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && config.gitlens.menus.explorer.compare",
						"group": "3_compare@2"
					},
					{
						"command": "gitlens.showQuickFileHistory",
						"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && config.gitlens.menus.explorer.history",
						"group": "4_gitlens_1@1"
					},
					{
						"command": "gitlens.showFileHistoryInView",
						"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && config.gitlens.menus.explorer.history",
						"group": "4_gitlens_1@2"
					},
					{
						"command": "gitlens.copyRemoteFileUrlToClipboard",
						"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.explorer.clipboard",
						"group": "5_cutcopypaste@100"
					}
				],
				"scm/resourceGroup/context": [
					{
						"command": "gitlens.stashSave",
						"when": "gitlens:enabled && !gitlens:readonly && config.gitlens.menus.scmGroup.stashInline",
						"group": "inline@-1"
					},
					{
						"command": "gitlens.stashSave",
						"when": "gitlens:enabled && !gitlens:readonly && config.gitlens.menus.scmGroup.stash",
						"group": "1_modification@100"
					},
					{
						"command": "gitlens.openChangedFiles",
						"when": "gitlens:enabled && config.gitlens.menus.scmGroup.openClose",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.closeUnchangedFiles",
						"when": "gitlens:enabled && config.gitlens.menus.scmGroup.openClose",
						"group": "2_gitlens@2"
					},
					{
						"command": "gitlens.externalDiffAll",
						"when": "gitlens:enabled && config.gitlens.menus.scmGroup.compare",
						"group": "3_gitlens@3"
					},
					{
						"command": "gitlens.diffDirectoryWithHead",
						"when": "gitlens:enabled && config.gitlens.menus.scmGroup.compare",
						"group": "3_gitlens@4"
					}
				],
				"scm/resourceState/context": [
					{
						"command": "gitlens.openFileInRemote",
						"when": "gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.scmItem.remote",
						"group": "navigation"
					},
					{
						"command": "gitlens.externalDiff",
						"when": "gitlens:enabled && config.gitlens.menus.scmItem.compare",
						"group": "navigation"
					},
					{
						"command": "gitlens.diffWithRevision",
						"when": "gitlens:enabled && config.gitlens.menus.scmItem.compare",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.diffWithRef",
						"when": "gitlens:enabled && config.gitlens.menus.scmItem.compare",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.showQuickFileHistory",
						"when": "gitlens:enabled && config.gitlens.menus.scmItem.history",
						"group": "1_gitlens_1@1"
					},
					{
						"command": "gitlens.showFileHistoryInView",
						"when": "gitlens:enabled && config.gitlens.menus.scmItem.history",
						"group": "1_gitlens_1@2"
					},
					{
						"command": "gitlens.stashSaveFiles",
						"when": "gitlens:enabled && !gitlens:readonly && config.gitlens.menus.scmItem.stash",
						"group": "1_modification@-1"
					},
					{
						"command": "gitlens.copyRemoteFileUrlToClipboard",
						"when": "gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.scmItem.clipboard",
						"group": "9_gitlens@1"
					}
				],
				"view/title": [
					{
						"command": "gitlens.pushRepositories",
						"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.repositories:/",
						"group": "navigation@10"
					},
					{
						"command": "gitlens.pullRepositories",
						"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.repositories:/",
						"group": "navigation@11"
					},
					{
						"command": "gitlens.fetchRepositories",
						"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.repositories:/",
						"group": "navigation@12"
					},
					{
						"command": "gitlens.views.repositories.refresh",
						"when": "view =~ /^gitlens\\.views\\.repositories:/",
						"group": "navigation@99"
					},
					{
						"command": "gitlens.views.repositories.setFilesLayoutToAuto",
						"when": "view =~ /^gitlens\\.views\\.repositories:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.repositories.setFilesLayoutToList",
						"when": "view =~ /^gitlens\\.views\\.repositories:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.repositories.setFilesLayoutToTree",
						"when": "view =~ /^gitlens\\.views\\.repositories:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.repositories.setAutoRefreshToOn",
						"when": "view =~ /^gitlens\\.views\\.repositories:/ && config.gitlens.views.repositories.autoRefresh && !gitlens:views:repositories:autoRefresh",
						"group": "2_gitlens"
					},
					{
						"command": "gitlens.views.repositories.setAutoRefreshToOff",
						"when": "view =~ /^gitlens\\.views\\.repositories:/ && config.gitlens.views.repositories.autoRefresh && gitlens:views:repositories:autoRefresh",
						"group": "2_gitlens"
					},
					{
						"command": "gitlens.views.fileHistory.setEditorFollowingOn",
						"when": "view =~ /^gitlens\\.views\\.fileHistory:/ && !gitlens:views:fileHistory:editorFollowing",
						"group": "navigation@10"
					},
					{
						"command": "gitlens.views.fileHistory.setEditorFollowingOff",
						"when": "view =~ /^gitlens\\.views\\.fileHistory:/ && gitlens:views:fileHistory:editorFollowing",
						"group": "navigation@10"
					},
					{
						"command": "gitlens.views.fileHistory.changeBase",
						"when": "view =~ /^gitlens\\.views\\.fileHistory:/",
						"group": "navigation@11"
					},
					{
						"command": "gitlens.views.fileHistory.refresh",
						"when": "view =~ /^gitlens\\.views\\.fileHistory:/",
						"group": "navigation@99"
					},
					{
						"command": "gitlens.views.fileHistory.setRenameFollowingOn",
						"when": "view =~ /^gitlens\\.views\\.fileHistory:/ && !config.gitlens.advanced.fileHistoryFollowsRenames",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.fileHistory.setRenameFollowingOff",
						"when": "view =~ /^gitlens\\.views\\.fileHistory:/ && config.gitlens.advanced.fileHistoryFollowsRenames",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.lineHistory.setEditorFollowingOn",
						"when": "view =~ /^gitlens\\.views\\.lineHistory:/ && !gitlens:views:lineHistory:editorFollowing",
						"group": "navigation@10"
					},
					{
						"command": "gitlens.views.lineHistory.setEditorFollowingOff",
						"when": "view =~ /^gitlens\\.views\\.lineHistory:/ && gitlens:views:lineHistory:editorFollowing",
						"group": "navigation@10"
					},
					{
						"command": "gitlens.views.lineHistory.changeBase",
						"when": "view =~ /^gitlens\\.views\\.lineHistory:/",
						"group": "navigation@11"
					},
					{
						"command": "gitlens.views.lineHistory.refresh",
						"when": "view =~ /^gitlens\\.views\\.lineHistory:/",
						"group": "navigation@99"
					},
					{
						"command": "gitlens.views.lineHistory.setRenameFollowingOn",
						"when": "view =~ /^gitlens\\.views\\.lineHistory:/ && !config.gitlens.advanced.fileHistoryFollowsRenames",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.lineHistory.setRenameFollowingOff",
						"when": "view =~ /^gitlens\\.views\\.lineHistory:/ && config.gitlens.advanced.fileHistoryFollowsRenames",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.compare.selectForCompare",
						"when": "view =~ /^gitlens\\.views\\.compare:/",
						"group": "navigation@10"
					},
					{
						"command": "gitlens.views.compare.setKeepResultsToOn",
						"when": "view =~ /^gitlens\\.views\\.compare:/ && !gitlens:views:compare:keepResults",
						"group": "navigation@11"
					},
					{
						"command": "gitlens.views.compare.setKeepResultsToOff",
						"when": "view =~ /^gitlens\\.views\\.compare:/ && gitlens:views:compare:keepResults",
						"group": "navigation@11"
					},
					{
						"command": "gitlens.views.compare.clear",
						"when": "view =~ /^gitlens\\.views\\.compare:/",
						"group": "navigation@98"
					},
					{
						"command": "gitlens.views.compare.refresh",
						"when": "view =~ /^gitlens\\.views\\.compare:/",
						"group": "navigation@99"
					},
					{
						"command": "gitlens.views.compare.setFilesLayoutToAuto",
						"when": "view =~ /^gitlens\\.views\\.compare:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.compare.setFilesLayoutToList",
						"when": "view =~ /^gitlens\\.views\\.compare:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.compare.setFilesLayoutToTree",
						"when": "view =~ /^gitlens\\.views\\.compare:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.search.searchCommits",
						"when": "view =~ /^gitlens\\.views\\.search:/",
						"group": "navigation@10"
					},
					{
						"command": "gitlens.views.search.setKeepResultsToOn",
						"when": "view =~ /^gitlens\\.views\\.search:/ && !gitlens:views:search:keepResults",
						"group": "navigation@11"
					},
					{
						"command": "gitlens.views.search.setKeepResultsToOff",
						"when": "view =~ /^gitlens\\.views\\.search:/ && gitlens:views:search:keepResults",
						"group": "navigation@11"
					},
					{
						"command": "gitlens.views.search.clear",
						"when": "view =~ /^gitlens\\.views\\.search:/",
						"group": "navigation@98"
					},
					{
						"command": "gitlens.views.search.refresh",
						"when": "view =~ /^gitlens\\.views\\.search:/",
						"group": "navigation@99"
					},
					{
						"command": "gitlens.views.search.setFilesLayoutToAuto",
						"when": "view =~ /^gitlens\\.views\\.search:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.search.setFilesLayoutToList",
						"when": "view =~ /^gitlens\\.views\\.search:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.views.search.setFilesLayoutToTree",
						"when": "view =~ /^gitlens\\.views\\.search:/",
						"group": "1_gitlens"
					},
					{
						"command": "gitlens.supportGitLens",
						"when": "view =~ /^gitlens\\.views\\..*:/ && config.gitlens.advanced.messages.suppressSupportGitLensNotification != true && gitlens:views:supportGitLens:hide != true",
						"group": "navigation@1"
					},
					{
						"command": "gitlens.showSettingsPage#repositories-view",
						"when": "view =~ /^gitlens\\.views\\.repositories:/",
						"group": "9_gitlens"
					},
					{
						"command": "gitlens.showSettingsPage#file-history-view",
						"when": "view =~ /^gitlens\\.views\\.fileHistory:/",
						"args": "general",
						"group": "9_gitlens"
					},
					{
						"command": "gitlens.showSettingsPage#line-history-view",
						"when": "view =~ /^gitlens\\.views\\.lineHistory:/",
						"args": "general",
						"group": "9_gitlens"
					},
					{
						"command": "gitlens.showSettingsPage#search-commits-view",
						"when": "view =~ /^gitlens\\.views\\.search:/",
						"args": "general",
						"group": "9_gitlens"
					},
					{
						"command": "gitlens.showSettingsPage#compare-view",
						"when": "view =~ /^gitlens\\.views\\.compare:/",
						"args": "general",
						"group": "9_gitlens"
					}
				],
				"view/item/context": [
					{
						"command": "gitlens.openBranchesInRemote",
						"when": "viewItem =~ /gitlens:branches\\b.*?\\+remotes\\b.*?/",
						"group": "inline@98"
					},
					{
						"command": "gitlens.openBranchesInRemote",
						"when": "viewItem =~ /gitlens:branches\\b.*?\\+remotes\\b.*?/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.star",
						"when": "viewItem =~ /gitlens:branch\\b(?!.*?\\+starred\\b.*?)/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.unstar",
						"when": "viewItem =~ /gitlens:branch\\b.*?\\+starred\\b.*?/",
						"group": "inline@2"
					},
					{
						"command": "gitlens.views.checkout",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\+current\\b.*?)/",
						"group": "inline@10"
					},
					{
						"command": "gitlens.views.compareWithRemote",
						"when": "viewItem =~ /gitlens:branch\\b.*?\\+tracking\\b.*?/",
						"group": "inline@96"
					},
					{
						"command": "gitlens.views.compareWithHead",
						"when": "viewItem =~ /gitlens:(branch\\b(?!.*?\\+current\\b.*?)|commit\\b|stash\\b|tag\\b)/",
						"group": "inline@97",
						"alt": "gitlens.views.compareWithWorking"
					},
					{
						"command": "gitlens.views.compareWithWorking",
						"when": "viewItem =~ /gitlens:branch\\b.*?\\+current\\b.*?/",
						"group": "inline@97"
					},
					{
						"command": "gitlens.openBranchInRemote",
						"when": "viewItem =~ /gitlens:branch\\b.*?\\+(tracking|remote)\\b.*?/",
						"group": "inline@98"
					},
					{
						"command": "gitlens.views.checkout",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\+current\\b.*?)/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.openBranchInRemote",
						"when": "viewItem =~ /gitlens:branch\\b.*?\\+(tracking|remote)\\b.*?/",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.views.compareWithRemote",
						"when": "viewItem =~ /gitlens:branch\\b.*?\\+tracking\\b.*?/",
						"group": "7_gitlens@1"
					},
					{
						"command": "gitlens.views.compareWithHead",
						"when": "viewItem =~ /gitlens:(branch\\b(?!.*?\\+current\\b.*?)|commit\\b|stash\\b|tag\\b)/",
						"group": "7_gitlens@2"
					},
					{
						"command": "gitlens.views.compareWithWorking",
						"when": "viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
						"group": "7_gitlens@3"
					},
					{
						"command": "gitlens.views.compareAncestryWithWorking",
						"when": "viewItem =~ /gitlens:branch\\b(?!.*?\\+current\\b.*?)/",
						"group": "7_gitlens@4"
					},
					{
						"command": "gitlens.views.compareWithSelected",
						"when": "viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/ && gitlens:views:canCompare",
						"group": "7_gitlens_@1"
					},
					{
						"command": "gitlens.views.selectForCompare",
						"when": "viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
						"group": "7_gitlens_@2"
					},
					{
						"command": "gitlens.views.compareFileWithSelected",
						"when": "viewItem =~ /gitlens:file:\\b/ && gitlens:views:canCompare:file",
						"group": "7_gitlens_@1"
					},
					{
						"command": "gitlens.views.selectFileForCompare",
						"when": "viewItem =~ /gitlens:file:\\b/",
						"group": "7_gitlens_@2"
					},
					{
						"command": "gitlens.views.openDirectoryDiffWithWorking",
						"when": "viewItem =~ /gitlens:(branch|tag)\\b/",
						"group": "7_gitlens_more@2"
					},
					{
						"command": "gitlens.views.terminalCheckoutBranch",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\+current\\b.*?)//",
						"group": "8_gitlens@1"
					},
					{
						"command": "gitlens.views.terminalRebaseBranchToRemote",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b.*?\\+current\\b.*?\\+tracking\\b.*?/",
						"group": "8_gitlens@1"
					},
					{
						"command": "gitlens.views.terminalMergeBranch",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\+current\\b.*?)/",
						"group": "8_gitlens@2"
					},
					{
						"command": "gitlens.views.terminalRebaseBranch",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\+current\\b.*?)/",
						"group": "8_gitlens@3"
					},
					{
						"command": "gitlens.views.terminalSquashBranchIntoCommit",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\+current\\b.*?)/",
						"group": "8_gitlens@4"
					},
					{
						"command": "gitlens.views.terminalCreateBranch",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:(branch|commit|tag)\\b/",
						"group": "8_gitlens@5"
					},
					{
						"command": "gitlens.views.terminalDeleteBranch",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\+current\\b.*?)/",
						"group": "8_gitlens@6"
					},
					{
						"command": "gitlens.views.terminalCreateTag",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:(branch|commit)\\b/",
						"group": "8_gitlens@7"
					},
					{
						"command": "gitlens.views.star",
						"when": "viewItem =~ /gitlens:branch\\b(?!.*?\\+starred\\b.*?)/",
						"group": "8_gitlens_@1"
					},
					{
						"command": "gitlens.views.unstar",
						"when": "viewItem =~ /gitlens:branch\\b.*?\\+starred\\b.*?/",
						"group": "8_gitlens_@1"
					},
					{
						"command": "gitlens.inviteToLiveShare",
						"when": "gitlens:vsls && gitlens:vsls != guest && viewItem =~ /gitlens:contributor\\b/",
						"group": "inline@97"
					},
					{
						"command": "gitlens.views.contributor.copyToClipboard",
						"when": "viewItem =~ /gitlens:contributor\\b/",
						"group": "inline@98"
					},
					{
						"command": "gitlens.inviteToLiveShare",
						"when": "gitlens:vsls && gitlens:vsls != guest && viewItem =~ /gitlens:contributor\\b/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.contributor.copyToClipboard",
						"when": "viewItem =~ /gitlens:contributor\\b/",
						"group": "1_gitlens_1@1"
					},
					{
						"command": "gitlens.views.contributor.addCoauthoredBy",
						"when": "viewItem =~ /gitlens:contributor\\b/",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.openCommitInRemote",
						"when": "viewItem =~ /gitlens:commit\\b/ && gitlens:hasRemotes",
						"group": "inline@98"
					},
					{
						"command": "gitlens.openCommitInRemote",
						"when": "viewItem =~ /gitlens:commit\\b/ && gitlens:hasRemotes",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.openChangedFileChanges",
						"when": "viewItem =~ /gitlens:(commit|stash)\\b/",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.views.openChangedFileChangesWithWorking",
						"when": "viewItem =~ /gitlens:(commit|stash)\\b/",
						"group": "2_gitlens@2"
					},
					{
						"command": "gitlens.views.openChangedFiles",
						"when": "viewItem =~ /gitlens:(commit|stash)\\b/",
						"group": "3_gitlens@1"
					},
					{
						"command": "gitlens.views.openChangedFileRevisions",
						"when": "viewItem =~ /gitlens:(commit|stash)\\b/",
						"group": "3_gitlens@2"
					},
					{
						"command": "gitlens.copyShaToClipboard",
						"when": "viewItem =~ /gitlens:(file:)?commit\\b/",
						"group": "inline@98",
						"alt": "gitlens.copyMessageToClipboard"
					},
					{
						"command": "gitlens.copyShaToClipboard",
						"when": "viewItem =~ /gitlens:(file:)?commit\\b/",
						"group": "5_gitlens@1"
					},
					{
						"command": "gitlens.copyMessageToClipboard",
						"when": "viewItem =~ /gitlens:(commit|stash|file:commit)\\b/",
						"group": "5_gitlens@2"
					},
					{
						"command": "gitlens.showQuickCommitDetails",
						"when": "viewItem =~ /gitlens:commit\\b/",
						"group": "5_gitlens_1@1"
					},
					{
						"command": "gitlens.showCommitInView",
						"when": "viewItem =~ /gitlens:commit\\b/",
						"group": "5_gitlens_1@2"
					},
					{
						"command": "gitlens.views.terminalCherryPickCommit",
						"when": "!gitlens:readonly && viewItem == gitlens:commit",
						"group": "8_gitlens@1"
					},
					{
						"command": "gitlens.views.terminalPushCommit",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b.*?\\+current\\b.*?/",
						"group": "8_gitlens@2"
					},
					{
						"command": "gitlens.views.terminalRevertCommit",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b.*?\\+current\\b.*?/",
						"group": "8_gitlens@3"
					},
					{
						"command": "gitlens.views.terminalCheckoutCommit",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b/",
						"group": "8_gitlens@4"
					},
					{
						"command": "gitlens.views.terminalRebaseCommit",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b/",
						"group": "8_gitlens@5"
					},
					{
						"command": "gitlens.views.terminalResetCommit",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b/",
						"group": "8_gitlens@6"
					},
					{
						"command": "gitlens.views.openFile",
						"when": "viewItem =~ /gitlens:(file|history:(file|line)|status:file)\\b/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.stageFile",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b.*?\\+unstaged\\b.*?/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.unstageFile",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b.*?\\+staged\\b.*?/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.stageFile",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b.*?\\+unstaged\\b.*?/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.unstageFile",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b.*?\\+staged\\b.*?/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.stashSaveFiles",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b.*?\\+(un)?staged\\b.*?/",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.views.openChanges",
						"when": "viewItem =~ /gitlens:file\\b/",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.externalDiff",
						"when": "viewItem =~ /gitlens:file\\b/",
						"group": "2_gitlens@2"
					},
					{
						"command": "gitlens.views.openChangesWithWorking",
						"when": "viewItem =~ /gitlens:file\\b/",
						"group": "2_gitlens@3"
					},
					{
						"command": "gitlens.views.openFile",
						"when": "viewItem =~ /gitlens:(file|history:(file|line)|status:file)\\b/",
						"group": "3_gitlens@1"
					},
					{
						"command": "gitlens.views.openFileRevision",
						"when": "viewItem =~ /gitlens:file\\b/",
						"group": "3_gitlens@2"
					},
					{
						"command": "gitlens.openFileInRemote",
						"when": "viewItem =~ /gitlens:(file\\b(?!.*?\\+(un)?staged\\b.*?)|history:(file|line))\\b/ && gitlens:hasRemotes",
						"group": "inline@99",
						"alt": "gitlens.copyRemoteFileUrlToClipboard"
					},
					{
						"command": "gitlens.openFileInRemote",
						"when": "viewItem =~ /gitlens:file\\b/ && gitlens:hasRemotes",
						"group": "4_gitlens@1"
					},
					{
						"command": "gitlens.copyRemoteFileUrlToClipboard",
						"when": "viewItem =~ /gitlens:(file|history:(file|line)|status:file)\\b/ && gitlens:hasRemotes",
						"group": "5_gitlens@3"
					},
					{
						"command": "gitlens.views.openFileRevisionInRemote",
						"when": "viewItem == gitlens:file:commit && gitlens:hasRemotes",
						"group": "4_gitlens@2"
					},
					{
						"command": "gitlens.openFileInRemote",
						"when": "viewItem =~ /gitlens:(history:(file|line)|status:file)\\b/ && gitlens:hasRemotes",
						"group": "3_gitlens@2"
					},
					{
						"command": "gitlens.views.applyChanges",
						"when": "viewItem =~ /gitlens:file:(commit|results)\\b/",
						"group": "5_gitlens_1@1"
					},
					{
						"command": "gitlens.views.checkout",
						"when": "viewItem =~ /gitlens:file:(commit|results)\\b/",
						"group": "5_gitlens_1@2"
					},
					{
						"command": "gitlens.views.applyChanges",
						"when": "!gitlens:readonly && viewItem == gitlens:file:stash",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.checkout",
						"when": "!gitlens:readonly && viewItem == gitlens:file:stash",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.showQuickCommitDetails",
						"when": "viewItem =~ /gitlens:file\\b(?!(:stash|:status))/",
						"group": "5_gitlens_2@1"
					},
					{
						"command": "gitlens.showCommitInView",
						"when": "viewItem =~ /gitlens:file\\b(?!(:stash|:status))/",
						"group": "5_gitlens_2@2"
					},
					{
						"command": "gitlens.showQuickFileHistory",
						"when": "viewItem =~ /gitlens:file\\b/",
						"group": "8_gitlens@1"
					},
					{
						"command": "gitlens.showFileHistoryInView",
						"when": "viewItem =~ /gitlens:file\\b/",
						"group": "8_gitlens@2"
					},
					{
						"command": "gitlens.views.fetch",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:remote\\b/",
						"group": "inline@97"
					},
					{
						"command": "gitlens.openRepoInRemote",
						"when": "viewItem =~ /gitlens:remote\\b/",
						"group": "inline@98"
					},
					{
						"command": "gitlens.views.fetch",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:remote\\b/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.openRepoInRemote",
						"when": "viewItem =~ /gitlens:remote\\b/",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.openBranchesInRemote",
						"when": "viewItem =~ /gitlens:remote\\b/",
						"group": "2_gitlens@2"
					},
					{
						"command": "gitlens.views.terminalRemoveRemote",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:remote\\b/",
						"group": "8_gitlens@1"
					},
					{
						"command": "gitlens.views.setAsDefault",
						"when": "viewItem =~ /gitlens:remote\\b(?!.*?\\+default\\b.*?)/",
						"group": "8_gitlens_@1"
					},
					{
						"command": "gitlens.views.unsetAsDefault",
						"when": "viewItem =~ /gitlens:remote\\b.*?\\+default\\b.*?/",
						"group": "8_gitlens_@1"
					},
					{
						"command": "gitlens.views.exploreRepoRevision",
						"when": "viewItem =~ /gitlens:(branch|commit|file:(commit|results)|stash|tag)\\b/",
						"group": "7_gitlens_more@1"
					},
					{
						"command": "gitlens.showCommitSearch",
						"when": "viewItem =~ /gitlens:repository\\b/",
						"group": "inline@10"
					},
					{
						"command": "gitlens.views.star",
						"when": "viewItem =~ /gitlens:repository\\b(?!.*?\\+starred\\b.*?)/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.unstar",
						"when": "viewItem =~ /gitlens:repository\\b.*?\\+starred\\b.*?/",
						"group": "inline@2"
					},
					{
						"command": "gitlens.views.push",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "inline@97",
						"alt": "gitlens.views.pushWithForce"
					},
					{
						"command": "gitlens.views.pull",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "inline@98"
					},
					{
						"command": "gitlens.views.fetch",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "inline@99"
					},
					{
						"command": "gitlens.views.fetch",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.pull",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.push",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.pushWithForce",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.views.openInTerminal",
						"when": "viewItem =~ /gitlens:repository\\b/",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.openRepoInRemote",
						"when": "viewItem =~ /gitlens:repository\\b/ && gitlens:hasRemotes",
						"group": "2_gitlens@2"
					},
					{
						"command": "gitlens.showCommitSearch",
						"when": "viewItem =~ /gitlens:repository\\b/",
						"group": "3_gitlens@1"
					},
					{
						"command": "gitlens.stashApply",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "4_gitlens@1"
					},
					{
						"command": "gitlens.stashSave",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
						"group": "4_gitlens@2"
					},
					{
						"command": "gitlens.views.star",
						"when": "viewItem =~ /gitlens:repository\\b(?!.*?\\+starred\\b.*?)/",
						"group": "8_gitlens@1"
					},
					{
						"command": "gitlens.views.unstar",
						"when": "viewItem =~ /gitlens:repository\\b.*?\\+starred\\b.*?/",
						"group": "8_gitlens@1"
					},
					{
						"command": "gitlens.views.closeRepository",
						"when": "viewItem =~ /gitlens:repository\\b/",
						"group": "8_gitlens@2"
					},
					{
						"command": "gitlens.views.pull",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem == gitlens:status:upstream:behind",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.pull",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem == gitlens:status:upstream:behind",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.push",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem == gitlens:status:upstream:ahead",
						"group": "inline@1",
						"alt": "gitlens.views.pushWithForce"
					},
					{
						"command": "gitlens.views.push",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem == gitlens:status:upstream:ahead",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.pushWithForce",
						"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem == gitlens:status:upstream:ahead",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.views.dismissNode",
						"when": "viewItem =~ /gitlens:(compare:picker:ref|compare:results\\b(?!.*?\\+pinned\\b.*?)|search)\\b(?!:(commits|files))/",
						"group": "inline@99"
					},
					{
						"command": "gitlens.views.compare.pinComparison",
						"when": "viewItem =~ /gitlens:compare:results\\b(?!.*?\\+pinned\\b.*?)/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.compare.unpinComparison",
						"when": "viewItem =~ /gitlens:compare:results\\b.*?\\+pinned\\b.*?/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.compare.swapComparison",
						"when": "viewItem =~ /gitlens:compare:results\\b/",
						"group": "inline@2"
					},
					{
						"command": "gitlens.views.refreshNode",
						"when": "viewItem =~ /gitlens:compare:results\\b/",
						"group": "inline@3"
					},
					{
						"command": "gitlens.views.openDirectoryDiff",
						"when": "viewItem =~ /gitlens:compare:results\\b/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.compare.pinComparison",
						"when": "viewItem =~ /gitlens:compare:results\\b(?!.*?\\+pinned\\b.*?)/",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.views.compare.unpinComparison",
						"when": "viewItem =~ /gitlens:compare:results\\b.*?\\+pinned\\b.*?/",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.views.compare.swapComparison",
						"when": "viewItem =~ /gitlens:compare:results\\b/",
						"group": "2_gitlens@2"
					},
					{
						"command": "gitlens.views.search.searchCommits",
						"when": "viewItem == gitlens:search:results",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.search.searchCommits",
						"when": "viewItem == gitlens:search:results",
						"group": "2_gitlens@1"
					},
					{
						"command": "gitlens.stashSave",
						"when": "!gitlens:readonly && viewItem =~ /^gitlens:(stashes|status:files)$/",
						"group": "inline@98"
					},
					{
						"command": "gitlens.stashApply",
						"when": "!gitlens:readonly && viewItem == gitlens:stashes",
						"group": "inline@99"
					},
					{
						"command": "gitlens.stashSave",
						"when": "!gitlens:readonly && viewItem =~ /^gitlens:(stashes|status:files)$/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.stashApply",
						"when": "!gitlens:readonly && viewItem == gitlens:stashes",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.stashApply",
						"when": "!gitlens:readonly && viewItem == gitlens:stash",
						"group": "inline@98"
					},
					{
						"command": "gitlens.stashDelete",
						"when": "!gitlens:readonly && viewItem == gitlens:stash",
						"group": "inline@99"
					},
					{
						"command": "gitlens.stashApply",
						"when": "!gitlens:readonly && viewItem == gitlens:stash",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.stashDelete",
						"when": "!gitlens:readonly && viewItem == gitlens:stash",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.views.checkout",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:tag\\b/",
						"group": "inline@10"
					},
					{
						"command": "gitlens.views.checkout",
						"when": "!gitlens:readonly && viewItem =~ /gitlens:tag\\b/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.terminalDeleteTag",
						"when": "!gitlens:readonly && viewItem == gitlens:tag",
						"group": "8_gitlens"
					},
					{
						"command": "gitlens.views.stageDirectory",
						"when": "viewItem =~ /gitlens:folder\\b.*?\\+working\\b.*?/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.unstageDirectory",
						"when": "viewItem =~ /gitlens:folder\\b.*?\\+working\\b.*?/",
						"group": "inline@2"
					},
					{
						"command": "gitlens.views.stageDirectory",
						"when": "viewItem =~ /gitlens:folder\\b.*?\\+working\\b.*?/",
						"group": "1_gitlens@1"
					},
					{
						"command": "gitlens.views.unstageDirectory",
						"when": "viewItem =~ /gitlens:folder\\b.*?\\+working\\b.*?/",
						"group": "1_gitlens@2"
					},
					{
						"command": "gitlens.views.expandNode",
						"when": "viewItem =~ /gitlens:(compare|folder|results|search|status:files)\\b/",
						"group": "8_gitlens@1"
					},
					{
						"command": "gitlens.views.dismissNode",
						"when": "viewItem =~ /gitlens:(compare:picker:ref|compare:results\\b(?!.*?\\+pinned\\b.*?)|search)\\b(?!:(commits|files))/",
						"group": "8_gitlens@2"
					},
					{
						"command": "gitlens.views.refreshNode",
						"when": "viewItem =~ /gitlens:(?!file\\b)/",
						"group": "9_gitlens@1"
					},
					{
						"command": "gitlens.views.showAllChildren",
						"when": "viewItem =~ /gitlens:pager\\b/",
						"group": "inline@1"
					},
					{
						"command": "gitlens.views.showAllChildren",
						"when": "viewItem =~ /gitlens:pager\\b/",
						"group": "1_gitlens@1"
					}
				]
			},
			"keybindings": [
				{
					"command": "gitlens.key.left",
					"key": "alt+left",
					"when": "gitlens:key:left"
				},
				{
					"command": "gitlens.key.right",
					"key": "alt+right",
					"when": "gitlens:key:right"
				},
				{
					"command": "gitlens.key.,",
					"key": "alt+,",
					"when": "gitlens:key:,"
				},
				{
					"command": "gitlens.key..",
					"key": "alt+.",
					"when": "gitlens:key:."
				},
				{
					"command": "gitlens.key.escape",
					"key": "escape",
					"when": "gitlens:key:escape && editorTextFocus && !findWidgetVisible && !renameInputVisible && !suggestWidgetVisible && !isInEmbeddedEditor"
				},
				{
					"command": "gitlens.toggleFileBlame",
					"key": "alt+b",
					"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.toggleCodeLens",
					"key": "shift+alt+b",
					"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:enabled && gitlens:canToggleCodeLens"
				},
				{
					"command": "gitlens.showLastQuickPick",
					"key": "alt+-",
					"when": "config.gitlens.keymap == alternate && gitlens:enabled"
				},
				{
					"command": "gitlens.showCommitSearch",
					"key": "alt+/",
					"when": "config.gitlens.keymap == alternate && gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickFileHistory",
					"key": "alt+h",
					"when": "config.gitlens.keymap == alternate && gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickRepoHistory",
					"key": "shift+alt+h",
					"when": "config.gitlens.keymap == alternate && gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickRepoStatus",
					"key": "alt+s",
					"when": "config.gitlens.keymap == alternate && gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickCommitFileDetails",
					"key": "alt+c",
					"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:enabled"
				},
				{
					"command": "gitlens.diffWithNext",
					"key": "alt+.",
					"when": "config.gitlens.keymap == alternate && editorTextFocus && !isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffWithNextInDiff",
					"key": "alt+.",
					"when": "config.gitlens.keymap == alternate && isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffWithPrevious",
					"key": "alt+,",
					"when": "config.gitlens.keymap == alternate && editorTextFocus && !isInDiffEditor && gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.diffWithPreviousInDiff",
					"key": "alt+,",
					"when": "config.gitlens.keymap == alternate && isInDiffEditor && gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.diffLineWithPrevious",
					"key": "shift+alt+,",
					"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.diffWithWorking",
					"key": "shift+alt+.",
					"when": "config.gitlens.keymap == alternate && editorTextFocus && !isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffWithWorkingInDiff",
					"key": "shift+alt+.",
					"when": "config.gitlens.keymap == alternate && isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffLineWithWorking",
					"key": "alt+w",
					"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.toggleFileBlame",
					"key": "ctrl+shift+g b",
					"mac": "cmd+alt+g b",
					"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.toggleCodeLens",
					"key": "ctrl+shift+g shift+b",
					"mac": "cmd+alt+g shift+b",
					"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:enabled && gitlens:canToggleCodeLens"
				},
				{
					"command": "gitlens.showLastQuickPick",
					"key": "ctrl+shift+g -",
					"mac": "cmd+alt+g -",
					"when": "config.gitlens.keymap == chorded && gitlens:enabled"
				},
				{
					"command": "gitlens.showCommitSearch",
					"key": "ctrl+shift+g /",
					"mac": "cmd+alt+g /",
					"when": "config.gitlens.keymap == chorded && gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickFileHistory",
					"key": "ctrl+shift+g h",
					"mac": "cmd+alt+g h",
					"when": "config.gitlens.keymap == chorded && gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickRepoHistory",
					"key": "ctrl+shift+g shift+h",
					"mac": "cmd+alt+g shift+h",
					"when": "config.gitlens.keymap == chorded && gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickRepoStatus",
					"key": "ctrl+shift+g s",
					"mac": "cmd+alt+g s",
					"when": "config.gitlens.keymap == chorded && gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickCommitFileDetails",
					"key": "ctrl+shift+g c",
					"mac": "cmd+alt+g c",
					"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:enabled"
				},
				{
					"command": "gitlens.diffWithNext",
					"key": "ctrl+shift+g .",
					"mac": "cmd+alt+g .",
					"when": "config.gitlens.keymap == chorded && editorTextFocus && !isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffWithNextInDiff",
					"key": "ctrl+shift+g .",
					"mac": "cmd+alt+g .",
					"when": "config.gitlens.keymap == chorded && isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffWithPrevious",
					"key": "ctrl+shift+g ,",
					"mac": "cmd+alt+g ,",
					"when": "config.gitlens.keymap == chorded && editorTextFocus && !isInDiffEditor && gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.diffWithPreviousInDiff",
					"key": "ctrl+shift+g ,",
					"mac": "cmd+alt+g ,",
					"when": "config.gitlens.keymap == chorded && isInDiffEditor && gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.diffLineWithPrevious",
					"key": "ctrl+shift+g shift+,",
					"mac": "cmd+alt+g shift+,",
					"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.diffWithWorking",
					"key": "ctrl+shift+g shift+.",
					"mac": "cmd+alt+g shift+.",
					"when": "config.gitlens.keymap == chorded && editorTextFocus && !isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffWithWorkingInDiff",
					"key": "ctrl+shift+g shift+.",
					"mac": "cmd+alt+g shift+.",
					"when": "config.gitlens.keymap == chorded && isInDiffEditor && gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffLineWithWorking",
					"key": "ctrl+shift+g w",
					"mac": "cmd+alt+g w",
					"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "workbench.view.scm",
					"key": "ctrl+shift+g g",
					"mac": "ctrl+shift+g",
					"when": "config.gitlens.keymap == chorded && gitlens:enabled"
				}
			],
			"resourceLabelFormatters": [
				{
					"scheme": "gitlens",
					"authority": "*",
					"formatting": {
						"label": "${path} (${authority})",
						"separator": "/"
					}
				}
			],
			"viewsContainers": {
				"activitybar": [
					{
						"id": "gitlens",
						"title": "GitLens",
						"icon": "images/gitlens-activitybar.svg"
					}
				]
			},
			"views": {
				"gitlens": [
					{
						"id": "gitlens.views.repositories:gitlens",
						"name": "Repositories",
						"when": "config.gitlens.views.repositories.enabled && config.gitlens.views.repositories.location == gitlens"
					},
					{
						"id": "gitlens.views.fileHistory:gitlens",
						"name": "File History",
						"when": "config.gitlens.views.fileHistory.enabled && config.gitlens.views.fileHistory.location == gitlens"
					},
					{
						"id": "gitlens.views.lineHistory:gitlens",
						"name": "Line History",
						"when": "config.gitlens.views.lineHistory.enabled && config.gitlens.views.lineHistory.location == gitlens"
					},
					{
						"id": "gitlens.views.compare:gitlens",
						"name": "Compare",
						"when": "config.gitlens.views.compare.enabled && config.gitlens.views.compare.location == gitlens"
					},
					{
						"id": "gitlens.views.search:gitlens",
						"name": "Search Commits",
						"when": "config.gitlens.views.search.enabled && config.gitlens.views.search.location == gitlens"
					}
				],
				"explorer": [
					{
						"id": "gitlens.views.repositories:explorer",
						"name": "GitLens: Repositories",
						"when": "gitlens:enabled && config.gitlens.views.repositories.enabled && config.gitlens.views.repositories.location == explorer"
					},
					{
						"id": "gitlens.views.fileHistory:explorer",
						"name": "GitLens: File History",
						"when": "gitlens:enabled && config.gitlens.views.fileHistory.enabled && config.gitlens.views.fileHistory.location == explorer"
					},
					{
						"id": "gitlens.views.lineHistory:explorer",
						"name": "GitLens: Line History",
						"when": "gitlens:enabled && config.gitlens.views.lineHistory.enabled && config.gitlens.views.lineHistory.location == explorer"
					},
					{
						"id": "gitlens.views.compare:explorer",
						"name": "GitLens: Compare",
						"when": "gitlens:enabled && config.gitlens.views.compare.enabled && config.gitlens.views.compare.location == explorer"
					},
					{
						"id": "gitlens.views.search:explorer",
						"name": "GitLens: Search Commits",
						"when": "gitlens:enabled && config.gitlens.views.search.enabled && config.gitlens.views.search.location == explorer"
					}
				],
				"scm": [
					{
						"id": "gitlens.views.repositories:scm",
						"name": "GitLens: Repositories",
						"when": "gitlens:enabled && config.gitlens.views.repositories.enabled && config.gitlens.views.repositories.location == scm"
					},
					{
						"id": "gitlens.views.fileHistory:scm",
						"name": "GitLens: File History",
						"when": "gitlens:enabled && config.gitlens.views.fileHistory.enabled && config.gitlens.views.fileHistory.location == scm"
					},
					{
						"id": "gitlens.views.lineHistory:scm",
						"name": "GitLens: Line History",
						"when": "gitlens:enabled && config.gitlens.views.lineHistory.enabled && config.gitlens.views.lineHistory.location == scm"
					},
					{
						"id": "gitlens.views.compare:scm",
						"name": "GitLens: Compare",
						"when": "gitlens:enabled && config.gitlens.views.compare.enabled && config.gitlens.views.compare.location == scm"
					},
					{
						"id": "gitlens.views.search:scm",
						"name": "GitLens: Search Commits",
						"when": "gitlens:enabled && config.gitlens.views.search.enabled && config.gitlens.views.search.location == scm"
					}
				]
			}
		},
		"scripts": {
			"analyze:bundle": "webpack --env.analyzeBundle",
			"analyze:deps": "webpack --env.analyzeDeps",
			"build": "webpack --env.development",
			"bundle": "webpack --env.production",
			"clean": "git clean -Xdf -e !node_modules -e !node_modules/**/*",
			"lint": "eslint src/**/*.ts --fix",
			"pack": "vsce package",
			"pretty": "prettier --config .prettierrc --loglevel warn --write \"./**/*.{ts,md,json}\" && npm run lint",
			"pub": "vsce publish",
			"rebuild": "npm run reset && npm run build",
			"reset": "npm run clean && npm install --no-save",
			"watch": "webpack --watch --env.development --info-verbosity verbose",
			"webviews:optimize": "webpack --config-name webviews --env.optimizeImages",
			"webviews:watch": "webpack --watch --config-name webviews --env.development --info-verbosity verbose",
			"update:emoji": "pushd emoji && node ./shortcodeToEmoji.js && popd",
			"postinstall": "node ./node_modules/vscode/bin/install",
			"vscode:prepublish": "npm run reset && npm run bundle"
		},
		"dependencies": {
			"dayjs": "1.8.14",
			"iconv-lite": "0.4.24",
			"lodash-es": "4.17.11",
			"vsls": "0.3.1291"
		},
		"devDependencies": {
			"@types/lodash-es": "4.17.3",
			"@types/node": "10.1.4",
			"@typescript-eslint/eslint-plugin": "1.10.2",
			"@typescript-eslint/parser": "1.10.2",
			"clean-webpack-plugin": "3.0.0",
			"circular-dependency-plugin": "5.0.2",
			"css-loader": "2.1.1",
			"eslint": "5.16.0",
			"eslint-cli": "1.1.1",
			"eslint-config-prettier": "4.3.0",
			"eslint-loader": "2.1.2",
			"eslint-plugin-import": "2.17.3",
			"eslint-plugin-prettiest": "0.0.1",
			"fork-ts-checker-webpack-plugin": "1.3.5",
			"html-webpack-exclude-assets-plugin": "0.0.7",
			"html-webpack-inline-source-plugin": "0.0.10",
			"html-webpack-plugin": "3.2.0",
			"imagemin-webpack-plugin": "2.4.2",
			"mini-css-extract-plugin": "0.7.0",
			"node-sass": "4.12.0",
			"prettier": "1.18.2",
			"prettier-eslint": "8.8.2",
			"sass-loader": "7.1.0",
			"terser-webpack-plugin": "1.3.0",
			"ts-loader": "6.0.2",
			"typescript": "3.5.1",
			"vsce": "1.62.0",
			"vscode": "1.1.34",
			"webpack": "4.33.0",
			"webpack-cli": "3.3.3",
			"webpack-bundle-analyzer": "3.3.2"
		},
		"__metadata": {
			"id": "4de763bd-505d-4978-9575-2b7696ecf94e",
			"publisherId": "678d198b-9b2e-49d3-96ff-6d801c9575df",
			"publisherDisplayName": "Eric Amodio"
		}
	}
]